/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1PodStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PodStatus{}

// V1PodStatus PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
type V1PodStatus struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions []V1PodCondition `json:"conditions,omitempty"`
	// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses []V1ContainerStatus `json:"containerStatuses,omitempty"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP *string `json:"hostIP,omitempty"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses []V1ContainerStatus `json:"initContainerStatuses,omitempty"`
	// A human readable message indicating details about why the pod is in this condition.
	Message *string `json:"message,omitempty"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName *string `json:"nominatedNodeName,omitempty"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase *string `json:"phase,omitempty"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP *string `json:"podIP,omitempty"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass *string `json:"qosClass,omitempty"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason *string `json:"reason,omitempty"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
	StartTime *string `json:"startTime,omitempty"`
}

// NewV1PodStatus instantiates a new V1PodStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PodStatus() *V1PodStatus {
	this := V1PodStatus{}
	return &this
}

// NewV1PodStatusWithDefaults instantiates a new V1PodStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PodStatusWithDefaults() *V1PodStatus {
	this := V1PodStatus{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1PodStatus) GetConditions() []V1PodCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1PodCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetConditionsOk() ([]V1PodCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1PodStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1PodCondition and assigns it to the Conditions field.
func (o *V1PodStatus) SetConditions(v []V1PodCondition) {
	o.Conditions = v
}

// GetContainerStatuses returns the ContainerStatuses field value if set, zero value otherwise.
func (o *V1PodStatus) GetContainerStatuses() []V1ContainerStatus {
	if o == nil || IsNil(o.ContainerStatuses) {
		var ret []V1ContainerStatus
		return ret
	}
	return o.ContainerStatuses
}

// GetContainerStatusesOk returns a tuple with the ContainerStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetContainerStatusesOk() ([]V1ContainerStatus, bool) {
	if o == nil || IsNil(o.ContainerStatuses) {
		return nil, false
	}
	return o.ContainerStatuses, true
}

// HasContainerStatuses returns a boolean if a field has been set.
func (o *V1PodStatus) HasContainerStatuses() bool {
	if o != nil && !IsNil(o.ContainerStatuses) {
		return true
	}

	return false
}

// SetContainerStatuses gets a reference to the given []V1ContainerStatus and assigns it to the ContainerStatuses field.
func (o *V1PodStatus) SetContainerStatuses(v []V1ContainerStatus) {
	o.ContainerStatuses = v
}

// GetHostIP returns the HostIP field value if set, zero value otherwise.
func (o *V1PodStatus) GetHostIP() string {
	if o == nil || IsNil(o.HostIP) {
		var ret string
		return ret
	}
	return *o.HostIP
}

// GetHostIPOk returns a tuple with the HostIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetHostIPOk() (*string, bool) {
	if o == nil || IsNil(o.HostIP) {
		return nil, false
	}
	return o.HostIP, true
}

// HasHostIP returns a boolean if a field has been set.
func (o *V1PodStatus) HasHostIP() bool {
	if o != nil && !IsNil(o.HostIP) {
		return true
	}

	return false
}

// SetHostIP gets a reference to the given string and assigns it to the HostIP field.
func (o *V1PodStatus) SetHostIP(v string) {
	o.HostIP = &v
}

// GetInitContainerStatuses returns the InitContainerStatuses field value if set, zero value otherwise.
func (o *V1PodStatus) GetInitContainerStatuses() []V1ContainerStatus {
	if o == nil || IsNil(o.InitContainerStatuses) {
		var ret []V1ContainerStatus
		return ret
	}
	return o.InitContainerStatuses
}

// GetInitContainerStatusesOk returns a tuple with the InitContainerStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetInitContainerStatusesOk() ([]V1ContainerStatus, bool) {
	if o == nil || IsNil(o.InitContainerStatuses) {
		return nil, false
	}
	return o.InitContainerStatuses, true
}

// HasInitContainerStatuses returns a boolean if a field has been set.
func (o *V1PodStatus) HasInitContainerStatuses() bool {
	if o != nil && !IsNil(o.InitContainerStatuses) {
		return true
	}

	return false
}

// SetInitContainerStatuses gets a reference to the given []V1ContainerStatus and assigns it to the InitContainerStatuses field.
func (o *V1PodStatus) SetInitContainerStatuses(v []V1ContainerStatus) {
	o.InitContainerStatuses = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1PodStatus) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1PodStatus) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1PodStatus) SetMessage(v string) {
	o.Message = &v
}

// GetNominatedNodeName returns the NominatedNodeName field value if set, zero value otherwise.
func (o *V1PodStatus) GetNominatedNodeName() string {
	if o == nil || IsNil(o.NominatedNodeName) {
		var ret string
		return ret
	}
	return *o.NominatedNodeName
}

// GetNominatedNodeNameOk returns a tuple with the NominatedNodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetNominatedNodeNameOk() (*string, bool) {
	if o == nil || IsNil(o.NominatedNodeName) {
		return nil, false
	}
	return o.NominatedNodeName, true
}

// HasNominatedNodeName returns a boolean if a field has been set.
func (o *V1PodStatus) HasNominatedNodeName() bool {
	if o != nil && !IsNil(o.NominatedNodeName) {
		return true
	}

	return false
}

// SetNominatedNodeName gets a reference to the given string and assigns it to the NominatedNodeName field.
func (o *V1PodStatus) SetNominatedNodeName(v string) {
	o.NominatedNodeName = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *V1PodStatus) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *V1PodStatus) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *V1PodStatus) SetPhase(v string) {
	o.Phase = &v
}

// GetPodIP returns the PodIP field value if set, zero value otherwise.
func (o *V1PodStatus) GetPodIP() string {
	if o == nil || IsNil(o.PodIP) {
		var ret string
		return ret
	}
	return *o.PodIP
}

// GetPodIPOk returns a tuple with the PodIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetPodIPOk() (*string, bool) {
	if o == nil || IsNil(o.PodIP) {
		return nil, false
	}
	return o.PodIP, true
}

// HasPodIP returns a boolean if a field has been set.
func (o *V1PodStatus) HasPodIP() bool {
	if o != nil && !IsNil(o.PodIP) {
		return true
	}

	return false
}

// SetPodIP gets a reference to the given string and assigns it to the PodIP field.
func (o *V1PodStatus) SetPodIP(v string) {
	o.PodIP = &v
}

// GetQosClass returns the QosClass field value if set, zero value otherwise.
func (o *V1PodStatus) GetQosClass() string {
	if o == nil || IsNil(o.QosClass) {
		var ret string
		return ret
	}
	return *o.QosClass
}

// GetQosClassOk returns a tuple with the QosClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetQosClassOk() (*string, bool) {
	if o == nil || IsNil(o.QosClass) {
		return nil, false
	}
	return o.QosClass, true
}

// HasQosClass returns a boolean if a field has been set.
func (o *V1PodStatus) HasQosClass() bool {
	if o != nil && !IsNil(o.QosClass) {
		return true
	}

	return false
}

// SetQosClass gets a reference to the given string and assigns it to the QosClass field.
func (o *V1PodStatus) SetQosClass(v string) {
	o.QosClass = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *V1PodStatus) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *V1PodStatus) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *V1PodStatus) SetReason(v string) {
	o.Reason = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *V1PodStatus) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodStatus) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *V1PodStatus) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *V1PodStatus) SetStartTime(v string) {
	o.StartTime = &v
}

func (o V1PodStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PodStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.ContainerStatuses) {
		toSerialize["containerStatuses"] = o.ContainerStatuses
	}
	if !IsNil(o.HostIP) {
		toSerialize["hostIP"] = o.HostIP
	}
	if !IsNil(o.InitContainerStatuses) {
		toSerialize["initContainerStatuses"] = o.InitContainerStatuses
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.NominatedNodeName) {
		toSerialize["nominatedNodeName"] = o.NominatedNodeName
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.PodIP) {
		toSerialize["podIP"] = o.PodIP
	}
	if !IsNil(o.QosClass) {
		toSerialize["qosClass"] = o.QosClass
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableV1PodStatus struct {
	value *V1PodStatus
	isSet bool
}

func (v NullableV1PodStatus) Get() *V1PodStatus {
	return v.value
}

func (v *NullableV1PodStatus) Set(val *V1PodStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PodStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PodStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PodStatus(val *V1PodStatus) *NullableV1PodStatus {
	return &NullableV1PodStatus{value: val, isSet: true}
}

func (v NullableV1PodStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PodStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


