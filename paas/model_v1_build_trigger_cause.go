/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1BuildTriggerCause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BuildTriggerCause{}

// V1BuildTriggerCause BuildTriggerCause holds information about a triggered build. It is used for displaying build trigger data for each build and build configuration in oc describe. It is also used to describe which triggers led to the most recent update in the build configuration.
type V1BuildTriggerCause struct {
	BitbucketWebHook *V1BitbucketWebHookCause `json:"bitbucketWebHook,omitempty"`
	GenericWebHook *V1GenericWebHookCause `json:"genericWebHook,omitempty"`
	GithubWebHook *V1GitHubWebHookCause `json:"githubWebHook,omitempty"`
	GitlabWebHook *V1GitLabWebHookCause `json:"gitlabWebHook,omitempty"`
	ImageChangeBuild *V1ImageChangeCause `json:"imageChangeBuild,omitempty"`
	// message is used to store a human readable message for why the build was triggered. E.g.: \"Manually triggered by user\", \"Configuration change\",etc.
	Message *string `json:"message,omitempty"`
}

// NewV1BuildTriggerCause instantiates a new V1BuildTriggerCause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BuildTriggerCause() *V1BuildTriggerCause {
	this := V1BuildTriggerCause{}
	return &this
}

// NewV1BuildTriggerCauseWithDefaults instantiates a new V1BuildTriggerCause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BuildTriggerCauseWithDefaults() *V1BuildTriggerCause {
	this := V1BuildTriggerCause{}
	return &this
}

// GetBitbucketWebHook returns the BitbucketWebHook field value if set, zero value otherwise.
func (o *V1BuildTriggerCause) GetBitbucketWebHook() V1BitbucketWebHookCause {
	if o == nil || IsNil(o.BitbucketWebHook) {
		var ret V1BitbucketWebHookCause
		return ret
	}
	return *o.BitbucketWebHook
}

// GetBitbucketWebHookOk returns a tuple with the BitbucketWebHook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerCause) GetBitbucketWebHookOk() (*V1BitbucketWebHookCause, bool) {
	if o == nil || IsNil(o.BitbucketWebHook) {
		return nil, false
	}
	return o.BitbucketWebHook, true
}

// HasBitbucketWebHook returns a boolean if a field has been set.
func (o *V1BuildTriggerCause) HasBitbucketWebHook() bool {
	if o != nil && !IsNil(o.BitbucketWebHook) {
		return true
	}

	return false
}

// SetBitbucketWebHook gets a reference to the given V1BitbucketWebHookCause and assigns it to the BitbucketWebHook field.
func (o *V1BuildTriggerCause) SetBitbucketWebHook(v V1BitbucketWebHookCause) {
	o.BitbucketWebHook = &v
}

// GetGenericWebHook returns the GenericWebHook field value if set, zero value otherwise.
func (o *V1BuildTriggerCause) GetGenericWebHook() V1GenericWebHookCause {
	if o == nil || IsNil(o.GenericWebHook) {
		var ret V1GenericWebHookCause
		return ret
	}
	return *o.GenericWebHook
}

// GetGenericWebHookOk returns a tuple with the GenericWebHook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerCause) GetGenericWebHookOk() (*V1GenericWebHookCause, bool) {
	if o == nil || IsNil(o.GenericWebHook) {
		return nil, false
	}
	return o.GenericWebHook, true
}

// HasGenericWebHook returns a boolean if a field has been set.
func (o *V1BuildTriggerCause) HasGenericWebHook() bool {
	if o != nil && !IsNil(o.GenericWebHook) {
		return true
	}

	return false
}

// SetGenericWebHook gets a reference to the given V1GenericWebHookCause and assigns it to the GenericWebHook field.
func (o *V1BuildTriggerCause) SetGenericWebHook(v V1GenericWebHookCause) {
	o.GenericWebHook = &v
}

// GetGithubWebHook returns the GithubWebHook field value if set, zero value otherwise.
func (o *V1BuildTriggerCause) GetGithubWebHook() V1GitHubWebHookCause {
	if o == nil || IsNil(o.GithubWebHook) {
		var ret V1GitHubWebHookCause
		return ret
	}
	return *o.GithubWebHook
}

// GetGithubWebHookOk returns a tuple with the GithubWebHook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerCause) GetGithubWebHookOk() (*V1GitHubWebHookCause, bool) {
	if o == nil || IsNil(o.GithubWebHook) {
		return nil, false
	}
	return o.GithubWebHook, true
}

// HasGithubWebHook returns a boolean if a field has been set.
func (o *V1BuildTriggerCause) HasGithubWebHook() bool {
	if o != nil && !IsNil(o.GithubWebHook) {
		return true
	}

	return false
}

// SetGithubWebHook gets a reference to the given V1GitHubWebHookCause and assigns it to the GithubWebHook field.
func (o *V1BuildTriggerCause) SetGithubWebHook(v V1GitHubWebHookCause) {
	o.GithubWebHook = &v
}

// GetGitlabWebHook returns the GitlabWebHook field value if set, zero value otherwise.
func (o *V1BuildTriggerCause) GetGitlabWebHook() V1GitLabWebHookCause {
	if o == nil || IsNil(o.GitlabWebHook) {
		var ret V1GitLabWebHookCause
		return ret
	}
	return *o.GitlabWebHook
}

// GetGitlabWebHookOk returns a tuple with the GitlabWebHook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerCause) GetGitlabWebHookOk() (*V1GitLabWebHookCause, bool) {
	if o == nil || IsNil(o.GitlabWebHook) {
		return nil, false
	}
	return o.GitlabWebHook, true
}

// HasGitlabWebHook returns a boolean if a field has been set.
func (o *V1BuildTriggerCause) HasGitlabWebHook() bool {
	if o != nil && !IsNil(o.GitlabWebHook) {
		return true
	}

	return false
}

// SetGitlabWebHook gets a reference to the given V1GitLabWebHookCause and assigns it to the GitlabWebHook field.
func (o *V1BuildTriggerCause) SetGitlabWebHook(v V1GitLabWebHookCause) {
	o.GitlabWebHook = &v
}

// GetImageChangeBuild returns the ImageChangeBuild field value if set, zero value otherwise.
func (o *V1BuildTriggerCause) GetImageChangeBuild() V1ImageChangeCause {
	if o == nil || IsNil(o.ImageChangeBuild) {
		var ret V1ImageChangeCause
		return ret
	}
	return *o.ImageChangeBuild
}

// GetImageChangeBuildOk returns a tuple with the ImageChangeBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerCause) GetImageChangeBuildOk() (*V1ImageChangeCause, bool) {
	if o == nil || IsNil(o.ImageChangeBuild) {
		return nil, false
	}
	return o.ImageChangeBuild, true
}

// HasImageChangeBuild returns a boolean if a field has been set.
func (o *V1BuildTriggerCause) HasImageChangeBuild() bool {
	if o != nil && !IsNil(o.ImageChangeBuild) {
		return true
	}

	return false
}

// SetImageChangeBuild gets a reference to the given V1ImageChangeCause and assigns it to the ImageChangeBuild field.
func (o *V1BuildTriggerCause) SetImageChangeBuild(v V1ImageChangeCause) {
	o.ImageChangeBuild = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1BuildTriggerCause) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerCause) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1BuildTriggerCause) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1BuildTriggerCause) SetMessage(v string) {
	o.Message = &v
}

func (o V1BuildTriggerCause) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BuildTriggerCause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BitbucketWebHook) {
		toSerialize["bitbucketWebHook"] = o.BitbucketWebHook
	}
	if !IsNil(o.GenericWebHook) {
		toSerialize["genericWebHook"] = o.GenericWebHook
	}
	if !IsNil(o.GithubWebHook) {
		toSerialize["githubWebHook"] = o.GithubWebHook
	}
	if !IsNil(o.GitlabWebHook) {
		toSerialize["gitlabWebHook"] = o.GitlabWebHook
	}
	if !IsNil(o.ImageChangeBuild) {
		toSerialize["imageChangeBuild"] = o.ImageChangeBuild
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableV1BuildTriggerCause struct {
	value *V1BuildTriggerCause
	isSet bool
}

func (v NullableV1BuildTriggerCause) Get() *V1BuildTriggerCause {
	return v.value
}

func (v *NullableV1BuildTriggerCause) Set(val *V1BuildTriggerCause) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BuildTriggerCause) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BuildTriggerCause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BuildTriggerCause(val *V1BuildTriggerCause) *NullableV1BuildTriggerCause {
	return &NullableV1BuildTriggerCause{value: val, isSet: true}
}

func (v NullableV1BuildTriggerCause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BuildTriggerCause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


