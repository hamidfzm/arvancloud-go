/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1CephFSPersistentVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CephFSPersistentVolumeSource{}

// V1CephFSPersistentVolumeSource Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type V1CephFSPersistentVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `json:"monitors"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `json:"path,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `json:"secretFile,omitempty"`
	SecretRef *V1SecretReference `json:"secretRef,omitempty"`
	// Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

// NewV1CephFSPersistentVolumeSource instantiates a new V1CephFSPersistentVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CephFSPersistentVolumeSource(monitors []string) *V1CephFSPersistentVolumeSource {
	this := V1CephFSPersistentVolumeSource{}
	this.Monitors = monitors
	return &this
}

// NewV1CephFSPersistentVolumeSourceWithDefaults instantiates a new V1CephFSPersistentVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CephFSPersistentVolumeSourceWithDefaults() *V1CephFSPersistentVolumeSource {
	this := V1CephFSPersistentVolumeSource{}
	return &this
}

// GetMonitors returns the Monitors field value
func (o *V1CephFSPersistentVolumeSource) GetMonitors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value
// and a boolean to check if the value has been set.
func (o *V1CephFSPersistentVolumeSource) GetMonitorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Monitors, true
}

// SetMonitors sets field value
func (o *V1CephFSPersistentVolumeSource) SetMonitors(v []string) {
	o.Monitors = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *V1CephFSPersistentVolumeSource) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSPersistentVolumeSource) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *V1CephFSPersistentVolumeSource) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *V1CephFSPersistentVolumeSource) SetPath(v string) {
	o.Path = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1CephFSPersistentVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSPersistentVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1CephFSPersistentVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1CephFSPersistentVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretFile returns the SecretFile field value if set, zero value otherwise.
func (o *V1CephFSPersistentVolumeSource) GetSecretFile() string {
	if o == nil || IsNil(o.SecretFile) {
		var ret string
		return ret
	}
	return *o.SecretFile
}

// GetSecretFileOk returns a tuple with the SecretFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSPersistentVolumeSource) GetSecretFileOk() (*string, bool) {
	if o == nil || IsNil(o.SecretFile) {
		return nil, false
	}
	return o.SecretFile, true
}

// HasSecretFile returns a boolean if a field has been set.
func (o *V1CephFSPersistentVolumeSource) HasSecretFile() bool {
	if o != nil && !IsNil(o.SecretFile) {
		return true
	}

	return false
}

// SetSecretFile gets a reference to the given string and assigns it to the SecretFile field.
func (o *V1CephFSPersistentVolumeSource) SetSecretFile(v string) {
	o.SecretFile = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *V1CephFSPersistentVolumeSource) GetSecretRef() V1SecretReference {
	if o == nil || IsNil(o.SecretRef) {
		var ret V1SecretReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSPersistentVolumeSource) GetSecretRefOk() (*V1SecretReference, bool) {
	if o == nil || IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *V1CephFSPersistentVolumeSource) HasSecretRef() bool {
	if o != nil && !IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1SecretReference and assigns it to the SecretRef field.
func (o *V1CephFSPersistentVolumeSource) SetSecretRef(v V1SecretReference) {
	o.SecretRef = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *V1CephFSPersistentVolumeSource) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSPersistentVolumeSource) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *V1CephFSPersistentVolumeSource) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *V1CephFSPersistentVolumeSource) SetUser(v string) {
	o.User = &v
}

func (o V1CephFSPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CephFSPersistentVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monitors"] = o.Monitors
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SecretFile) {
		toSerialize["secretFile"] = o.SecretFile
	}
	if !IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableV1CephFSPersistentVolumeSource struct {
	value *V1CephFSPersistentVolumeSource
	isSet bool
}

func (v NullableV1CephFSPersistentVolumeSource) Get() *V1CephFSPersistentVolumeSource {
	return v.value
}

func (v *NullableV1CephFSPersistentVolumeSource) Set(val *V1CephFSPersistentVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CephFSPersistentVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CephFSPersistentVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CephFSPersistentVolumeSource(val *V1CephFSPersistentVolumeSource) *NullableV1CephFSPersistentVolumeSource {
	return &NullableV1CephFSPersistentVolumeSource{value: val, isSet: true}
}

func (v NullableV1CephFSPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CephFSPersistentVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


