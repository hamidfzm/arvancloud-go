/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageStreamImport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageStreamImport{}

// V1ImageStreamImport The image stream import resource provides an easy way for a user to find and import Docker images from other Docker registries into the server. Individual images or an entire image repository may be imported, and users may choose to see the results of the import prior to tagging the resulting images into the specified image stream.  This API is intended for end-user tools that need to see the metadata of the image prior to import (for instance, to generate an application from it). Clients that know the desired image can continue to create spec.tags directly into their image streams.
type V1ImageStreamImport struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	Spec V1ImageStreamImportSpec `json:"spec"`
	Status V1ImageStreamImportStatus `json:"status"`
}

// NewV1ImageStreamImport instantiates a new V1ImageStreamImport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageStreamImport(spec V1ImageStreamImportSpec, status V1ImageStreamImportStatus) *V1ImageStreamImport {
	this := V1ImageStreamImport{}
	this.Spec = spec
	this.Status = status
	return &this
}

// NewV1ImageStreamImportWithDefaults instantiates a new V1ImageStreamImport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageStreamImportWithDefaults() *V1ImageStreamImport {
	this := V1ImageStreamImport{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1ImageStreamImport) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamImport) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1ImageStreamImport) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1ImageStreamImport) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1ImageStreamImport) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamImport) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1ImageStreamImport) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1ImageStreamImport) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1ImageStreamImport) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamImport) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1ImageStreamImport) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1ImageStreamImport) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value
func (o *V1ImageStreamImport) GetSpec() V1ImageStreamImportSpec {
	if o == nil {
		var ret V1ImageStreamImportSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *V1ImageStreamImport) GetSpecOk() (*V1ImageStreamImportSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *V1ImageStreamImport) SetSpec(v V1ImageStreamImportSpec) {
	o.Spec = v
}

// GetStatus returns the Status field value
func (o *V1ImageStreamImport) GetStatus() V1ImageStreamImportStatus {
	if o == nil {
		var ret V1ImageStreamImportStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *V1ImageStreamImport) GetStatusOk() (*V1ImageStreamImportStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *V1ImageStreamImport) SetStatus(v V1ImageStreamImportStatus) {
	o.Status = v
}

func (o V1ImageStreamImport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageStreamImport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["spec"] = o.Spec
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableV1ImageStreamImport struct {
	value *V1ImageStreamImport
	isSet bool
}

func (v NullableV1ImageStreamImport) Get() *V1ImageStreamImport {
	return v.value
}

func (v *NullableV1ImageStreamImport) Set(val *V1ImageStreamImport) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageStreamImport) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageStreamImport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageStreamImport(val *V1ImageStreamImport) *NullableV1ImageStreamImport {
	return &NullableV1ImageStreamImport{value: val, isSet: true}
}

func (v NullableV1ImageStreamImport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageStreamImport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


