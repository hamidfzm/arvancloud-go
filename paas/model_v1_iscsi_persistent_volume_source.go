/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ISCSIPersistentVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ISCSIPersistentVolumeSource{}

// V1ISCSIPersistentVolumeSource ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
type V1ISCSIPersistentVolumeSource struct {
	// whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `json:"chapAuthDiscovery,omitempty"`
	// whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `json:"chapAuthSession,omitempty"`
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `json:"fsType,omitempty"`
	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `json:"initiatorName,omitempty"`
	// Target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `json:"iscsiInterface,omitempty"`
	// iSCSI Target Lun number.
	Lun int32 `json:"lun"`
	// iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []string `json:"portals,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef *V1SecretReference `json:"secretRef,omitempty"`
	// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// NewV1ISCSIPersistentVolumeSource instantiates a new V1ISCSIPersistentVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ISCSIPersistentVolumeSource(iqn string, lun int32, targetPortal string) *V1ISCSIPersistentVolumeSource {
	this := V1ISCSIPersistentVolumeSource{}
	this.Iqn = iqn
	this.Lun = lun
	this.TargetPortal = targetPortal
	return &this
}

// NewV1ISCSIPersistentVolumeSourceWithDefaults instantiates a new V1ISCSIPersistentVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ISCSIPersistentVolumeSourceWithDefaults() *V1ISCSIPersistentVolumeSource {
	this := V1ISCSIPersistentVolumeSource{}
	return &this
}

// GetChapAuthDiscovery returns the ChapAuthDiscovery field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetChapAuthDiscovery() bool {
	if o == nil || IsNil(o.ChapAuthDiscovery) {
		var ret bool
		return ret
	}
	return *o.ChapAuthDiscovery
}

// GetChapAuthDiscoveryOk returns a tuple with the ChapAuthDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetChapAuthDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.ChapAuthDiscovery) {
		return nil, false
	}
	return o.ChapAuthDiscovery, true
}

// HasChapAuthDiscovery returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasChapAuthDiscovery() bool {
	if o != nil && !IsNil(o.ChapAuthDiscovery) {
		return true
	}

	return false
}

// SetChapAuthDiscovery gets a reference to the given bool and assigns it to the ChapAuthDiscovery field.
func (o *V1ISCSIPersistentVolumeSource) SetChapAuthDiscovery(v bool) {
	o.ChapAuthDiscovery = &v
}

// GetChapAuthSession returns the ChapAuthSession field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetChapAuthSession() bool {
	if o == nil || IsNil(o.ChapAuthSession) {
		var ret bool
		return ret
	}
	return *o.ChapAuthSession
}

// GetChapAuthSessionOk returns a tuple with the ChapAuthSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetChapAuthSessionOk() (*bool, bool) {
	if o == nil || IsNil(o.ChapAuthSession) {
		return nil, false
	}
	return o.ChapAuthSession, true
}

// HasChapAuthSession returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasChapAuthSession() bool {
	if o != nil && !IsNil(o.ChapAuthSession) {
		return true
	}

	return false
}

// SetChapAuthSession gets a reference to the given bool and assigns it to the ChapAuthSession field.
func (o *V1ISCSIPersistentVolumeSource) SetChapAuthSession(v bool) {
	o.ChapAuthSession = &v
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1ISCSIPersistentVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetInitiatorName returns the InitiatorName field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetInitiatorName() string {
	if o == nil || IsNil(o.InitiatorName) {
		var ret string
		return ret
	}
	return *o.InitiatorName
}

// GetInitiatorNameOk returns a tuple with the InitiatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetInitiatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorName) {
		return nil, false
	}
	return o.InitiatorName, true
}

// HasInitiatorName returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasInitiatorName() bool {
	if o != nil && !IsNil(o.InitiatorName) {
		return true
	}

	return false
}

// SetInitiatorName gets a reference to the given string and assigns it to the InitiatorName field.
func (o *V1ISCSIPersistentVolumeSource) SetInitiatorName(v string) {
	o.InitiatorName = &v
}

// GetIqn returns the Iqn field value
func (o *V1ISCSIPersistentVolumeSource) GetIqn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iqn
}

// GetIqnOk returns a tuple with the Iqn field value
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetIqnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iqn, true
}

// SetIqn sets field value
func (o *V1ISCSIPersistentVolumeSource) SetIqn(v string) {
	o.Iqn = v
}

// GetIscsiInterface returns the IscsiInterface field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetIscsiInterface() string {
	if o == nil || IsNil(o.IscsiInterface) {
		var ret string
		return ret
	}
	return *o.IscsiInterface
}

// GetIscsiInterfaceOk returns a tuple with the IscsiInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetIscsiInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiInterface) {
		return nil, false
	}
	return o.IscsiInterface, true
}

// HasIscsiInterface returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasIscsiInterface() bool {
	if o != nil && !IsNil(o.IscsiInterface) {
		return true
	}

	return false
}

// SetIscsiInterface gets a reference to the given string and assigns it to the IscsiInterface field.
func (o *V1ISCSIPersistentVolumeSource) SetIscsiInterface(v string) {
	o.IscsiInterface = &v
}

// GetLun returns the Lun field value
func (o *V1ISCSIPersistentVolumeSource) GetLun() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Lun
}

// GetLunOk returns a tuple with the Lun field value
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetLunOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lun, true
}

// SetLun sets field value
func (o *V1ISCSIPersistentVolumeSource) SetLun(v int32) {
	o.Lun = v
}

// GetPortals returns the Portals field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetPortals() []string {
	if o == nil || IsNil(o.Portals) {
		var ret []string
		return ret
	}
	return o.Portals
}

// GetPortalsOk returns a tuple with the Portals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetPortalsOk() ([]string, bool) {
	if o == nil || IsNil(o.Portals) {
		return nil, false
	}
	return o.Portals, true
}

// HasPortals returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasPortals() bool {
	if o != nil && !IsNil(o.Portals) {
		return true
	}

	return false
}

// SetPortals gets a reference to the given []string and assigns it to the Portals field.
func (o *V1ISCSIPersistentVolumeSource) SetPortals(v []string) {
	o.Portals = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1ISCSIPersistentVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *V1ISCSIPersistentVolumeSource) GetSecretRef() V1SecretReference {
	if o == nil || IsNil(o.SecretRef) {
		var ret V1SecretReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetSecretRefOk() (*V1SecretReference, bool) {
	if o == nil || IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *V1ISCSIPersistentVolumeSource) HasSecretRef() bool {
	if o != nil && !IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1SecretReference and assigns it to the SecretRef field.
func (o *V1ISCSIPersistentVolumeSource) SetSecretRef(v V1SecretReference) {
	o.SecretRef = &v
}

// GetTargetPortal returns the TargetPortal field value
func (o *V1ISCSIPersistentVolumeSource) GetTargetPortal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetPortal
}

// GetTargetPortalOk returns a tuple with the TargetPortal field value
// and a boolean to check if the value has been set.
func (o *V1ISCSIPersistentVolumeSource) GetTargetPortalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetPortal, true
}

// SetTargetPortal sets field value
func (o *V1ISCSIPersistentVolumeSource) SetTargetPortal(v string) {
	o.TargetPortal = v
}

func (o V1ISCSIPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ISCSIPersistentVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChapAuthDiscovery) {
		toSerialize["chapAuthDiscovery"] = o.ChapAuthDiscovery
	}
	if !IsNil(o.ChapAuthSession) {
		toSerialize["chapAuthSession"] = o.ChapAuthSession
	}
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	if !IsNil(o.InitiatorName) {
		toSerialize["initiatorName"] = o.InitiatorName
	}
	toSerialize["iqn"] = o.Iqn
	if !IsNil(o.IscsiInterface) {
		toSerialize["iscsiInterface"] = o.IscsiInterface
	}
	toSerialize["lun"] = o.Lun
	if !IsNil(o.Portals) {
		toSerialize["portals"] = o.Portals
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	toSerialize["targetPortal"] = o.TargetPortal
	return toSerialize, nil
}

type NullableV1ISCSIPersistentVolumeSource struct {
	value *V1ISCSIPersistentVolumeSource
	isSet bool
}

func (v NullableV1ISCSIPersistentVolumeSource) Get() *V1ISCSIPersistentVolumeSource {
	return v.value
}

func (v *NullableV1ISCSIPersistentVolumeSource) Set(val *V1ISCSIPersistentVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ISCSIPersistentVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ISCSIPersistentVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ISCSIPersistentVolumeSource(val *V1ISCSIPersistentVolumeSource) *NullableV1ISCSIPersistentVolumeSource {
	return &NullableV1ISCSIPersistentVolumeSource{value: val, isSet: true}
}

func (v NullableV1ISCSIPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ISCSIPersistentVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


