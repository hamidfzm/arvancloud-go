/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1NodeCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NodeCondition{}

// V1NodeCondition NodeCondition contains condition information for a node.
type V1NodeCondition struct {
	// Last time we got an update on a given condition.
	LastHeartbeatTime *string `json:"lastHeartbeatTime,omitempty"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of node condition.
	Type string `json:"type"`
}

// NewV1NodeCondition instantiates a new V1NodeCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NodeCondition(status string, type_ string) *V1NodeCondition {
	this := V1NodeCondition{}
	this.Status = status
	this.Type = type_
	return &this
}

// NewV1NodeConditionWithDefaults instantiates a new V1NodeCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NodeConditionWithDefaults() *V1NodeCondition {
	this := V1NodeCondition{}
	return &this
}

// GetLastHeartbeatTime returns the LastHeartbeatTime field value if set, zero value otherwise.
func (o *V1NodeCondition) GetLastHeartbeatTime() string {
	if o == nil || IsNil(o.LastHeartbeatTime) {
		var ret string
		return ret
	}
	return *o.LastHeartbeatTime
}

// GetLastHeartbeatTimeOk returns a tuple with the LastHeartbeatTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeCondition) GetLastHeartbeatTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastHeartbeatTime) {
		return nil, false
	}
	return o.LastHeartbeatTime, true
}

// HasLastHeartbeatTime returns a boolean if a field has been set.
func (o *V1NodeCondition) HasLastHeartbeatTime() bool {
	if o != nil && !IsNil(o.LastHeartbeatTime) {
		return true
	}

	return false
}

// SetLastHeartbeatTime gets a reference to the given string and assigns it to the LastHeartbeatTime field.
func (o *V1NodeCondition) SetLastHeartbeatTime(v string) {
	o.LastHeartbeatTime = &v
}

// GetLastTransitionTime returns the LastTransitionTime field value if set, zero value otherwise.
func (o *V1NodeCondition) GetLastTransitionTime() string {
	if o == nil || IsNil(o.LastTransitionTime) {
		var ret string
		return ret
	}
	return *o.LastTransitionTime
}

// GetLastTransitionTimeOk returns a tuple with the LastTransitionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeCondition) GetLastTransitionTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastTransitionTime) {
		return nil, false
	}
	return o.LastTransitionTime, true
}

// HasLastTransitionTime returns a boolean if a field has been set.
func (o *V1NodeCondition) HasLastTransitionTime() bool {
	if o != nil && !IsNil(o.LastTransitionTime) {
		return true
	}

	return false
}

// SetLastTransitionTime gets a reference to the given string and assigns it to the LastTransitionTime field.
func (o *V1NodeCondition) SetLastTransitionTime(v string) {
	o.LastTransitionTime = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1NodeCondition) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeCondition) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1NodeCondition) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1NodeCondition) SetMessage(v string) {
	o.Message = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *V1NodeCondition) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeCondition) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *V1NodeCondition) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *V1NodeCondition) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value
func (o *V1NodeCondition) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *V1NodeCondition) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *V1NodeCondition) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *V1NodeCondition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1NodeCondition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1NodeCondition) SetType(v string) {
	o.Type = v
}

func (o V1NodeCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NodeCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastHeartbeatTime) {
		toSerialize["lastHeartbeatTime"] = o.LastHeartbeatTime
	}
	if !IsNil(o.LastTransitionTime) {
		toSerialize["lastTransitionTime"] = o.LastTransitionTime
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableV1NodeCondition struct {
	value *V1NodeCondition
	isSet bool
}

func (v NullableV1NodeCondition) Get() *V1NodeCondition {
	return v.value
}

func (v *NullableV1NodeCondition) Set(val *V1NodeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NodeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NodeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NodeCondition(val *V1NodeCondition) *NullableV1NodeCondition {
	return &NullableV1NodeCondition{value: val, isSet: true}
}

func (v NullableV1NodeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NodeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


