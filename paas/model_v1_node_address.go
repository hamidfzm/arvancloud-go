/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1NodeAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NodeAddress{}

// V1NodeAddress NodeAddress contains information for the node's address.
type V1NodeAddress struct {
	// The node address.
	Address string `json:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type string `json:"type"`
}

// NewV1NodeAddress instantiates a new V1NodeAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NodeAddress(address string, type_ string) *V1NodeAddress {
	this := V1NodeAddress{}
	this.Address = address
	this.Type = type_
	return &this
}

// NewV1NodeAddressWithDefaults instantiates a new V1NodeAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NodeAddressWithDefaults() *V1NodeAddress {
	this := V1NodeAddress{}
	return &this
}

// GetAddress returns the Address field value
func (o *V1NodeAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *V1NodeAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *V1NodeAddress) SetAddress(v string) {
	o.Address = v
}

// GetType returns the Type field value
func (o *V1NodeAddress) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1NodeAddress) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1NodeAddress) SetType(v string) {
	o.Type = v
}

func (o V1NodeAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NodeAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableV1NodeAddress struct {
	value *V1NodeAddress
	isSet bool
}

func (v NullableV1NodeAddress) Get() *V1NodeAddress {
	return v.value
}

func (v *NullableV1NodeAddress) Set(val *V1NodeAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NodeAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NodeAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NodeAddress(val *V1NodeAddress) *NullableV1NodeAddress {
	return &NullableV1NodeAddress{value: val, isSet: true}
}

func (v NullableV1NodeAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NodeAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


