/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1Parameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Parameter{}

// V1Parameter Parameter defines a name/value variable that is to be processed during the Template to Config transformation.
type V1Parameter struct {
	// Description of a parameter. Optional.
	Description *string `json:"description,omitempty"`
	// Optional: The name that will show in UI instead of parameter 'Name'
	DisplayName *string `json:"displayName,omitempty"`
	// From is an input value for the generator. Optional.
	From *string `json:"from,omitempty"`
	// generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.  The only supported generator is \"expression\", which accepts a \"from\" value in the form of a simple regular expression containing the range expression \"[a-zA-Z0-9]\", and the length expression \"a{length}\".  Examples:  from             | value
	Generate *string `json:"generate,omitempty"`
	// Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.
	Name string `json:"name"`
	// Optional: Indicates the parameter must have a value.  Defaults to false.
	Required *bool `json:"required,omitempty"`
	// Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.
	Value *string `json:"value,omitempty"`
}

// NewV1Parameter instantiates a new V1Parameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Parameter(name string) *V1Parameter {
	this := V1Parameter{}
	this.Name = name
	return &this
}

// NewV1ParameterWithDefaults instantiates a new V1Parameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ParameterWithDefaults() *V1Parameter {
	this := V1Parameter{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1Parameter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Parameter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1Parameter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1Parameter) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *V1Parameter) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Parameter) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *V1Parameter) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *V1Parameter) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *V1Parameter) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Parameter) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *V1Parameter) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *V1Parameter) SetFrom(v string) {
	o.From = &v
}

// GetGenerate returns the Generate field value if set, zero value otherwise.
func (o *V1Parameter) GetGenerate() string {
	if o == nil || IsNil(o.Generate) {
		var ret string
		return ret
	}
	return *o.Generate
}

// GetGenerateOk returns a tuple with the Generate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Parameter) GetGenerateOk() (*string, bool) {
	if o == nil || IsNil(o.Generate) {
		return nil, false
	}
	return o.Generate, true
}

// HasGenerate returns a boolean if a field has been set.
func (o *V1Parameter) HasGenerate() bool {
	if o != nil && !IsNil(o.Generate) {
		return true
	}

	return false
}

// SetGenerate gets a reference to the given string and assigns it to the Generate field.
func (o *V1Parameter) SetGenerate(v string) {
	o.Generate = &v
}

// GetName returns the Name field value
func (o *V1Parameter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1Parameter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1Parameter) SetName(v string) {
	o.Name = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *V1Parameter) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Parameter) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *V1Parameter) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *V1Parameter) SetRequired(v bool) {
	o.Required = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1Parameter) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Parameter) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1Parameter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *V1Parameter) SetValue(v string) {
	o.Value = &v
}

func (o V1Parameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Parameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Generate) {
		toSerialize["generate"] = o.Generate
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableV1Parameter struct {
	value *V1Parameter
	isSet bool
}

func (v NullableV1Parameter) Get() *V1Parameter {
	return v.value
}

func (v *NullableV1Parameter) Set(val *V1Parameter) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Parameter) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Parameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Parameter(val *V1Parameter) *NullableV1Parameter {
	return &NullableV1Parameter{value: val, isSet: true}
}

func (v NullableV1Parameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Parameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


