/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageSource{}

// V1ImageSource ImageSource is used to describe build source that will be extracted from an image or used during a multi stage build. A reference of type ImageStreamTag, ImageStreamImage or DockerImage may be used. A pull secret can be specified to pull the image from an external registry or override the default service account secret if pulling from the internal registry. Image sources can either be used to extract content from an image and place it into the build context along with the repository source, or used directly during a multi-stage Docker build to allow content to be copied without overwriting the contents of the repository source (see the 'paths' and 'as' fields).
type V1ImageSource struct {
	// paths is a list of source and destination paths to copy from the image. This content will be copied into the build context prior to starting the build. If no paths are set, the build context will not be altered.
	Paths []V1ImageSourcePath `json:"paths"`
	// A list of image names that this source will be used in place of during a multi-stage Docker image build. For instance, a Dockerfile that uses \"COPY --from=nginx:latest\" will first check for an image source that has \"nginx:latest\" in this field before attempting to pull directly. If the Dockerfile does not reference an image source it is ignored. This field and paths may both be set, in which case the contents will be used twice.
	As []string `json:"as"`
	From V1ObjectReference `json:"from"`
	PullSecret *V1LocalObjectReference `json:"pullSecret,omitempty"`
}

// NewV1ImageSource instantiates a new V1ImageSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageSource(paths []V1ImageSourcePath, as []string, from V1ObjectReference) *V1ImageSource {
	this := V1ImageSource{}
	this.Paths = paths
	this.As = as
	this.From = from
	return &this
}

// NewV1ImageSourceWithDefaults instantiates a new V1ImageSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageSourceWithDefaults() *V1ImageSource {
	this := V1ImageSource{}
	return &this
}

// GetPaths returns the Paths field value
func (o *V1ImageSource) GetPaths() []V1ImageSourcePath {
	if o == nil {
		var ret []V1ImageSourcePath
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *V1ImageSource) GetPathsOk() ([]V1ImageSourcePath, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *V1ImageSource) SetPaths(v []V1ImageSourcePath) {
	o.Paths = v
}

// GetAs returns the As field value
func (o *V1ImageSource) GetAs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.As
}

// GetAsOk returns a tuple with the As field value
// and a boolean to check if the value has been set.
func (o *V1ImageSource) GetAsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.As, true
}

// SetAs sets field value
func (o *V1ImageSource) SetAs(v []string) {
	o.As = v
}

// GetFrom returns the From field value
func (o *V1ImageSource) GetFrom() V1ObjectReference {
	if o == nil {
		var ret V1ObjectReference
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *V1ImageSource) GetFromOk() (*V1ObjectReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *V1ImageSource) SetFrom(v V1ObjectReference) {
	o.From = v
}

// GetPullSecret returns the PullSecret field value if set, zero value otherwise.
func (o *V1ImageSource) GetPullSecret() V1LocalObjectReference {
	if o == nil || IsNil(o.PullSecret) {
		var ret V1LocalObjectReference
		return ret
	}
	return *o.PullSecret
}

// GetPullSecretOk returns a tuple with the PullSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSource) GetPullSecretOk() (*V1LocalObjectReference, bool) {
	if o == nil || IsNil(o.PullSecret) {
		return nil, false
	}
	return o.PullSecret, true
}

// HasPullSecret returns a boolean if a field has been set.
func (o *V1ImageSource) HasPullSecret() bool {
	if o != nil && !IsNil(o.PullSecret) {
		return true
	}

	return false
}

// SetPullSecret gets a reference to the given V1LocalObjectReference and assigns it to the PullSecret field.
func (o *V1ImageSource) SetPullSecret(v V1LocalObjectReference) {
	o.PullSecret = &v
}

func (o V1ImageSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["paths"] = o.Paths
	toSerialize["as"] = o.As
	toSerialize["from"] = o.From
	if !IsNil(o.PullSecret) {
		toSerialize["pullSecret"] = o.PullSecret
	}
	return toSerialize, nil
}

type NullableV1ImageSource struct {
	value *V1ImageSource
	isSet bool
}

func (v NullableV1ImageSource) Get() *V1ImageSource {
	return v.value
}

func (v *NullableV1ImageSource) Set(val *V1ImageSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageSource(val *V1ImageSource) *NullableV1ImageSource {
	return &NullableV1ImageSource{value: val, isSet: true}
}

func (v NullableV1ImageSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


