/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1Image type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Image{}

// V1Image Image is an immutable representation of a Docker image and metadata at a point in time.
type V1Image struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.
	DockerImageConfig *string `json:"dockerImageConfig,omitempty"`
	// DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
	DockerImageLayers []V1ImageLayer `json:"dockerImageLayers"`
	// DockerImageManifest is the raw JSON of the manifest
	DockerImageManifest *string `json:"dockerImageManifest,omitempty"`
	// DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
	DockerImageManifestMediaType *string `json:"dockerImageManifestMediaType,omitempty"`
	// DockerImageMetadata contains metadata about this image
	DockerImageMetadata *string `json:"dockerImageMetadata,omitempty"`
	// DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"
	DockerImageMetadataVersion *string `json:"dockerImageMetadataVersion,omitempty"`
	// DockerImageReference is the string that can be used to pull this image.
	DockerImageReference *string `json:"dockerImageReference,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	// Signatures holds all signatures of the image.
	Signatures []V1ImageSignature `json:"signatures,omitempty"`
}

// NewV1Image instantiates a new V1Image object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Image(dockerImageLayers []V1ImageLayer) *V1Image {
	this := V1Image{}
	this.DockerImageLayers = dockerImageLayers
	return &this
}

// NewV1ImageWithDefaults instantiates a new V1Image object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageWithDefaults() *V1Image {
	this := V1Image{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1Image) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1Image) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1Image) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetDockerImageConfig returns the DockerImageConfig field value if set, zero value otherwise.
func (o *V1Image) GetDockerImageConfig() string {
	if o == nil || IsNil(o.DockerImageConfig) {
		var ret string
		return ret
	}
	return *o.DockerImageConfig
}

// GetDockerImageConfigOk returns a tuple with the DockerImageConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetDockerImageConfigOk() (*string, bool) {
	if o == nil || IsNil(o.DockerImageConfig) {
		return nil, false
	}
	return o.DockerImageConfig, true
}

// HasDockerImageConfig returns a boolean if a field has been set.
func (o *V1Image) HasDockerImageConfig() bool {
	if o != nil && !IsNil(o.DockerImageConfig) {
		return true
	}

	return false
}

// SetDockerImageConfig gets a reference to the given string and assigns it to the DockerImageConfig field.
func (o *V1Image) SetDockerImageConfig(v string) {
	o.DockerImageConfig = &v
}

// GetDockerImageLayers returns the DockerImageLayers field value
func (o *V1Image) GetDockerImageLayers() []V1ImageLayer {
	if o == nil {
		var ret []V1ImageLayer
		return ret
	}

	return o.DockerImageLayers
}

// GetDockerImageLayersOk returns a tuple with the DockerImageLayers field value
// and a boolean to check if the value has been set.
func (o *V1Image) GetDockerImageLayersOk() ([]V1ImageLayer, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerImageLayers, true
}

// SetDockerImageLayers sets field value
func (o *V1Image) SetDockerImageLayers(v []V1ImageLayer) {
	o.DockerImageLayers = v
}

// GetDockerImageManifest returns the DockerImageManifest field value if set, zero value otherwise.
func (o *V1Image) GetDockerImageManifest() string {
	if o == nil || IsNil(o.DockerImageManifest) {
		var ret string
		return ret
	}
	return *o.DockerImageManifest
}

// GetDockerImageManifestOk returns a tuple with the DockerImageManifest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetDockerImageManifestOk() (*string, bool) {
	if o == nil || IsNil(o.DockerImageManifest) {
		return nil, false
	}
	return o.DockerImageManifest, true
}

// HasDockerImageManifest returns a boolean if a field has been set.
func (o *V1Image) HasDockerImageManifest() bool {
	if o != nil && !IsNil(o.DockerImageManifest) {
		return true
	}

	return false
}

// SetDockerImageManifest gets a reference to the given string and assigns it to the DockerImageManifest field.
func (o *V1Image) SetDockerImageManifest(v string) {
	o.DockerImageManifest = &v
}

// GetDockerImageManifestMediaType returns the DockerImageManifestMediaType field value if set, zero value otherwise.
func (o *V1Image) GetDockerImageManifestMediaType() string {
	if o == nil || IsNil(o.DockerImageManifestMediaType) {
		var ret string
		return ret
	}
	return *o.DockerImageManifestMediaType
}

// GetDockerImageManifestMediaTypeOk returns a tuple with the DockerImageManifestMediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetDockerImageManifestMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DockerImageManifestMediaType) {
		return nil, false
	}
	return o.DockerImageManifestMediaType, true
}

// HasDockerImageManifestMediaType returns a boolean if a field has been set.
func (o *V1Image) HasDockerImageManifestMediaType() bool {
	if o != nil && !IsNil(o.DockerImageManifestMediaType) {
		return true
	}

	return false
}

// SetDockerImageManifestMediaType gets a reference to the given string and assigns it to the DockerImageManifestMediaType field.
func (o *V1Image) SetDockerImageManifestMediaType(v string) {
	o.DockerImageManifestMediaType = &v
}

// GetDockerImageMetadata returns the DockerImageMetadata field value if set, zero value otherwise.
func (o *V1Image) GetDockerImageMetadata() string {
	if o == nil || IsNil(o.DockerImageMetadata) {
		var ret string
		return ret
	}
	return *o.DockerImageMetadata
}

// GetDockerImageMetadataOk returns a tuple with the DockerImageMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetDockerImageMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.DockerImageMetadata) {
		return nil, false
	}
	return o.DockerImageMetadata, true
}

// HasDockerImageMetadata returns a boolean if a field has been set.
func (o *V1Image) HasDockerImageMetadata() bool {
	if o != nil && !IsNil(o.DockerImageMetadata) {
		return true
	}

	return false
}

// SetDockerImageMetadata gets a reference to the given string and assigns it to the DockerImageMetadata field.
func (o *V1Image) SetDockerImageMetadata(v string) {
	o.DockerImageMetadata = &v
}

// GetDockerImageMetadataVersion returns the DockerImageMetadataVersion field value if set, zero value otherwise.
func (o *V1Image) GetDockerImageMetadataVersion() string {
	if o == nil || IsNil(o.DockerImageMetadataVersion) {
		var ret string
		return ret
	}
	return *o.DockerImageMetadataVersion
}

// GetDockerImageMetadataVersionOk returns a tuple with the DockerImageMetadataVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetDockerImageMetadataVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DockerImageMetadataVersion) {
		return nil, false
	}
	return o.DockerImageMetadataVersion, true
}

// HasDockerImageMetadataVersion returns a boolean if a field has been set.
func (o *V1Image) HasDockerImageMetadataVersion() bool {
	if o != nil && !IsNil(o.DockerImageMetadataVersion) {
		return true
	}

	return false
}

// SetDockerImageMetadataVersion gets a reference to the given string and assigns it to the DockerImageMetadataVersion field.
func (o *V1Image) SetDockerImageMetadataVersion(v string) {
	o.DockerImageMetadataVersion = &v
}

// GetDockerImageReference returns the DockerImageReference field value if set, zero value otherwise.
func (o *V1Image) GetDockerImageReference() string {
	if o == nil || IsNil(o.DockerImageReference) {
		var ret string
		return ret
	}
	return *o.DockerImageReference
}

// GetDockerImageReferenceOk returns a tuple with the DockerImageReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetDockerImageReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.DockerImageReference) {
		return nil, false
	}
	return o.DockerImageReference, true
}

// HasDockerImageReference returns a boolean if a field has been set.
func (o *V1Image) HasDockerImageReference() bool {
	if o != nil && !IsNil(o.DockerImageReference) {
		return true
	}

	return false
}

// SetDockerImageReference gets a reference to the given string and assigns it to the DockerImageReference field.
func (o *V1Image) SetDockerImageReference(v string) {
	o.DockerImageReference = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1Image) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1Image) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1Image) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1Image) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1Image) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1Image) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetSignatures returns the Signatures field value if set, zero value otherwise.
func (o *V1Image) GetSignatures() []V1ImageSignature {
	if o == nil || IsNil(o.Signatures) {
		var ret []V1ImageSignature
		return ret
	}
	return o.Signatures
}

// GetSignaturesOk returns a tuple with the Signatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Image) GetSignaturesOk() ([]V1ImageSignature, bool) {
	if o == nil || IsNil(o.Signatures) {
		return nil, false
	}
	return o.Signatures, true
}

// HasSignatures returns a boolean if a field has been set.
func (o *V1Image) HasSignatures() bool {
	if o != nil && !IsNil(o.Signatures) {
		return true
	}

	return false
}

// SetSignatures gets a reference to the given []V1ImageSignature and assigns it to the Signatures field.
func (o *V1Image) SetSignatures(v []V1ImageSignature) {
	o.Signatures = v
}

func (o V1Image) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Image) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.DockerImageConfig) {
		toSerialize["dockerImageConfig"] = o.DockerImageConfig
	}
	toSerialize["dockerImageLayers"] = o.DockerImageLayers
	if !IsNil(o.DockerImageManifest) {
		toSerialize["dockerImageManifest"] = o.DockerImageManifest
	}
	if !IsNil(o.DockerImageManifestMediaType) {
		toSerialize["dockerImageManifestMediaType"] = o.DockerImageManifestMediaType
	}
	if !IsNil(o.DockerImageMetadata) {
		toSerialize["dockerImageMetadata"] = o.DockerImageMetadata
	}
	if !IsNil(o.DockerImageMetadataVersion) {
		toSerialize["dockerImageMetadataVersion"] = o.DockerImageMetadataVersion
	}
	if !IsNil(o.DockerImageReference) {
		toSerialize["dockerImageReference"] = o.DockerImageReference
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Signatures) {
		toSerialize["signatures"] = o.Signatures
	}
	return toSerialize, nil
}

type NullableV1Image struct {
	value *V1Image
	isSet bool
}

func (v NullableV1Image) Get() *V1Image {
	return v.value
}

func (v *NullableV1Image) Set(val *V1Image) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Image) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Image) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Image(val *V1Image) *NullableV1Image {
	return &NullableV1Image{value: val, isSet: true}
}

func (v NullableV1Image) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Image) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


