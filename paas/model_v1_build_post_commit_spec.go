/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1BuildPostCommitSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BuildPostCommitSpec{}

// V1BuildPostCommitSpec A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image's WORKDIR.  The build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.  There are five different ways to configure the hook. As an example, all forms below are equivalent and will execute `rake test --verbose`.  1. Shell script:         \"postCommit\": {          \"script\": \"rake test --verbose\",        }      The above is a convenient form which is equivalent to:         \"postCommit\": {          \"command\": [\"/bin/sh\", \"-ic\"],          \"args\":    [\"rake test --verbose\"]        }  2. A command as the image entrypoint:         \"postCommit\": {          \"commit\": [\"rake\", \"test\", \"--verbose\"]        }      Command overrides the image entrypoint in the exec form, as documented in     Docker: https://docs.docker.com/engine/reference/builder/#entrypoint.  3. Pass arguments to the default entrypoint:         \"postCommit\": {         \"args\": [\"rake\", \"test\", \"--verbose\"]        }      This form is only useful if the image entrypoint can handle arguments.  4. Shell script with arguments:         \"postCommit\": {          \"script\": \"rake test $1\",          \"args\":   [\"--verbose\"]        }      This form is useful if you need to pass arguments that would otherwise be     hard to quote properly in the shell script. In the script, $0 will be     \"/bin/sh\" and $1, $2, etc, are the positional arguments from Args.  5. Command with arguments:         \"postCommit\": {          \"command\": [\"rake\", \"test\"],          \"args\":    [\"--verbose\"]        }      This form is equivalent to appending the arguments to the Command slice.  It is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.
type V1BuildPostCommitSpec struct {
	// args is a list of arguments that are provided to either Command, Script or the Docker image's default entrypoint. The arguments are placed immediately after the command to be run.
	Args []string `json:"args,omitempty"`
	// command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.
	Command []string `json:"command,omitempty"`
	// script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.
	Script *string `json:"script,omitempty"`
}

// NewV1BuildPostCommitSpec instantiates a new V1BuildPostCommitSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BuildPostCommitSpec() *V1BuildPostCommitSpec {
	this := V1BuildPostCommitSpec{}
	return &this
}

// NewV1BuildPostCommitSpecWithDefaults instantiates a new V1BuildPostCommitSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BuildPostCommitSpecWithDefaults() *V1BuildPostCommitSpec {
	this := V1BuildPostCommitSpec{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *V1BuildPostCommitSpec) GetArgs() []string {
	if o == nil || IsNil(o.Args) {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildPostCommitSpec) GetArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *V1BuildPostCommitSpec) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *V1BuildPostCommitSpec) SetArgs(v []string) {
	o.Args = v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *V1BuildPostCommitSpec) GetCommand() []string {
	if o == nil || IsNil(o.Command) {
		var ret []string
		return ret
	}
	return o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildPostCommitSpec) GetCommandOk() ([]string, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *V1BuildPostCommitSpec) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given []string and assigns it to the Command field.
func (o *V1BuildPostCommitSpec) SetCommand(v []string) {
	o.Command = v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *V1BuildPostCommitSpec) GetScript() string {
	if o == nil || IsNil(o.Script) {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildPostCommitSpec) GetScriptOk() (*string, bool) {
	if o == nil || IsNil(o.Script) {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *V1BuildPostCommitSpec) HasScript() bool {
	if o != nil && !IsNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *V1BuildPostCommitSpec) SetScript(v string) {
	o.Script = &v
}

func (o V1BuildPostCommitSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BuildPostCommitSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.Script) {
		toSerialize["script"] = o.Script
	}
	return toSerialize, nil
}

type NullableV1BuildPostCommitSpec struct {
	value *V1BuildPostCommitSpec
	isSet bool
}

func (v NullableV1BuildPostCommitSpec) Get() *V1BuildPostCommitSpec {
	return v.value
}

func (v *NullableV1BuildPostCommitSpec) Set(val *V1BuildPostCommitSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BuildPostCommitSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BuildPostCommitSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BuildPostCommitSpec(val *V1BuildPostCommitSpec) *NullableV1BuildPostCommitSpec {
	return &NullableV1BuildPostCommitSpec{value: val, isSet: true}
}

func (v NullableV1BuildPostCommitSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BuildPostCommitSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


