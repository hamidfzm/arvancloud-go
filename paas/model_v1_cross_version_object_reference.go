/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1CrossVersionObjectReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CrossVersionObjectReference{}

// V1CrossVersionObjectReference CrossVersionObjectReference contains enough information to let you identify the referred resource.
type V1CrossVersionObjectReference struct {
	// API version of the referent
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\"
	Kind string `json:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `json:"name"`
}

// NewV1CrossVersionObjectReference instantiates a new V1CrossVersionObjectReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CrossVersionObjectReference(kind string, name string) *V1CrossVersionObjectReference {
	this := V1CrossVersionObjectReference{}
	this.Kind = kind
	this.Name = name
	return &this
}

// NewV1CrossVersionObjectReferenceWithDefaults instantiates a new V1CrossVersionObjectReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CrossVersionObjectReferenceWithDefaults() *V1CrossVersionObjectReference {
	this := V1CrossVersionObjectReference{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1CrossVersionObjectReference) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CrossVersionObjectReference) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1CrossVersionObjectReference) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1CrossVersionObjectReference) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value
func (o *V1CrossVersionObjectReference) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *V1CrossVersionObjectReference) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *V1CrossVersionObjectReference) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *V1CrossVersionObjectReference) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1CrossVersionObjectReference) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1CrossVersionObjectReference) SetName(v string) {
	o.Name = v
}

func (o V1CrossVersionObjectReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CrossVersionObjectReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableV1CrossVersionObjectReference struct {
	value *V1CrossVersionObjectReference
	isSet bool
}

func (v NullableV1CrossVersionObjectReference) Get() *V1CrossVersionObjectReference {
	return v.value
}

func (v *NullableV1CrossVersionObjectReference) Set(val *V1CrossVersionObjectReference) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CrossVersionObjectReference) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CrossVersionObjectReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CrossVersionObjectReference(val *V1CrossVersionObjectReference) *NullableV1CrossVersionObjectReference {
	return &NullableV1CrossVersionObjectReference{value: val, isSet: true}
}

func (v NullableV1CrossVersionObjectReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CrossVersionObjectReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


