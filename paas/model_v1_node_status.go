/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1NodeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NodeStatus{}

// V1NodeStatus NodeStatus is information about the current status of a node.
type V1NodeStatus struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
	Addresses []V1NodeAddress `json:"addresses,omitempty"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
	Allocatable map[string]interface{} `json:"allocatable,omitempty"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity map[string]interface{} `json:"capacity,omitempty"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions []V1NodeCondition `json:"conditions,omitempty"`
	Config *V1NodeConfigStatus `json:"config,omitempty"`
	DaemonEndpoints *V1NodeDaemonEndpoints `json:"daemonEndpoints,omitempty"`
	// List of container images on this node
	Images []V1ContainerImage `json:"images,omitempty"`
	NodeInfo *V1NodeSystemInfo `json:"nodeInfo,omitempty"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase *string `json:"phase,omitempty"`
	// List of volumes that are attached to the node.
	VolumesAttached []V1AttachedVolume `json:"volumesAttached,omitempty"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse []V1UniqueVolumeName `json:"volumesInUse,omitempty"`
}

// NewV1NodeStatus instantiates a new V1NodeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NodeStatus() *V1NodeStatus {
	this := V1NodeStatus{}
	return &this
}

// NewV1NodeStatusWithDefaults instantiates a new V1NodeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NodeStatusWithDefaults() *V1NodeStatus {
	this := V1NodeStatus{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *V1NodeStatus) GetAddresses() []V1NodeAddress {
	if o == nil || IsNil(o.Addresses) {
		var ret []V1NodeAddress
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetAddressesOk() ([]V1NodeAddress, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *V1NodeStatus) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []V1NodeAddress and assigns it to the Addresses field.
func (o *V1NodeStatus) SetAddresses(v []V1NodeAddress) {
	o.Addresses = v
}

// GetAllocatable returns the Allocatable field value if set, zero value otherwise.
func (o *V1NodeStatus) GetAllocatable() map[string]interface{} {
	if o == nil || IsNil(o.Allocatable) {
		var ret map[string]interface{}
		return ret
	}
	return o.Allocatable
}

// GetAllocatableOk returns a tuple with the Allocatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetAllocatableOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Allocatable) {
		return map[string]interface{}{}, false
	}
	return o.Allocatable, true
}

// HasAllocatable returns a boolean if a field has been set.
func (o *V1NodeStatus) HasAllocatable() bool {
	if o != nil && !IsNil(o.Allocatable) {
		return true
	}

	return false
}

// SetAllocatable gets a reference to the given map[string]interface{} and assigns it to the Allocatable field.
func (o *V1NodeStatus) SetAllocatable(v map[string]interface{}) {
	o.Allocatable = v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *V1NodeStatus) GetCapacity() map[string]interface{} {
	if o == nil || IsNil(o.Capacity) {
		var ret map[string]interface{}
		return ret
	}
	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetCapacityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Capacity) {
		return map[string]interface{}{}, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *V1NodeStatus) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given map[string]interface{} and assigns it to the Capacity field.
func (o *V1NodeStatus) SetCapacity(v map[string]interface{}) {
	o.Capacity = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1NodeStatus) GetConditions() []V1NodeCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1NodeCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetConditionsOk() ([]V1NodeCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1NodeStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1NodeCondition and assigns it to the Conditions field.
func (o *V1NodeStatus) SetConditions(v []V1NodeCondition) {
	o.Conditions = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *V1NodeStatus) GetConfig() V1NodeConfigStatus {
	if o == nil || IsNil(o.Config) {
		var ret V1NodeConfigStatus
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetConfigOk() (*V1NodeConfigStatus, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *V1NodeStatus) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given V1NodeConfigStatus and assigns it to the Config field.
func (o *V1NodeStatus) SetConfig(v V1NodeConfigStatus) {
	o.Config = &v
}

// GetDaemonEndpoints returns the DaemonEndpoints field value if set, zero value otherwise.
func (o *V1NodeStatus) GetDaemonEndpoints() V1NodeDaemonEndpoints {
	if o == nil || IsNil(o.DaemonEndpoints) {
		var ret V1NodeDaemonEndpoints
		return ret
	}
	return *o.DaemonEndpoints
}

// GetDaemonEndpointsOk returns a tuple with the DaemonEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetDaemonEndpointsOk() (*V1NodeDaemonEndpoints, bool) {
	if o == nil || IsNil(o.DaemonEndpoints) {
		return nil, false
	}
	return o.DaemonEndpoints, true
}

// HasDaemonEndpoints returns a boolean if a field has been set.
func (o *V1NodeStatus) HasDaemonEndpoints() bool {
	if o != nil && !IsNil(o.DaemonEndpoints) {
		return true
	}

	return false
}

// SetDaemonEndpoints gets a reference to the given V1NodeDaemonEndpoints and assigns it to the DaemonEndpoints field.
func (o *V1NodeStatus) SetDaemonEndpoints(v V1NodeDaemonEndpoints) {
	o.DaemonEndpoints = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *V1NodeStatus) GetImages() []V1ContainerImage {
	if o == nil || IsNil(o.Images) {
		var ret []V1ContainerImage
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetImagesOk() ([]V1ContainerImage, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *V1NodeStatus) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []V1ContainerImage and assigns it to the Images field.
func (o *V1NodeStatus) SetImages(v []V1ContainerImage) {
	o.Images = v
}

// GetNodeInfo returns the NodeInfo field value if set, zero value otherwise.
func (o *V1NodeStatus) GetNodeInfo() V1NodeSystemInfo {
	if o == nil || IsNil(o.NodeInfo) {
		var ret V1NodeSystemInfo
		return ret
	}
	return *o.NodeInfo
}

// GetNodeInfoOk returns a tuple with the NodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetNodeInfoOk() (*V1NodeSystemInfo, bool) {
	if o == nil || IsNil(o.NodeInfo) {
		return nil, false
	}
	return o.NodeInfo, true
}

// HasNodeInfo returns a boolean if a field has been set.
func (o *V1NodeStatus) HasNodeInfo() bool {
	if o != nil && !IsNil(o.NodeInfo) {
		return true
	}

	return false
}

// SetNodeInfo gets a reference to the given V1NodeSystemInfo and assigns it to the NodeInfo field.
func (o *V1NodeStatus) SetNodeInfo(v V1NodeSystemInfo) {
	o.NodeInfo = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *V1NodeStatus) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *V1NodeStatus) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *V1NodeStatus) SetPhase(v string) {
	o.Phase = &v
}

// GetVolumesAttached returns the VolumesAttached field value if set, zero value otherwise.
func (o *V1NodeStatus) GetVolumesAttached() []V1AttachedVolume {
	if o == nil || IsNil(o.VolumesAttached) {
		var ret []V1AttachedVolume
		return ret
	}
	return o.VolumesAttached
}

// GetVolumesAttachedOk returns a tuple with the VolumesAttached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetVolumesAttachedOk() ([]V1AttachedVolume, bool) {
	if o == nil || IsNil(o.VolumesAttached) {
		return nil, false
	}
	return o.VolumesAttached, true
}

// HasVolumesAttached returns a boolean if a field has been set.
func (o *V1NodeStatus) HasVolumesAttached() bool {
	if o != nil && !IsNil(o.VolumesAttached) {
		return true
	}

	return false
}

// SetVolumesAttached gets a reference to the given []V1AttachedVolume and assigns it to the VolumesAttached field.
func (o *V1NodeStatus) SetVolumesAttached(v []V1AttachedVolume) {
	o.VolumesAttached = v
}

// GetVolumesInUse returns the VolumesInUse field value if set, zero value otherwise.
func (o *V1NodeStatus) GetVolumesInUse() []V1UniqueVolumeName {
	if o == nil || IsNil(o.VolumesInUse) {
		var ret []V1UniqueVolumeName
		return ret
	}
	return o.VolumesInUse
}

// GetVolumesInUseOk returns a tuple with the VolumesInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeStatus) GetVolumesInUseOk() ([]V1UniqueVolumeName, bool) {
	if o == nil || IsNil(o.VolumesInUse) {
		return nil, false
	}
	return o.VolumesInUse, true
}

// HasVolumesInUse returns a boolean if a field has been set.
func (o *V1NodeStatus) HasVolumesInUse() bool {
	if o != nil && !IsNil(o.VolumesInUse) {
		return true
	}

	return false
}

// SetVolumesInUse gets a reference to the given []V1UniqueVolumeName and assigns it to the VolumesInUse field.
func (o *V1NodeStatus) SetVolumesInUse(v []V1UniqueVolumeName) {
	o.VolumesInUse = v
}

func (o V1NodeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NodeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.Allocatable) {
		toSerialize["allocatable"] = o.Allocatable
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.DaemonEndpoints) {
		toSerialize["daemonEndpoints"] = o.DaemonEndpoints
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.NodeInfo) {
		toSerialize["nodeInfo"] = o.NodeInfo
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.VolumesAttached) {
		toSerialize["volumesAttached"] = o.VolumesAttached
	}
	if !IsNil(o.VolumesInUse) {
		toSerialize["volumesInUse"] = o.VolumesInUse
	}
	return toSerialize, nil
}

type NullableV1NodeStatus struct {
	value *V1NodeStatus
	isSet bool
}

func (v NullableV1NodeStatus) Get() *V1NodeStatus {
	return v.value
}

func (v *NullableV1NodeStatus) Set(val *V1NodeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NodeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NodeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NodeStatus(val *V1NodeStatus) *NullableV1NodeStatus {
	return &NullableV1NodeStatus{value: val, isSet: true}
}

func (v NullableV1NodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NodeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


