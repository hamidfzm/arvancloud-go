/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1SecurityContextConstraints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SecurityContextConstraints{}

// V1SecurityContextConstraints SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container. For historical reasons SCC was exposed under the core Kubernetes API group. That exposure is deprecated and will be removed in a future release - users should instead use the security.openshift.io group to manage SecurityContextConstraints.
type V1SecurityContextConstraints struct {
	// AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin
	AllowHostDirVolumePlugin bool `json:"allowHostDirVolumePlugin"`
	// AllowHostIPC determines if the policy allows host ipc in the containers.
	AllowHostIPC bool `json:"allowHostIPC"`
	// AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	AllowHostNetwork bool `json:"allowHostNetwork"`
	// AllowHostPID determines if the policy allows host pid in the containers.
	AllowHostPID bool `json:"allowHostPID"`
	// AllowHostPorts determines if the policy allows host ports in the containers.
	AllowHostPorts bool `json:"allowHostPorts"`
	// AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`
	// AllowPrivilegedContainer determines if a container can request to be run as privileged.
	AllowPrivilegedContainer bool `json:"allowPrivilegedContainer"`
	// AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities. To allow all capabilities you may use '*'.
	AllowedCapabilities []V1Capability `json:"allowedCapabilities"`
	// AllowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"Volumes\" field.
	AllowedFlexVolumes []V1AllowedFlexVolume `json:"allowedFlexVolumes,omitempty"`
	// AllowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.  Examples: e.g. \"foo/_*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
	DefaultAddCapabilities []V1Capability `json:"defaultAddCapabilities"`
	// DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
	DefaultAllowPrivilegeEscalation *bool `json:"defaultAllowPrivilegeEscalation,omitempty"`
	// ForbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.  Examples: e.g. \"foo/_*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.
	ForbiddenSysctls []string `json:"forbiddenSysctls,omitempty"`
	FsGroup *V1FSGroupStrategyOptions `json:"fsGroup,omitempty"`
	// The groups that have permission to use this security context constraints
	Groups []string `json:"groups"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	// Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority. An unset value is considered a 0 priority. If scores for multiple SCCs are equal they will be sorted from most restrictive to least restrictive. If both priorities and restrictions are equal the SCCs will be sorted by name.
	Priority int32 `json:"priority"`
	// ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem"`
	// RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
	RequiredDropCapabilities []V1Capability `json:"requiredDropCapabilities"`
	RunAsUser *V1RunAsUserStrategyOptions `json:"runAsUser,omitempty"`
	SeLinuxContext *V1SELinuxContextStrategyOptions `json:"seLinuxContext,omitempty"`
	// SeccompProfiles lists the allowed profiles that may be set for the pod or container's seccomp annotations.  An unset (nil) or empty value means that no profiles may be specifid by the pod or container. The wildcard '*' may be used to allow all profiles.  When used to generate a value for a pod the first non-wildcard profile will be used as the default.
	SeccompProfiles []string `json:"seccompProfiles,omitempty"`
	SupplementalGroups *V1SupplementalGroupsStrategyOptions `json:"supplementalGroups,omitempty"`
	// The users who have permissions to use this security context constraints
	Users []string `json:"users"`
	// Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use \"*\". To allow no volumes, set to [\"none\"].
	Volumes []V1FSType `json:"volumes"`
}

// NewV1SecurityContextConstraints instantiates a new V1SecurityContextConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SecurityContextConstraints(allowHostDirVolumePlugin bool, allowHostIPC bool, allowHostNetwork bool, allowHostPID bool, allowHostPorts bool, allowPrivilegedContainer bool, allowedCapabilities []V1Capability, defaultAddCapabilities []V1Capability, groups []string, priority int32, readOnlyRootFilesystem bool, requiredDropCapabilities []V1Capability, users []string, volumes []V1FSType) *V1SecurityContextConstraints {
	this := V1SecurityContextConstraints{}
	this.AllowHostDirVolumePlugin = allowHostDirVolumePlugin
	this.AllowHostIPC = allowHostIPC
	this.AllowHostNetwork = allowHostNetwork
	this.AllowHostPID = allowHostPID
	this.AllowHostPorts = allowHostPorts
	this.AllowPrivilegedContainer = allowPrivilegedContainer
	this.AllowedCapabilities = allowedCapabilities
	this.DefaultAddCapabilities = defaultAddCapabilities
	this.Groups = groups
	this.Priority = priority
	this.ReadOnlyRootFilesystem = readOnlyRootFilesystem
	this.RequiredDropCapabilities = requiredDropCapabilities
	this.Users = users
	this.Volumes = volumes
	return &this
}

// NewV1SecurityContextConstraintsWithDefaults instantiates a new V1SecurityContextConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SecurityContextConstraintsWithDefaults() *V1SecurityContextConstraints {
	this := V1SecurityContextConstraints{}
	return &this
}

// GetAllowHostDirVolumePlugin returns the AllowHostDirVolumePlugin field value
func (o *V1SecurityContextConstraints) GetAllowHostDirVolumePlugin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowHostDirVolumePlugin
}

// GetAllowHostDirVolumePluginOk returns a tuple with the AllowHostDirVolumePlugin field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowHostDirVolumePluginOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowHostDirVolumePlugin, true
}

// SetAllowHostDirVolumePlugin sets field value
func (o *V1SecurityContextConstraints) SetAllowHostDirVolumePlugin(v bool) {
	o.AllowHostDirVolumePlugin = v
}

// GetAllowHostIPC returns the AllowHostIPC field value
func (o *V1SecurityContextConstraints) GetAllowHostIPC() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowHostIPC
}

// GetAllowHostIPCOk returns a tuple with the AllowHostIPC field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowHostIPCOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowHostIPC, true
}

// SetAllowHostIPC sets field value
func (o *V1SecurityContextConstraints) SetAllowHostIPC(v bool) {
	o.AllowHostIPC = v
}

// GetAllowHostNetwork returns the AllowHostNetwork field value
func (o *V1SecurityContextConstraints) GetAllowHostNetwork() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowHostNetwork
}

// GetAllowHostNetworkOk returns a tuple with the AllowHostNetwork field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowHostNetworkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowHostNetwork, true
}

// SetAllowHostNetwork sets field value
func (o *V1SecurityContextConstraints) SetAllowHostNetwork(v bool) {
	o.AllowHostNetwork = v
}

// GetAllowHostPID returns the AllowHostPID field value
func (o *V1SecurityContextConstraints) GetAllowHostPID() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowHostPID
}

// GetAllowHostPIDOk returns a tuple with the AllowHostPID field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowHostPIDOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowHostPID, true
}

// SetAllowHostPID sets field value
func (o *V1SecurityContextConstraints) SetAllowHostPID(v bool) {
	o.AllowHostPID = v
}

// GetAllowHostPorts returns the AllowHostPorts field value
func (o *V1SecurityContextConstraints) GetAllowHostPorts() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowHostPorts
}

// GetAllowHostPortsOk returns a tuple with the AllowHostPorts field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowHostPortsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowHostPorts, true
}

// SetAllowHostPorts sets field value
func (o *V1SecurityContextConstraints) SetAllowHostPorts(v bool) {
	o.AllowHostPorts = v
}

// GetAllowPrivilegeEscalation returns the AllowPrivilegeEscalation field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetAllowPrivilegeEscalation() bool {
	if o == nil || IsNil(o.AllowPrivilegeEscalation) {
		var ret bool
		return ret
	}
	return *o.AllowPrivilegeEscalation
}

// GetAllowPrivilegeEscalationOk returns a tuple with the AllowPrivilegeEscalation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowPrivilegeEscalationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowPrivilegeEscalation) {
		return nil, false
	}
	return o.AllowPrivilegeEscalation, true
}

// HasAllowPrivilegeEscalation returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasAllowPrivilegeEscalation() bool {
	if o != nil && !IsNil(o.AllowPrivilegeEscalation) {
		return true
	}

	return false
}

// SetAllowPrivilegeEscalation gets a reference to the given bool and assigns it to the AllowPrivilegeEscalation field.
func (o *V1SecurityContextConstraints) SetAllowPrivilegeEscalation(v bool) {
	o.AllowPrivilegeEscalation = &v
}

// GetAllowPrivilegedContainer returns the AllowPrivilegedContainer field value
func (o *V1SecurityContextConstraints) GetAllowPrivilegedContainer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowPrivilegedContainer
}

// GetAllowPrivilegedContainerOk returns a tuple with the AllowPrivilegedContainer field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowPrivilegedContainerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowPrivilegedContainer, true
}

// SetAllowPrivilegedContainer sets field value
func (o *V1SecurityContextConstraints) SetAllowPrivilegedContainer(v bool) {
	o.AllowPrivilegedContainer = v
}

// GetAllowedCapabilities returns the AllowedCapabilities field value
func (o *V1SecurityContextConstraints) GetAllowedCapabilities() []V1Capability {
	if o == nil {
		var ret []V1Capability
		return ret
	}

	return o.AllowedCapabilities
}

// GetAllowedCapabilitiesOk returns a tuple with the AllowedCapabilities field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowedCapabilitiesOk() ([]V1Capability, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedCapabilities, true
}

// SetAllowedCapabilities sets field value
func (o *V1SecurityContextConstraints) SetAllowedCapabilities(v []V1Capability) {
	o.AllowedCapabilities = v
}

// GetAllowedFlexVolumes returns the AllowedFlexVolumes field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetAllowedFlexVolumes() []V1AllowedFlexVolume {
	if o == nil || IsNil(o.AllowedFlexVolumes) {
		var ret []V1AllowedFlexVolume
		return ret
	}
	return o.AllowedFlexVolumes
}

// GetAllowedFlexVolumesOk returns a tuple with the AllowedFlexVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowedFlexVolumesOk() ([]V1AllowedFlexVolume, bool) {
	if o == nil || IsNil(o.AllowedFlexVolumes) {
		return nil, false
	}
	return o.AllowedFlexVolumes, true
}

// HasAllowedFlexVolumes returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasAllowedFlexVolumes() bool {
	if o != nil && !IsNil(o.AllowedFlexVolumes) {
		return true
	}

	return false
}

// SetAllowedFlexVolumes gets a reference to the given []V1AllowedFlexVolume and assigns it to the AllowedFlexVolumes field.
func (o *V1SecurityContextConstraints) SetAllowedFlexVolumes(v []V1AllowedFlexVolume) {
	o.AllowedFlexVolumes = v
}

// GetAllowedUnsafeSysctls returns the AllowedUnsafeSysctls field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetAllowedUnsafeSysctls() []string {
	if o == nil || IsNil(o.AllowedUnsafeSysctls) {
		var ret []string
		return ret
	}
	return o.AllowedUnsafeSysctls
}

// GetAllowedUnsafeSysctlsOk returns a tuple with the AllowedUnsafeSysctls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetAllowedUnsafeSysctlsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedUnsafeSysctls) {
		return nil, false
	}
	return o.AllowedUnsafeSysctls, true
}

// HasAllowedUnsafeSysctls returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasAllowedUnsafeSysctls() bool {
	if o != nil && !IsNil(o.AllowedUnsafeSysctls) {
		return true
	}

	return false
}

// SetAllowedUnsafeSysctls gets a reference to the given []string and assigns it to the AllowedUnsafeSysctls field.
func (o *V1SecurityContextConstraints) SetAllowedUnsafeSysctls(v []string) {
	o.AllowedUnsafeSysctls = v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1SecurityContextConstraints) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetDefaultAddCapabilities returns the DefaultAddCapabilities field value
func (o *V1SecurityContextConstraints) GetDefaultAddCapabilities() []V1Capability {
	if o == nil {
		var ret []V1Capability
		return ret
	}

	return o.DefaultAddCapabilities
}

// GetDefaultAddCapabilitiesOk returns a tuple with the DefaultAddCapabilities field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetDefaultAddCapabilitiesOk() ([]V1Capability, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultAddCapabilities, true
}

// SetDefaultAddCapabilities sets field value
func (o *V1SecurityContextConstraints) SetDefaultAddCapabilities(v []V1Capability) {
	o.DefaultAddCapabilities = v
}

// GetDefaultAllowPrivilegeEscalation returns the DefaultAllowPrivilegeEscalation field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetDefaultAllowPrivilegeEscalation() bool {
	if o == nil || IsNil(o.DefaultAllowPrivilegeEscalation) {
		var ret bool
		return ret
	}
	return *o.DefaultAllowPrivilegeEscalation
}

// GetDefaultAllowPrivilegeEscalationOk returns a tuple with the DefaultAllowPrivilegeEscalation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetDefaultAllowPrivilegeEscalationOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultAllowPrivilegeEscalation) {
		return nil, false
	}
	return o.DefaultAllowPrivilegeEscalation, true
}

// HasDefaultAllowPrivilegeEscalation returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasDefaultAllowPrivilegeEscalation() bool {
	if o != nil && !IsNil(o.DefaultAllowPrivilegeEscalation) {
		return true
	}

	return false
}

// SetDefaultAllowPrivilegeEscalation gets a reference to the given bool and assigns it to the DefaultAllowPrivilegeEscalation field.
func (o *V1SecurityContextConstraints) SetDefaultAllowPrivilegeEscalation(v bool) {
	o.DefaultAllowPrivilegeEscalation = &v
}

// GetForbiddenSysctls returns the ForbiddenSysctls field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetForbiddenSysctls() []string {
	if o == nil || IsNil(o.ForbiddenSysctls) {
		var ret []string
		return ret
	}
	return o.ForbiddenSysctls
}

// GetForbiddenSysctlsOk returns a tuple with the ForbiddenSysctls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetForbiddenSysctlsOk() ([]string, bool) {
	if o == nil || IsNil(o.ForbiddenSysctls) {
		return nil, false
	}
	return o.ForbiddenSysctls, true
}

// HasForbiddenSysctls returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasForbiddenSysctls() bool {
	if o != nil && !IsNil(o.ForbiddenSysctls) {
		return true
	}

	return false
}

// SetForbiddenSysctls gets a reference to the given []string and assigns it to the ForbiddenSysctls field.
func (o *V1SecurityContextConstraints) SetForbiddenSysctls(v []string) {
	o.ForbiddenSysctls = v
}

// GetFsGroup returns the FsGroup field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetFsGroup() V1FSGroupStrategyOptions {
	if o == nil || IsNil(o.FsGroup) {
		var ret V1FSGroupStrategyOptions
		return ret
	}
	return *o.FsGroup
}

// GetFsGroupOk returns a tuple with the FsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetFsGroupOk() (*V1FSGroupStrategyOptions, bool) {
	if o == nil || IsNil(o.FsGroup) {
		return nil, false
	}
	return o.FsGroup, true
}

// HasFsGroup returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasFsGroup() bool {
	if o != nil && !IsNil(o.FsGroup) {
		return true
	}

	return false
}

// SetFsGroup gets a reference to the given V1FSGroupStrategyOptions and assigns it to the FsGroup field.
func (o *V1SecurityContextConstraints) SetFsGroup(v V1FSGroupStrategyOptions) {
	o.FsGroup = &v
}

// GetGroups returns the Groups field value
func (o *V1SecurityContextConstraints) GetGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetGroupsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *V1SecurityContextConstraints) SetGroups(v []string) {
	o.Groups = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1SecurityContextConstraints) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1SecurityContextConstraints) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetPriority returns the Priority field value
func (o *V1SecurityContextConstraints) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *V1SecurityContextConstraints) SetPriority(v int32) {
	o.Priority = v
}

// GetReadOnlyRootFilesystem returns the ReadOnlyRootFilesystem field value
func (o *V1SecurityContextConstraints) GetReadOnlyRootFilesystem() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnlyRootFilesystem
}

// GetReadOnlyRootFilesystemOk returns a tuple with the ReadOnlyRootFilesystem field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetReadOnlyRootFilesystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnlyRootFilesystem, true
}

// SetReadOnlyRootFilesystem sets field value
func (o *V1SecurityContextConstraints) SetReadOnlyRootFilesystem(v bool) {
	o.ReadOnlyRootFilesystem = v
}

// GetRequiredDropCapabilities returns the RequiredDropCapabilities field value
func (o *V1SecurityContextConstraints) GetRequiredDropCapabilities() []V1Capability {
	if o == nil {
		var ret []V1Capability
		return ret
	}

	return o.RequiredDropCapabilities
}

// GetRequiredDropCapabilitiesOk returns a tuple with the RequiredDropCapabilities field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetRequiredDropCapabilitiesOk() ([]V1Capability, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredDropCapabilities, true
}

// SetRequiredDropCapabilities sets field value
func (o *V1SecurityContextConstraints) SetRequiredDropCapabilities(v []V1Capability) {
	o.RequiredDropCapabilities = v
}

// GetRunAsUser returns the RunAsUser field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetRunAsUser() V1RunAsUserStrategyOptions {
	if o == nil || IsNil(o.RunAsUser) {
		var ret V1RunAsUserStrategyOptions
		return ret
	}
	return *o.RunAsUser
}

// GetRunAsUserOk returns a tuple with the RunAsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetRunAsUserOk() (*V1RunAsUserStrategyOptions, bool) {
	if o == nil || IsNil(o.RunAsUser) {
		return nil, false
	}
	return o.RunAsUser, true
}

// HasRunAsUser returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasRunAsUser() bool {
	if o != nil && !IsNil(o.RunAsUser) {
		return true
	}

	return false
}

// SetRunAsUser gets a reference to the given V1RunAsUserStrategyOptions and assigns it to the RunAsUser field.
func (o *V1SecurityContextConstraints) SetRunAsUser(v V1RunAsUserStrategyOptions) {
	o.RunAsUser = &v
}

// GetSeLinuxContext returns the SeLinuxContext field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetSeLinuxContext() V1SELinuxContextStrategyOptions {
	if o == nil || IsNil(o.SeLinuxContext) {
		var ret V1SELinuxContextStrategyOptions
		return ret
	}
	return *o.SeLinuxContext
}

// GetSeLinuxContextOk returns a tuple with the SeLinuxContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetSeLinuxContextOk() (*V1SELinuxContextStrategyOptions, bool) {
	if o == nil || IsNil(o.SeLinuxContext) {
		return nil, false
	}
	return o.SeLinuxContext, true
}

// HasSeLinuxContext returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasSeLinuxContext() bool {
	if o != nil && !IsNil(o.SeLinuxContext) {
		return true
	}

	return false
}

// SetSeLinuxContext gets a reference to the given V1SELinuxContextStrategyOptions and assigns it to the SeLinuxContext field.
func (o *V1SecurityContextConstraints) SetSeLinuxContext(v V1SELinuxContextStrategyOptions) {
	o.SeLinuxContext = &v
}

// GetSeccompProfiles returns the SeccompProfiles field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetSeccompProfiles() []string {
	if o == nil || IsNil(o.SeccompProfiles) {
		var ret []string
		return ret
	}
	return o.SeccompProfiles
}

// GetSeccompProfilesOk returns a tuple with the SeccompProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetSeccompProfilesOk() ([]string, bool) {
	if o == nil || IsNil(o.SeccompProfiles) {
		return nil, false
	}
	return o.SeccompProfiles, true
}

// HasSeccompProfiles returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasSeccompProfiles() bool {
	if o != nil && !IsNil(o.SeccompProfiles) {
		return true
	}

	return false
}

// SetSeccompProfiles gets a reference to the given []string and assigns it to the SeccompProfiles field.
func (o *V1SecurityContextConstraints) SetSeccompProfiles(v []string) {
	o.SeccompProfiles = v
}

// GetSupplementalGroups returns the SupplementalGroups field value if set, zero value otherwise.
func (o *V1SecurityContextConstraints) GetSupplementalGroups() V1SupplementalGroupsStrategyOptions {
	if o == nil || IsNil(o.SupplementalGroups) {
		var ret V1SupplementalGroupsStrategyOptions
		return ret
	}
	return *o.SupplementalGroups
}

// GetSupplementalGroupsOk returns a tuple with the SupplementalGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetSupplementalGroupsOk() (*V1SupplementalGroupsStrategyOptions, bool) {
	if o == nil || IsNil(o.SupplementalGroups) {
		return nil, false
	}
	return o.SupplementalGroups, true
}

// HasSupplementalGroups returns a boolean if a field has been set.
func (o *V1SecurityContextConstraints) HasSupplementalGroups() bool {
	if o != nil && !IsNil(o.SupplementalGroups) {
		return true
	}

	return false
}

// SetSupplementalGroups gets a reference to the given V1SupplementalGroupsStrategyOptions and assigns it to the SupplementalGroups field.
func (o *V1SecurityContextConstraints) SetSupplementalGroups(v V1SupplementalGroupsStrategyOptions) {
	o.SupplementalGroups = &v
}

// GetUsers returns the Users field value
func (o *V1SecurityContextConstraints) GetUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetUsersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *V1SecurityContextConstraints) SetUsers(v []string) {
	o.Users = v
}

// GetVolumes returns the Volumes field value
func (o *V1SecurityContextConstraints) GetVolumes() []V1FSType {
	if o == nil {
		var ret []V1FSType
		return ret
	}

	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value
// and a boolean to check if the value has been set.
func (o *V1SecurityContextConstraints) GetVolumesOk() ([]V1FSType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Volumes, true
}

// SetVolumes sets field value
func (o *V1SecurityContextConstraints) SetVolumes(v []V1FSType) {
	o.Volumes = v
}

func (o V1SecurityContextConstraints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SecurityContextConstraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowHostDirVolumePlugin"] = o.AllowHostDirVolumePlugin
	toSerialize["allowHostIPC"] = o.AllowHostIPC
	toSerialize["allowHostNetwork"] = o.AllowHostNetwork
	toSerialize["allowHostPID"] = o.AllowHostPID
	toSerialize["allowHostPorts"] = o.AllowHostPorts
	if !IsNil(o.AllowPrivilegeEscalation) {
		toSerialize["allowPrivilegeEscalation"] = o.AllowPrivilegeEscalation
	}
	toSerialize["allowPrivilegedContainer"] = o.AllowPrivilegedContainer
	toSerialize["allowedCapabilities"] = o.AllowedCapabilities
	if !IsNil(o.AllowedFlexVolumes) {
		toSerialize["allowedFlexVolumes"] = o.AllowedFlexVolumes
	}
	if !IsNil(o.AllowedUnsafeSysctls) {
		toSerialize["allowedUnsafeSysctls"] = o.AllowedUnsafeSysctls
	}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	toSerialize["defaultAddCapabilities"] = o.DefaultAddCapabilities
	if !IsNil(o.DefaultAllowPrivilegeEscalation) {
		toSerialize["defaultAllowPrivilegeEscalation"] = o.DefaultAllowPrivilegeEscalation
	}
	if !IsNil(o.ForbiddenSysctls) {
		toSerialize["forbiddenSysctls"] = o.ForbiddenSysctls
	}
	if !IsNil(o.FsGroup) {
		toSerialize["fsGroup"] = o.FsGroup
	}
	toSerialize["groups"] = o.Groups
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["priority"] = o.Priority
	toSerialize["readOnlyRootFilesystem"] = o.ReadOnlyRootFilesystem
	toSerialize["requiredDropCapabilities"] = o.RequiredDropCapabilities
	if !IsNil(o.RunAsUser) {
		toSerialize["runAsUser"] = o.RunAsUser
	}
	if !IsNil(o.SeLinuxContext) {
		toSerialize["seLinuxContext"] = o.SeLinuxContext
	}
	if !IsNil(o.SeccompProfiles) {
		toSerialize["seccompProfiles"] = o.SeccompProfiles
	}
	if !IsNil(o.SupplementalGroups) {
		toSerialize["supplementalGroups"] = o.SupplementalGroups
	}
	toSerialize["users"] = o.Users
	toSerialize["volumes"] = o.Volumes
	return toSerialize, nil
}

type NullableV1SecurityContextConstraints struct {
	value *V1SecurityContextConstraints
	isSet bool
}

func (v NullableV1SecurityContextConstraints) Get() *V1SecurityContextConstraints {
	return v.value
}

func (v *NullableV1SecurityContextConstraints) Set(val *V1SecurityContextConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SecurityContextConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SecurityContextConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SecurityContextConstraints(val *V1SecurityContextConstraints) *NullableV1SecurityContextConstraints {
	return &NullableV1SecurityContextConstraints{value: val, isSet: true}
}

func (v NullableV1SecurityContextConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SecurityContextConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


