/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageLookupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageLookupPolicy{}

// V1ImageLookupPolicy ImageLookupPolicy describes how an image stream can be used to override the image references used by pods, builds, and other resources in a namespace.
type V1ImageLookupPolicy struct {
	// local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.
	Local bool `json:"local"`
}

// NewV1ImageLookupPolicy instantiates a new V1ImageLookupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageLookupPolicy(local bool) *V1ImageLookupPolicy {
	this := V1ImageLookupPolicy{}
	this.Local = local
	return &this
}

// NewV1ImageLookupPolicyWithDefaults instantiates a new V1ImageLookupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageLookupPolicyWithDefaults() *V1ImageLookupPolicy {
	this := V1ImageLookupPolicy{}
	return &this
}

// GetLocal returns the Local field value
func (o *V1ImageLookupPolicy) GetLocal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *V1ImageLookupPolicy) GetLocalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Local, true
}

// SetLocal sets field value
func (o *V1ImageLookupPolicy) SetLocal(v bool) {
	o.Local = v
}

func (o V1ImageLookupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageLookupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["local"] = o.Local
	return toSerialize, nil
}

type NullableV1ImageLookupPolicy struct {
	value *V1ImageLookupPolicy
	isSet bool
}

func (v NullableV1ImageLookupPolicy) Get() *V1ImageLookupPolicy {
	return v.value
}

func (v *NullableV1ImageLookupPolicy) Set(val *V1ImageLookupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageLookupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageLookupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageLookupPolicy(val *V1ImageLookupPolicy) *NullableV1ImageLookupPolicy {
	return &NullableV1ImageLookupPolicy{value: val, isSet: true}
}

func (v NullableV1ImageLookupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageLookupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


