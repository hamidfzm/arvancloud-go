/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1Endpoints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Endpoints{}

// V1Endpoints Endpoints is a collection of endpoints that implement the actual service. Example:   Name: \"mysvc\",   Subsets: [     {       Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],       Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]     },     {       Addresses: [{\"ip\": \"10.10.3.3\"}],       Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]     },  ]
type V1Endpoints struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets []V1EndpointSubset `json:"subsets,omitempty"`
}

// NewV1Endpoints instantiates a new V1Endpoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Endpoints() *V1Endpoints {
	this := V1Endpoints{}
	return &this
}

// NewV1EndpointsWithDefaults instantiates a new V1Endpoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EndpointsWithDefaults() *V1Endpoints {
	this := V1Endpoints{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1Endpoints) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Endpoints) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1Endpoints) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1Endpoints) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1Endpoints) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Endpoints) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1Endpoints) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1Endpoints) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1Endpoints) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Endpoints) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1Endpoints) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1Endpoints) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetSubsets returns the Subsets field value if set, zero value otherwise.
func (o *V1Endpoints) GetSubsets() []V1EndpointSubset {
	if o == nil || IsNil(o.Subsets) {
		var ret []V1EndpointSubset
		return ret
	}
	return o.Subsets
}

// GetSubsetsOk returns a tuple with the Subsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Endpoints) GetSubsetsOk() ([]V1EndpointSubset, bool) {
	if o == nil || IsNil(o.Subsets) {
		return nil, false
	}
	return o.Subsets, true
}

// HasSubsets returns a boolean if a field has been set.
func (o *V1Endpoints) HasSubsets() bool {
	if o != nil && !IsNil(o.Subsets) {
		return true
	}

	return false
}

// SetSubsets gets a reference to the given []V1EndpointSubset and assigns it to the Subsets field.
func (o *V1Endpoints) SetSubsets(v []V1EndpointSubset) {
	o.Subsets = v
}

func (o V1Endpoints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Endpoints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Subsets) {
		toSerialize["subsets"] = o.Subsets
	}
	return toSerialize, nil
}

type NullableV1Endpoints struct {
	value *V1Endpoints
	isSet bool
}

func (v NullableV1Endpoints) Get() *V1Endpoints {
	return v.value
}

func (v *NullableV1Endpoints) Set(val *V1Endpoints) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Endpoints) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Endpoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Endpoints(val *V1Endpoints) *NullableV1Endpoints {
	return &NullableV1Endpoints{value: val, isSet: true}
}

func (v NullableV1Endpoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Endpoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


