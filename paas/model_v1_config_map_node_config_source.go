/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ConfigMapNodeConfigSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ConfigMapNodeConfigSource{}

// V1ConfigMapNodeConfigSource ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
type V1ConfigMapNodeConfigSource struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey string `json:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name string `json:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	Namespace string `json:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	Uid *string `json:"uid,omitempty"`
}

// NewV1ConfigMapNodeConfigSource instantiates a new V1ConfigMapNodeConfigSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ConfigMapNodeConfigSource(kubeletConfigKey string, name string, namespace string) *V1ConfigMapNodeConfigSource {
	this := V1ConfigMapNodeConfigSource{}
	this.KubeletConfigKey = kubeletConfigKey
	this.Name = name
	this.Namespace = namespace
	return &this
}

// NewV1ConfigMapNodeConfigSourceWithDefaults instantiates a new V1ConfigMapNodeConfigSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigMapNodeConfigSourceWithDefaults() *V1ConfigMapNodeConfigSource {
	this := V1ConfigMapNodeConfigSource{}
	return &this
}

// GetKubeletConfigKey returns the KubeletConfigKey field value
func (o *V1ConfigMapNodeConfigSource) GetKubeletConfigKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubeletConfigKey
}

// GetKubeletConfigKeyOk returns a tuple with the KubeletConfigKey field value
// and a boolean to check if the value has been set.
func (o *V1ConfigMapNodeConfigSource) GetKubeletConfigKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KubeletConfigKey, true
}

// SetKubeletConfigKey sets field value
func (o *V1ConfigMapNodeConfigSource) SetKubeletConfigKey(v string) {
	o.KubeletConfigKey = v
}

// GetName returns the Name field value
func (o *V1ConfigMapNodeConfigSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1ConfigMapNodeConfigSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1ConfigMapNodeConfigSource) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value
func (o *V1ConfigMapNodeConfigSource) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *V1ConfigMapNodeConfigSource) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *V1ConfigMapNodeConfigSource) SetNamespace(v string) {
	o.Namespace = v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *V1ConfigMapNodeConfigSource) GetResourceVersion() string {
	if o == nil || IsNil(o.ResourceVersion) {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMapNodeConfigSource) GetResourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceVersion) {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *V1ConfigMapNodeConfigSource) HasResourceVersion() bool {
	if o != nil && !IsNil(o.ResourceVersion) {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *V1ConfigMapNodeConfigSource) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *V1ConfigMapNodeConfigSource) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMapNodeConfigSource) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *V1ConfigMapNodeConfigSource) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *V1ConfigMapNodeConfigSource) SetUid(v string) {
	o.Uid = &v
}

func (o V1ConfigMapNodeConfigSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ConfigMapNodeConfigSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kubeletConfigKey"] = o.KubeletConfigKey
	toSerialize["name"] = o.Name
	toSerialize["namespace"] = o.Namespace
	if !IsNil(o.ResourceVersion) {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

type NullableV1ConfigMapNodeConfigSource struct {
	value *V1ConfigMapNodeConfigSource
	isSet bool
}

func (v NullableV1ConfigMapNodeConfigSource) Get() *V1ConfigMapNodeConfigSource {
	return v.value
}

func (v *NullableV1ConfigMapNodeConfigSource) Set(val *V1ConfigMapNodeConfigSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConfigMapNodeConfigSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConfigMapNodeConfigSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConfigMapNodeConfigSource(val *V1ConfigMapNodeConfigSource) *NullableV1ConfigMapNodeConfigSource {
	return &NullableV1ConfigMapNodeConfigSource{value: val, isSet: true}
}

func (v NullableV1ConfigMapNodeConfigSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConfigMapNodeConfigSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


