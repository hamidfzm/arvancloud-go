/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1Initializers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Initializers{}

// V1Initializers Initializers tracks the progress of initialization.
type V1Initializers struct {
	// Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
	Pending []V1Initializer `json:"pending"`
	Result *V1Status `json:"result,omitempty"`
}

// NewV1Initializers instantiates a new V1Initializers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Initializers(pending []V1Initializer) *V1Initializers {
	this := V1Initializers{}
	this.Pending = pending
	return &this
}

// NewV1InitializersWithDefaults instantiates a new V1Initializers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InitializersWithDefaults() *V1Initializers {
	this := V1Initializers{}
	return &this
}

// GetPending returns the Pending field value
func (o *V1Initializers) GetPending() []V1Initializer {
	if o == nil {
		var ret []V1Initializer
		return ret
	}

	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
func (o *V1Initializers) GetPendingOk() ([]V1Initializer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pending, true
}

// SetPending sets field value
func (o *V1Initializers) SetPending(v []V1Initializer) {
	o.Pending = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *V1Initializers) GetResult() V1Status {
	if o == nil || IsNil(o.Result) {
		var ret V1Status
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Initializers) GetResultOk() (*V1Status, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *V1Initializers) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given V1Status and assigns it to the Result field.
func (o *V1Initializers) SetResult(v V1Status) {
	o.Result = &v
}

func (o V1Initializers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Initializers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pending"] = o.Pending
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableV1Initializers struct {
	value *V1Initializers
	isSet bool
}

func (v NullableV1Initializers) Get() *V1Initializers {
	return v.value
}

func (v *NullableV1Initializers) Set(val *V1Initializers) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Initializers) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Initializers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Initializers(val *V1Initializers) *NullableV1Initializers {
	return &NullableV1Initializers{value: val, isSet: true}
}

func (v NullableV1Initializers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Initializers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


