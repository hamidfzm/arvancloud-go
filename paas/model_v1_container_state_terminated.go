/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ContainerStateTerminated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ContainerStateTerminated{}

// V1ContainerStateTerminated ContainerStateTerminated is a terminated state of a container.
type V1ContainerStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID *string `json:"containerID,omitempty"`
	// Exit status from the last termination of the container
	ExitCode int32 `json:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `json:"finishedAt,omitempty"`
	// Message regarding the last termination of the container
	Message *string `json:"message,omitempty"`
	// (brief) reason from the last termination of the container
	Reason *string `json:"reason,omitempty"`
	// Signal from the last termination of the container
	Signal *int32 `json:"signal,omitempty"`
	// Time at which previous execution of the container started
	StartedAt *string `json:"startedAt,omitempty"`
}

// NewV1ContainerStateTerminated instantiates a new V1ContainerStateTerminated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ContainerStateTerminated(exitCode int32) *V1ContainerStateTerminated {
	this := V1ContainerStateTerminated{}
	this.ExitCode = exitCode
	return &this
}

// NewV1ContainerStateTerminatedWithDefaults instantiates a new V1ContainerStateTerminated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ContainerStateTerminatedWithDefaults() *V1ContainerStateTerminated {
	this := V1ContainerStateTerminated{}
	return &this
}

// GetContainerID returns the ContainerID field value if set, zero value otherwise.
func (o *V1ContainerStateTerminated) GetContainerID() string {
	if o == nil || IsNil(o.ContainerID) {
		var ret string
		return ret
	}
	return *o.ContainerID
}

// GetContainerIDOk returns a tuple with the ContainerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStateTerminated) GetContainerIDOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerID) {
		return nil, false
	}
	return o.ContainerID, true
}

// HasContainerID returns a boolean if a field has been set.
func (o *V1ContainerStateTerminated) HasContainerID() bool {
	if o != nil && !IsNil(o.ContainerID) {
		return true
	}

	return false
}

// SetContainerID gets a reference to the given string and assigns it to the ContainerID field.
func (o *V1ContainerStateTerminated) SetContainerID(v string) {
	o.ContainerID = &v
}

// GetExitCode returns the ExitCode field value
func (o *V1ContainerStateTerminated) GetExitCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExitCode
}

// GetExitCodeOk returns a tuple with the ExitCode field value
// and a boolean to check if the value has been set.
func (o *V1ContainerStateTerminated) GetExitCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExitCode, true
}

// SetExitCode sets field value
func (o *V1ContainerStateTerminated) SetExitCode(v int32) {
	o.ExitCode = v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *V1ContainerStateTerminated) GetFinishedAt() string {
	if o == nil || IsNil(o.FinishedAt) {
		var ret string
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStateTerminated) GetFinishedAtOk() (*string, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *V1ContainerStateTerminated) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given string and assigns it to the FinishedAt field.
func (o *V1ContainerStateTerminated) SetFinishedAt(v string) {
	o.FinishedAt = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1ContainerStateTerminated) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStateTerminated) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1ContainerStateTerminated) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1ContainerStateTerminated) SetMessage(v string) {
	o.Message = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *V1ContainerStateTerminated) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStateTerminated) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *V1ContainerStateTerminated) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *V1ContainerStateTerminated) SetReason(v string) {
	o.Reason = &v
}

// GetSignal returns the Signal field value if set, zero value otherwise.
func (o *V1ContainerStateTerminated) GetSignal() int32 {
	if o == nil || IsNil(o.Signal) {
		var ret int32
		return ret
	}
	return *o.Signal
}

// GetSignalOk returns a tuple with the Signal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStateTerminated) GetSignalOk() (*int32, bool) {
	if o == nil || IsNil(o.Signal) {
		return nil, false
	}
	return o.Signal, true
}

// HasSignal returns a boolean if a field has been set.
func (o *V1ContainerStateTerminated) HasSignal() bool {
	if o != nil && !IsNil(o.Signal) {
		return true
	}

	return false
}

// SetSignal gets a reference to the given int32 and assigns it to the Signal field.
func (o *V1ContainerStateTerminated) SetSignal(v int32) {
	o.Signal = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *V1ContainerStateTerminated) GetStartedAt() string {
	if o == nil || IsNil(o.StartedAt) {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStateTerminated) GetStartedAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *V1ContainerStateTerminated) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *V1ContainerStateTerminated) SetStartedAt(v string) {
	o.StartedAt = &v
}

func (o V1ContainerStateTerminated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ContainerStateTerminated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainerID) {
		toSerialize["containerID"] = o.ContainerID
	}
	toSerialize["exitCode"] = o.ExitCode
	if !IsNil(o.FinishedAt) {
		toSerialize["finishedAt"] = o.FinishedAt
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Signal) {
		toSerialize["signal"] = o.Signal
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	return toSerialize, nil
}

type NullableV1ContainerStateTerminated struct {
	value *V1ContainerStateTerminated
	isSet bool
}

func (v NullableV1ContainerStateTerminated) Get() *V1ContainerStateTerminated {
	return v.value
}

func (v *NullableV1ContainerStateTerminated) Set(val *V1ContainerStateTerminated) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ContainerStateTerminated) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ContainerStateTerminated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ContainerStateTerminated(val *V1ContainerStateTerminated) *NullableV1ContainerStateTerminated {
	return &NullableV1ContainerStateTerminated{value: val, isSet: true}
}

func (v NullableV1ContainerStateTerminated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ContainerStateTerminated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


