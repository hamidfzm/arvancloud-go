/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EventsAPIService EventsAPI service
type EventsAPIService service

type ApiListNamespacedEventRequest struct {
	ctx context.Context
	ApiService *EventsAPIService
	namespace string
	pretty *string
	labelSelector *string
	fieldSelector *string
	includeUninitialized *bool
	watch *bool
	resourceVersion *string
	timeoutSeconds *int32
	limit *int32
	continue_ *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListNamespacedEventRequest) Pretty(pretty string) ApiListNamespacedEventRequest {
	r.pretty = &pretty
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListNamespacedEventRequest) LabelSelector(labelSelector string) ApiListNamespacedEventRequest {
	r.labelSelector = &labelSelector
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedEventRequest) FieldSelector(fieldSelector string) ApiListNamespacedEventRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNamespacedEventRequest) IncludeUninitialized(includeUninitialized bool) ApiListNamespacedEventRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNamespacedEventRequest) Watch(watch bool) ApiListNamespacedEventRequest {
	r.watch = &watch
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
func (r ApiListNamespacedEventRequest) ResourceVersion(resourceVersion string) ApiListNamespacedEventRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListNamespacedEventRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedEventRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedEventRequest) Limit(limit int32) ApiListNamespacedEventRequest {
	r.limit = &limit
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedEventRequest) Continue_(continue_ string) ApiListNamespacedEventRequest {
	r.continue_ = &continue_
	return r
}

func (r ApiListNamespacedEventRequest) Execute() (*V1EventList, *http.Response, error) {
	return r.ApiService.ListNamespacedEventExecute(r)
}

/*
ListNamespacedEvent list or watch objects of kind Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListNamespacedEventRequest
*/
func (a *EventsAPIService) ListNamespacedEvent(ctx context.Context, namespace string) ApiListNamespacedEventRequest {
	return ApiListNamespacedEventRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return V1EventList
func (a *EventsAPIService) ListNamespacedEventExecute(r ApiListNamespacedEventRequest) (*V1EventList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1EventList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.ListNamespacedEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/namespaces/{namespace}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadNamespacedEventRequest struct {
	ctx context.Context
	ApiService *EventsAPIService
	namespace string
	name string
	pretty *string
	export *bool
	exact *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadNamespacedEventRequest) Pretty(pretty string) ApiReadNamespacedEventRequest {
	r.pretty = &pretty
	return r
}

// Should this value be exported.  Export strips fields that a user can not specify.
func (r ApiReadNamespacedEventRequest) Export(export bool) ApiReadNamespacedEventRequest {
	r.export = &export
	return r
}

// Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
func (r ApiReadNamespacedEventRequest) Exact(exact bool) ApiReadNamespacedEventRequest {
	r.exact = &exact
	return r
}

func (r ApiReadNamespacedEventRequest) Execute() (*V1Event, *http.Response, error) {
	return r.ApiService.ReadNamespacedEventExecute(r)
}

/*
ReadNamespacedEvent read the specified Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @param name name of the Event
 @return ApiReadNamespacedEventRequest
*/
func (a *EventsAPIService) ReadNamespacedEvent(ctx context.Context, namespace string, name string) ApiReadNamespacedEventRequest {
	return ApiReadNamespacedEventRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		name: name,
	}
}

// Execute executes the request
//  @return V1Event
func (a *EventsAPIService) ReadNamespacedEventExecute(r ApiReadNamespacedEventRequest) (*V1Event, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Event
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.ReadNamespacedEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/namespaces/{namespace}/events/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.export != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "export", r.export, "")
	}
	if r.exact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact", r.exact, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
