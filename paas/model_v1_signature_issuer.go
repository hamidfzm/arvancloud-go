/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1SignatureIssuer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SignatureIssuer{}

// V1SignatureIssuer SignatureIssuer holds information about an issuer of signing certificate or key.
type V1SignatureIssuer struct {
	// Common name (e.g. openshift-signing-service).
	CommonName *string `json:"commonName,omitempty"`
	// Organization name.
	Organization *string `json:"organization,omitempty"`
}

// NewV1SignatureIssuer instantiates a new V1SignatureIssuer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SignatureIssuer() *V1SignatureIssuer {
	this := V1SignatureIssuer{}
	return &this
}

// NewV1SignatureIssuerWithDefaults instantiates a new V1SignatureIssuer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SignatureIssuerWithDefaults() *V1SignatureIssuer {
	this := V1SignatureIssuer{}
	return &this
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *V1SignatureIssuer) GetCommonName() string {
	if o == nil || IsNil(o.CommonName) {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SignatureIssuer) GetCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.CommonName) {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *V1SignatureIssuer) HasCommonName() bool {
	if o != nil && !IsNil(o.CommonName) {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *V1SignatureIssuer) SetCommonName(v string) {
	o.CommonName = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *V1SignatureIssuer) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SignatureIssuer) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *V1SignatureIssuer) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *V1SignatureIssuer) SetOrganization(v string) {
	o.Organization = &v
}

func (o V1SignatureIssuer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SignatureIssuer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommonName) {
		toSerialize["commonName"] = o.CommonName
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

type NullableV1SignatureIssuer struct {
	value *V1SignatureIssuer
	isSet bool
}

func (v NullableV1SignatureIssuer) Get() *V1SignatureIssuer {
	return v.value
}

func (v *NullableV1SignatureIssuer) Set(val *V1SignatureIssuer) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SignatureIssuer) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SignatureIssuer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SignatureIssuer(val *V1SignatureIssuer) *NullableV1SignatureIssuer {
	return &NullableV1SignatureIssuer{value: val, isSet: true}
}

func (v NullableV1SignatureIssuer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SignatureIssuer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


