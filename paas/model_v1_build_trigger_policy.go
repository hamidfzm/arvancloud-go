/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1BuildTriggerPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BuildTriggerPolicy{}

// V1BuildTriggerPolicy BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.
type V1BuildTriggerPolicy struct {
	Bitbucket *V1WebHookTrigger `json:"bitbucket,omitempty"`
	Generic *V1WebHookTrigger `json:"generic,omitempty"`
	Github *V1WebHookTrigger `json:"github,omitempty"`
	Gitlab *V1WebHookTrigger `json:"gitlab,omitempty"`
	ImageChange *V1ImageChangeTrigger `json:"imageChange,omitempty"`
	// type is the type of build trigger
	Type string `json:"type"`
}

// NewV1BuildTriggerPolicy instantiates a new V1BuildTriggerPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BuildTriggerPolicy(type_ string) *V1BuildTriggerPolicy {
	this := V1BuildTriggerPolicy{}
	this.Type = type_
	return &this
}

// NewV1BuildTriggerPolicyWithDefaults instantiates a new V1BuildTriggerPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BuildTriggerPolicyWithDefaults() *V1BuildTriggerPolicy {
	this := V1BuildTriggerPolicy{}
	return &this
}

// GetBitbucket returns the Bitbucket field value if set, zero value otherwise.
func (o *V1BuildTriggerPolicy) GetBitbucket() V1WebHookTrigger {
	if o == nil || IsNil(o.Bitbucket) {
		var ret V1WebHookTrigger
		return ret
	}
	return *o.Bitbucket
}

// GetBitbucketOk returns a tuple with the Bitbucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerPolicy) GetBitbucketOk() (*V1WebHookTrigger, bool) {
	if o == nil || IsNil(o.Bitbucket) {
		return nil, false
	}
	return o.Bitbucket, true
}

// HasBitbucket returns a boolean if a field has been set.
func (o *V1BuildTriggerPolicy) HasBitbucket() bool {
	if o != nil && !IsNil(o.Bitbucket) {
		return true
	}

	return false
}

// SetBitbucket gets a reference to the given V1WebHookTrigger and assigns it to the Bitbucket field.
func (o *V1BuildTriggerPolicy) SetBitbucket(v V1WebHookTrigger) {
	o.Bitbucket = &v
}

// GetGeneric returns the Generic field value if set, zero value otherwise.
func (o *V1BuildTriggerPolicy) GetGeneric() V1WebHookTrigger {
	if o == nil || IsNil(o.Generic) {
		var ret V1WebHookTrigger
		return ret
	}
	return *o.Generic
}

// GetGenericOk returns a tuple with the Generic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerPolicy) GetGenericOk() (*V1WebHookTrigger, bool) {
	if o == nil || IsNil(o.Generic) {
		return nil, false
	}
	return o.Generic, true
}

// HasGeneric returns a boolean if a field has been set.
func (o *V1BuildTriggerPolicy) HasGeneric() bool {
	if o != nil && !IsNil(o.Generic) {
		return true
	}

	return false
}

// SetGeneric gets a reference to the given V1WebHookTrigger and assigns it to the Generic field.
func (o *V1BuildTriggerPolicy) SetGeneric(v V1WebHookTrigger) {
	o.Generic = &v
}

// GetGithub returns the Github field value if set, zero value otherwise.
func (o *V1BuildTriggerPolicy) GetGithub() V1WebHookTrigger {
	if o == nil || IsNil(o.Github) {
		var ret V1WebHookTrigger
		return ret
	}
	return *o.Github
}

// GetGithubOk returns a tuple with the Github field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerPolicy) GetGithubOk() (*V1WebHookTrigger, bool) {
	if o == nil || IsNil(o.Github) {
		return nil, false
	}
	return o.Github, true
}

// HasGithub returns a boolean if a field has been set.
func (o *V1BuildTriggerPolicy) HasGithub() bool {
	if o != nil && !IsNil(o.Github) {
		return true
	}

	return false
}

// SetGithub gets a reference to the given V1WebHookTrigger and assigns it to the Github field.
func (o *V1BuildTriggerPolicy) SetGithub(v V1WebHookTrigger) {
	o.Github = &v
}

// GetGitlab returns the Gitlab field value if set, zero value otherwise.
func (o *V1BuildTriggerPolicy) GetGitlab() V1WebHookTrigger {
	if o == nil || IsNil(o.Gitlab) {
		var ret V1WebHookTrigger
		return ret
	}
	return *o.Gitlab
}

// GetGitlabOk returns a tuple with the Gitlab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerPolicy) GetGitlabOk() (*V1WebHookTrigger, bool) {
	if o == nil || IsNil(o.Gitlab) {
		return nil, false
	}
	return o.Gitlab, true
}

// HasGitlab returns a boolean if a field has been set.
func (o *V1BuildTriggerPolicy) HasGitlab() bool {
	if o != nil && !IsNil(o.Gitlab) {
		return true
	}

	return false
}

// SetGitlab gets a reference to the given V1WebHookTrigger and assigns it to the Gitlab field.
func (o *V1BuildTriggerPolicy) SetGitlab(v V1WebHookTrigger) {
	o.Gitlab = &v
}

// GetImageChange returns the ImageChange field value if set, zero value otherwise.
func (o *V1BuildTriggerPolicy) GetImageChange() V1ImageChangeTrigger {
	if o == nil || IsNil(o.ImageChange) {
		var ret V1ImageChangeTrigger
		return ret
	}
	return *o.ImageChange
}

// GetImageChangeOk returns a tuple with the ImageChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerPolicy) GetImageChangeOk() (*V1ImageChangeTrigger, bool) {
	if o == nil || IsNil(o.ImageChange) {
		return nil, false
	}
	return o.ImageChange, true
}

// HasImageChange returns a boolean if a field has been set.
func (o *V1BuildTriggerPolicy) HasImageChange() bool {
	if o != nil && !IsNil(o.ImageChange) {
		return true
	}

	return false
}

// SetImageChange gets a reference to the given V1ImageChangeTrigger and assigns it to the ImageChange field.
func (o *V1BuildTriggerPolicy) SetImageChange(v V1ImageChangeTrigger) {
	o.ImageChange = &v
}

// GetType returns the Type field value
func (o *V1BuildTriggerPolicy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1BuildTriggerPolicy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1BuildTriggerPolicy) SetType(v string) {
	o.Type = v
}

func (o V1BuildTriggerPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BuildTriggerPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bitbucket) {
		toSerialize["bitbucket"] = o.Bitbucket
	}
	if !IsNil(o.Generic) {
		toSerialize["generic"] = o.Generic
	}
	if !IsNil(o.Github) {
		toSerialize["github"] = o.Github
	}
	if !IsNil(o.Gitlab) {
		toSerialize["gitlab"] = o.Gitlab
	}
	if !IsNil(o.ImageChange) {
		toSerialize["imageChange"] = o.ImageChange
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableV1BuildTriggerPolicy struct {
	value *V1BuildTriggerPolicy
	isSet bool
}

func (v NullableV1BuildTriggerPolicy) Get() *V1BuildTriggerPolicy {
	return v.value
}

func (v *NullableV1BuildTriggerPolicy) Set(val *V1BuildTriggerPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BuildTriggerPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BuildTriggerPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BuildTriggerPolicy(val *V1BuildTriggerPolicy) *NullableV1BuildTriggerPolicy {
	return &NullableV1BuildTriggerPolicy{value: val, isSet: true}
}

func (v NullableV1BuildTriggerPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BuildTriggerPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


