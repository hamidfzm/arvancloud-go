/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1BuildRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BuildRequest{}

// V1BuildRequest BuildRequest is the resource used to pass parameters to build generator
type V1BuildRequest struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	Binary *V1BinaryBuildSource `json:"binary,omitempty"`
	DockerStrategyOptions *V1DockerStrategyOptions `json:"dockerStrategyOptions,omitempty"`
	// env contains additional environment variables you want to pass into a builder container.
	Env []V1EnvVar `json:"env,omitempty"`
	From *V1ObjectReference `json:"from,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	// lastVersion (optional) is the LastVersion of the BuildConfig that was used to generate the build. If the BuildConfig in the generator doesn't match, a build will not be generated.
	LastVersion *int64 `json:"lastVersion,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	Revision *V1SourceRevision `json:"revision,omitempty"`
	SourceStrategyOptions *V1SourceStrategyOptions `json:"sourceStrategyOptions,omitempty"`
	// triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.
	TriggeredBy []V1BuildTriggerCause `json:"triggeredBy"`
	TriggeredByImage *V1ObjectReference `json:"triggeredByImage,omitempty"`
}

// NewV1BuildRequest instantiates a new V1BuildRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BuildRequest(triggeredBy []V1BuildTriggerCause) *V1BuildRequest {
	this := V1BuildRequest{}
	this.TriggeredBy = triggeredBy
	return &this
}

// NewV1BuildRequestWithDefaults instantiates a new V1BuildRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BuildRequestWithDefaults() *V1BuildRequest {
	this := V1BuildRequest{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1BuildRequest) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1BuildRequest) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1BuildRequest) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *V1BuildRequest) GetBinary() V1BinaryBuildSource {
	if o == nil || IsNil(o.Binary) {
		var ret V1BinaryBuildSource
		return ret
	}
	return *o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetBinaryOk() (*V1BinaryBuildSource, bool) {
	if o == nil || IsNil(o.Binary) {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *V1BuildRequest) HasBinary() bool {
	if o != nil && !IsNil(o.Binary) {
		return true
	}

	return false
}

// SetBinary gets a reference to the given V1BinaryBuildSource and assigns it to the Binary field.
func (o *V1BuildRequest) SetBinary(v V1BinaryBuildSource) {
	o.Binary = &v
}

// GetDockerStrategyOptions returns the DockerStrategyOptions field value if set, zero value otherwise.
func (o *V1BuildRequest) GetDockerStrategyOptions() V1DockerStrategyOptions {
	if o == nil || IsNil(o.DockerStrategyOptions) {
		var ret V1DockerStrategyOptions
		return ret
	}
	return *o.DockerStrategyOptions
}

// GetDockerStrategyOptionsOk returns a tuple with the DockerStrategyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetDockerStrategyOptionsOk() (*V1DockerStrategyOptions, bool) {
	if o == nil || IsNil(o.DockerStrategyOptions) {
		return nil, false
	}
	return o.DockerStrategyOptions, true
}

// HasDockerStrategyOptions returns a boolean if a field has been set.
func (o *V1BuildRequest) HasDockerStrategyOptions() bool {
	if o != nil && !IsNil(o.DockerStrategyOptions) {
		return true
	}

	return false
}

// SetDockerStrategyOptions gets a reference to the given V1DockerStrategyOptions and assigns it to the DockerStrategyOptions field.
func (o *V1BuildRequest) SetDockerStrategyOptions(v V1DockerStrategyOptions) {
	o.DockerStrategyOptions = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *V1BuildRequest) GetEnv() []V1EnvVar {
	if o == nil || IsNil(o.Env) {
		var ret []V1EnvVar
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetEnvOk() ([]V1EnvVar, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *V1BuildRequest) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []V1EnvVar and assigns it to the Env field.
func (o *V1BuildRequest) SetEnv(v []V1EnvVar) {
	o.Env = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *V1BuildRequest) GetFrom() V1ObjectReference {
	if o == nil || IsNil(o.From) {
		var ret V1ObjectReference
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetFromOk() (*V1ObjectReference, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *V1BuildRequest) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given V1ObjectReference and assigns it to the From field.
func (o *V1BuildRequest) SetFrom(v V1ObjectReference) {
	o.From = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1BuildRequest) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1BuildRequest) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1BuildRequest) SetKind(v string) {
	o.Kind = &v
}

// GetLastVersion returns the LastVersion field value if set, zero value otherwise.
func (o *V1BuildRequest) GetLastVersion() int64 {
	if o == nil || IsNil(o.LastVersion) {
		var ret int64
		return ret
	}
	return *o.LastVersion
}

// GetLastVersionOk returns a tuple with the LastVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetLastVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.LastVersion) {
		return nil, false
	}
	return o.LastVersion, true
}

// HasLastVersion returns a boolean if a field has been set.
func (o *V1BuildRequest) HasLastVersion() bool {
	if o != nil && !IsNil(o.LastVersion) {
		return true
	}

	return false
}

// SetLastVersion gets a reference to the given int64 and assigns it to the LastVersion field.
func (o *V1BuildRequest) SetLastVersion(v int64) {
	o.LastVersion = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1BuildRequest) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1BuildRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1BuildRequest) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *V1BuildRequest) GetRevision() V1SourceRevision {
	if o == nil || IsNil(o.Revision) {
		var ret V1SourceRevision
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetRevisionOk() (*V1SourceRevision, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *V1BuildRequest) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given V1SourceRevision and assigns it to the Revision field.
func (o *V1BuildRequest) SetRevision(v V1SourceRevision) {
	o.Revision = &v
}

// GetSourceStrategyOptions returns the SourceStrategyOptions field value if set, zero value otherwise.
func (o *V1BuildRequest) GetSourceStrategyOptions() V1SourceStrategyOptions {
	if o == nil || IsNil(o.SourceStrategyOptions) {
		var ret V1SourceStrategyOptions
		return ret
	}
	return *o.SourceStrategyOptions
}

// GetSourceStrategyOptionsOk returns a tuple with the SourceStrategyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetSourceStrategyOptionsOk() (*V1SourceStrategyOptions, bool) {
	if o == nil || IsNil(o.SourceStrategyOptions) {
		return nil, false
	}
	return o.SourceStrategyOptions, true
}

// HasSourceStrategyOptions returns a boolean if a field has been set.
func (o *V1BuildRequest) HasSourceStrategyOptions() bool {
	if o != nil && !IsNil(o.SourceStrategyOptions) {
		return true
	}

	return false
}

// SetSourceStrategyOptions gets a reference to the given V1SourceStrategyOptions and assigns it to the SourceStrategyOptions field.
func (o *V1BuildRequest) SetSourceStrategyOptions(v V1SourceStrategyOptions) {
	o.SourceStrategyOptions = &v
}

// GetTriggeredBy returns the TriggeredBy field value
func (o *V1BuildRequest) GetTriggeredBy() []V1BuildTriggerCause {
	if o == nil {
		var ret []V1BuildTriggerCause
		return ret
	}

	return o.TriggeredBy
}

// GetTriggeredByOk returns a tuple with the TriggeredBy field value
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetTriggeredByOk() ([]V1BuildTriggerCause, bool) {
	if o == nil {
		return nil, false
	}
	return o.TriggeredBy, true
}

// SetTriggeredBy sets field value
func (o *V1BuildRequest) SetTriggeredBy(v []V1BuildTriggerCause) {
	o.TriggeredBy = v
}

// GetTriggeredByImage returns the TriggeredByImage field value if set, zero value otherwise.
func (o *V1BuildRequest) GetTriggeredByImage() V1ObjectReference {
	if o == nil || IsNil(o.TriggeredByImage) {
		var ret V1ObjectReference
		return ret
	}
	return *o.TriggeredByImage
}

// GetTriggeredByImageOk returns a tuple with the TriggeredByImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildRequest) GetTriggeredByImageOk() (*V1ObjectReference, bool) {
	if o == nil || IsNil(o.TriggeredByImage) {
		return nil, false
	}
	return o.TriggeredByImage, true
}

// HasTriggeredByImage returns a boolean if a field has been set.
func (o *V1BuildRequest) HasTriggeredByImage() bool {
	if o != nil && !IsNil(o.TriggeredByImage) {
		return true
	}

	return false
}

// SetTriggeredByImage gets a reference to the given V1ObjectReference and assigns it to the TriggeredByImage field.
func (o *V1BuildRequest) SetTriggeredByImage(v V1ObjectReference) {
	o.TriggeredByImage = &v
}

func (o V1BuildRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BuildRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Binary) {
		toSerialize["binary"] = o.Binary
	}
	if !IsNil(o.DockerStrategyOptions) {
		toSerialize["dockerStrategyOptions"] = o.DockerStrategyOptions
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.LastVersion) {
		toSerialize["lastVersion"] = o.LastVersion
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.SourceStrategyOptions) {
		toSerialize["sourceStrategyOptions"] = o.SourceStrategyOptions
	}
	toSerialize["triggeredBy"] = o.TriggeredBy
	if !IsNil(o.TriggeredByImage) {
		toSerialize["triggeredByImage"] = o.TriggeredByImage
	}
	return toSerialize, nil
}

type NullableV1BuildRequest struct {
	value *V1BuildRequest
	isSet bool
}

func (v NullableV1BuildRequest) Get() *V1BuildRequest {
	return v.value
}

func (v *NullableV1BuildRequest) Set(val *V1BuildRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BuildRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BuildRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BuildRequest(val *V1BuildRequest) *NullableV1BuildRequest {
	return &NullableV1BuildRequest{value: val, isSet: true}
}

func (v NullableV1BuildRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BuildRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


