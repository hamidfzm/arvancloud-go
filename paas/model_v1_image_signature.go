/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageSignature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageSignature{}

// V1ImageSignature ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.
type V1ImageSignature struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Conditions represent the latest available observations of a signature's current state.
	Conditions []V1SignatureCondition `json:"conditions,omitempty"`
	// Required: An opaque binary string which is an image's signature.
	Content string `json:"content"`
	// If specified, it is the time of signature's creation.
	Created *string `json:"created,omitempty"`
	// A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").
	ImageIdentity *string `json:"imageIdentity,omitempty"`
	IssuedBy *V1SignatureIssuer `json:"issuedBy,omitempty"`
	IssuedTo *V1SignatureSubject `json:"issuedTo,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	// Contains claims from the signature.
	SignedClaims map[string]interface{} `json:"signedClaims,omitempty"`
	// Required: Describes a type of stored blob.
	Type string `json:"type"`
}

// NewV1ImageSignature instantiates a new V1ImageSignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageSignature(content string, type_ string) *V1ImageSignature {
	this := V1ImageSignature{}
	this.Content = content
	this.Type = type_
	return &this
}

// NewV1ImageSignatureWithDefaults instantiates a new V1ImageSignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageSignatureWithDefaults() *V1ImageSignature {
	this := V1ImageSignature{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1ImageSignature) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1ImageSignature) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1ImageSignature) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1ImageSignature) GetConditions() []V1SignatureCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1SignatureCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetConditionsOk() ([]V1SignatureCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1ImageSignature) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1SignatureCondition and assigns it to the Conditions field.
func (o *V1ImageSignature) SetConditions(v []V1SignatureCondition) {
	o.Conditions = v
}

// GetContent returns the Content field value
func (o *V1ImageSignature) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *V1ImageSignature) SetContent(v string) {
	o.Content = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *V1ImageSignature) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *V1ImageSignature) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *V1ImageSignature) SetCreated(v string) {
	o.Created = &v
}

// GetImageIdentity returns the ImageIdentity field value if set, zero value otherwise.
func (o *V1ImageSignature) GetImageIdentity() string {
	if o == nil || IsNil(o.ImageIdentity) {
		var ret string
		return ret
	}
	return *o.ImageIdentity
}

// GetImageIdentityOk returns a tuple with the ImageIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetImageIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.ImageIdentity) {
		return nil, false
	}
	return o.ImageIdentity, true
}

// HasImageIdentity returns a boolean if a field has been set.
func (o *V1ImageSignature) HasImageIdentity() bool {
	if o != nil && !IsNil(o.ImageIdentity) {
		return true
	}

	return false
}

// SetImageIdentity gets a reference to the given string and assigns it to the ImageIdentity field.
func (o *V1ImageSignature) SetImageIdentity(v string) {
	o.ImageIdentity = &v
}

// GetIssuedBy returns the IssuedBy field value if set, zero value otherwise.
func (o *V1ImageSignature) GetIssuedBy() V1SignatureIssuer {
	if o == nil || IsNil(o.IssuedBy) {
		var ret V1SignatureIssuer
		return ret
	}
	return *o.IssuedBy
}

// GetIssuedByOk returns a tuple with the IssuedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetIssuedByOk() (*V1SignatureIssuer, bool) {
	if o == nil || IsNil(o.IssuedBy) {
		return nil, false
	}
	return o.IssuedBy, true
}

// HasIssuedBy returns a boolean if a field has been set.
func (o *V1ImageSignature) HasIssuedBy() bool {
	if o != nil && !IsNil(o.IssuedBy) {
		return true
	}

	return false
}

// SetIssuedBy gets a reference to the given V1SignatureIssuer and assigns it to the IssuedBy field.
func (o *V1ImageSignature) SetIssuedBy(v V1SignatureIssuer) {
	o.IssuedBy = &v
}

// GetIssuedTo returns the IssuedTo field value if set, zero value otherwise.
func (o *V1ImageSignature) GetIssuedTo() V1SignatureSubject {
	if o == nil || IsNil(o.IssuedTo) {
		var ret V1SignatureSubject
		return ret
	}
	return *o.IssuedTo
}

// GetIssuedToOk returns a tuple with the IssuedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetIssuedToOk() (*V1SignatureSubject, bool) {
	if o == nil || IsNil(o.IssuedTo) {
		return nil, false
	}
	return o.IssuedTo, true
}

// HasIssuedTo returns a boolean if a field has been set.
func (o *V1ImageSignature) HasIssuedTo() bool {
	if o != nil && !IsNil(o.IssuedTo) {
		return true
	}

	return false
}

// SetIssuedTo gets a reference to the given V1SignatureSubject and assigns it to the IssuedTo field.
func (o *V1ImageSignature) SetIssuedTo(v V1SignatureSubject) {
	o.IssuedTo = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1ImageSignature) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1ImageSignature) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1ImageSignature) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1ImageSignature) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1ImageSignature) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1ImageSignature) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetSignedClaims returns the SignedClaims field value if set, zero value otherwise.
func (o *V1ImageSignature) GetSignedClaims() map[string]interface{} {
	if o == nil || IsNil(o.SignedClaims) {
		var ret map[string]interface{}
		return ret
	}
	return o.SignedClaims
}

// GetSignedClaimsOk returns a tuple with the SignedClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetSignedClaimsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SignedClaims) {
		return map[string]interface{}{}, false
	}
	return o.SignedClaims, true
}

// HasSignedClaims returns a boolean if a field has been set.
func (o *V1ImageSignature) HasSignedClaims() bool {
	if o != nil && !IsNil(o.SignedClaims) {
		return true
	}

	return false
}

// SetSignedClaims gets a reference to the given map[string]interface{} and assigns it to the SignedClaims field.
func (o *V1ImageSignature) SetSignedClaims(v map[string]interface{}) {
	o.SignedClaims = v
}

// GetType returns the Type field value
func (o *V1ImageSignature) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1ImageSignature) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1ImageSignature) SetType(v string) {
	o.Type = v
}

func (o V1ImageSignature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageSignature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.ImageIdentity) {
		toSerialize["imageIdentity"] = o.ImageIdentity
	}
	if !IsNil(o.IssuedBy) {
		toSerialize["issuedBy"] = o.IssuedBy
	}
	if !IsNil(o.IssuedTo) {
		toSerialize["issuedTo"] = o.IssuedTo
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.SignedClaims) {
		toSerialize["signedClaims"] = o.SignedClaims
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableV1ImageSignature struct {
	value *V1ImageSignature
	isSet bool
}

func (v NullableV1ImageSignature) Get() *V1ImageSignature {
	return v.value
}

func (v *NullableV1ImageSignature) Set(val *V1ImageSignature) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageSignature(val *V1ImageSignature) *NullableV1ImageSignature {
	return &NullableV1ImageSignature{value: val, isSet: true}
}

func (v NullableV1ImageSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


