/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ScaleIOPersistentVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ScaleIOPersistentVolumeSource{}

// V1ScaleIOPersistentVolumeSource ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
type V1ScaleIOPersistentVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// The host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway"`
	// The name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `json:"protectionDomain,omitempty"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef V1SecretReference `json:"secretRef"`
	// Flag to enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `json:"sslEnabled,omitempty"`
	// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
	StorageMode *string `json:"storageMode,omitempty"`
	// The ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `json:"storagePool,omitempty"`
	// The name of the storage system as configured in ScaleIO.
	System string `json:"system"`
	// The name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `json:"volumeName,omitempty"`
}

// NewV1ScaleIOPersistentVolumeSource instantiates a new V1ScaleIOPersistentVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ScaleIOPersistentVolumeSource(gateway string, secretRef V1SecretReference, system string) *V1ScaleIOPersistentVolumeSource {
	this := V1ScaleIOPersistentVolumeSource{}
	this.Gateway = gateway
	this.SecretRef = secretRef
	this.System = system
	return &this
}

// NewV1ScaleIOPersistentVolumeSourceWithDefaults instantiates a new V1ScaleIOPersistentVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ScaleIOPersistentVolumeSourceWithDefaults() *V1ScaleIOPersistentVolumeSource {
	this := V1ScaleIOPersistentVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1ScaleIOPersistentVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1ScaleIOPersistentVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1ScaleIOPersistentVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetGateway returns the Gateway field value
func (o *V1ScaleIOPersistentVolumeSource) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *V1ScaleIOPersistentVolumeSource) SetGateway(v string) {
	o.Gateway = v
}

// GetProtectionDomain returns the ProtectionDomain field value if set, zero value otherwise.
func (o *V1ScaleIOPersistentVolumeSource) GetProtectionDomain() string {
	if o == nil || IsNil(o.ProtectionDomain) {
		var ret string
		return ret
	}
	return *o.ProtectionDomain
}

// GetProtectionDomainOk returns a tuple with the ProtectionDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetProtectionDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionDomain) {
		return nil, false
	}
	return o.ProtectionDomain, true
}

// HasProtectionDomain returns a boolean if a field has been set.
func (o *V1ScaleIOPersistentVolumeSource) HasProtectionDomain() bool {
	if o != nil && !IsNil(o.ProtectionDomain) {
		return true
	}

	return false
}

// SetProtectionDomain gets a reference to the given string and assigns it to the ProtectionDomain field.
func (o *V1ScaleIOPersistentVolumeSource) SetProtectionDomain(v string) {
	o.ProtectionDomain = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1ScaleIOPersistentVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1ScaleIOPersistentVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1ScaleIOPersistentVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value
func (o *V1ScaleIOPersistentVolumeSource) GetSecretRef() V1SecretReference {
	if o == nil {
		var ret V1SecretReference
		return ret
	}

	return o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetSecretRefOk() (*V1SecretReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretRef, true
}

// SetSecretRef sets field value
func (o *V1ScaleIOPersistentVolumeSource) SetSecretRef(v V1SecretReference) {
	o.SecretRef = v
}

// GetSslEnabled returns the SslEnabled field value if set, zero value otherwise.
func (o *V1ScaleIOPersistentVolumeSource) GetSslEnabled() bool {
	if o == nil || IsNil(o.SslEnabled) {
		var ret bool
		return ret
	}
	return *o.SslEnabled
}

// GetSslEnabledOk returns a tuple with the SslEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetSslEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SslEnabled) {
		return nil, false
	}
	return o.SslEnabled, true
}

// HasSslEnabled returns a boolean if a field has been set.
func (o *V1ScaleIOPersistentVolumeSource) HasSslEnabled() bool {
	if o != nil && !IsNil(o.SslEnabled) {
		return true
	}

	return false
}

// SetSslEnabled gets a reference to the given bool and assigns it to the SslEnabled field.
func (o *V1ScaleIOPersistentVolumeSource) SetSslEnabled(v bool) {
	o.SslEnabled = &v
}

// GetStorageMode returns the StorageMode field value if set, zero value otherwise.
func (o *V1ScaleIOPersistentVolumeSource) GetStorageMode() string {
	if o == nil || IsNil(o.StorageMode) {
		var ret string
		return ret
	}
	return *o.StorageMode
}

// GetStorageModeOk returns a tuple with the StorageMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetStorageModeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageMode) {
		return nil, false
	}
	return o.StorageMode, true
}

// HasStorageMode returns a boolean if a field has been set.
func (o *V1ScaleIOPersistentVolumeSource) HasStorageMode() bool {
	if o != nil && !IsNil(o.StorageMode) {
		return true
	}

	return false
}

// SetStorageMode gets a reference to the given string and assigns it to the StorageMode field.
func (o *V1ScaleIOPersistentVolumeSource) SetStorageMode(v string) {
	o.StorageMode = &v
}

// GetStoragePool returns the StoragePool field value if set, zero value otherwise.
func (o *V1ScaleIOPersistentVolumeSource) GetStoragePool() string {
	if o == nil || IsNil(o.StoragePool) {
		var ret string
		return ret
	}
	return *o.StoragePool
}

// GetStoragePoolOk returns a tuple with the StoragePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetStoragePoolOk() (*string, bool) {
	if o == nil || IsNil(o.StoragePool) {
		return nil, false
	}
	return o.StoragePool, true
}

// HasStoragePool returns a boolean if a field has been set.
func (o *V1ScaleIOPersistentVolumeSource) HasStoragePool() bool {
	if o != nil && !IsNil(o.StoragePool) {
		return true
	}

	return false
}

// SetStoragePool gets a reference to the given string and assigns it to the StoragePool field.
func (o *V1ScaleIOPersistentVolumeSource) SetStoragePool(v string) {
	o.StoragePool = &v
}

// GetSystem returns the System field value
func (o *V1ScaleIOPersistentVolumeSource) GetSystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.System
}

// GetSystemOk returns a tuple with the System field value
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetSystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.System, true
}

// SetSystem sets field value
func (o *V1ScaleIOPersistentVolumeSource) SetSystem(v string) {
	o.System = v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *V1ScaleIOPersistentVolumeSource) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScaleIOPersistentVolumeSource) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *V1ScaleIOPersistentVolumeSource) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *V1ScaleIOPersistentVolumeSource) SetVolumeName(v string) {
	o.VolumeName = &v
}

func (o V1ScaleIOPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ScaleIOPersistentVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	toSerialize["gateway"] = o.Gateway
	if !IsNil(o.ProtectionDomain) {
		toSerialize["protectionDomain"] = o.ProtectionDomain
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	toSerialize["secretRef"] = o.SecretRef
	if !IsNil(o.SslEnabled) {
		toSerialize["sslEnabled"] = o.SslEnabled
	}
	if !IsNil(o.StorageMode) {
		toSerialize["storageMode"] = o.StorageMode
	}
	if !IsNil(o.StoragePool) {
		toSerialize["storagePool"] = o.StoragePool
	}
	toSerialize["system"] = o.System
	if !IsNil(o.VolumeName) {
		toSerialize["volumeName"] = o.VolumeName
	}
	return toSerialize, nil
}

type NullableV1ScaleIOPersistentVolumeSource struct {
	value *V1ScaleIOPersistentVolumeSource
	isSet bool
}

func (v NullableV1ScaleIOPersistentVolumeSource) Get() *V1ScaleIOPersistentVolumeSource {
	return v.value
}

func (v *NullableV1ScaleIOPersistentVolumeSource) Set(val *V1ScaleIOPersistentVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ScaleIOPersistentVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ScaleIOPersistentVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ScaleIOPersistentVolumeSource(val *V1ScaleIOPersistentVolumeSource) *NullableV1ScaleIOPersistentVolumeSource {
	return &NullableV1ScaleIOPersistentVolumeSource{value: val, isSet: true}
}

func (v NullableV1ScaleIOPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ScaleIOPersistentVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


