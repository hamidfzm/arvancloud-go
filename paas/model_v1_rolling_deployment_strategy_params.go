/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1RollingDeploymentStrategyParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1RollingDeploymentStrategyParams{}

// V1RollingDeploymentStrategyParams RollingDeploymentStrategyParams are the input to the Rolling deployment strategy.
type V1RollingDeploymentStrategyParams struct {
	// IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.
	IntervalSeconds *int64 `json:"intervalSeconds,omitempty"`
	// MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up.  This cannot be 0 if MaxUnavailable is 0. By default, 25% is used.  Example: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.
	MaxSurge *string `json:"maxSurge,omitempty"`
	// MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down.  This cannot be 0 if MaxSurge is 0. By default, 25% is used.  Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
	Post *V1LifecycleHook `json:"post,omitempty"`
	Pre *V1LifecycleHook `json:"pre,omitempty"`
	// TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.
	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty"`
	// UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.
	UpdatePeriodSeconds *int64 `json:"updatePeriodSeconds,omitempty"`
}

// NewV1RollingDeploymentStrategyParams instantiates a new V1RollingDeploymentStrategyParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1RollingDeploymentStrategyParams() *V1RollingDeploymentStrategyParams {
	this := V1RollingDeploymentStrategyParams{}
	return &this
}

// NewV1RollingDeploymentStrategyParamsWithDefaults instantiates a new V1RollingDeploymentStrategyParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RollingDeploymentStrategyParamsWithDefaults() *V1RollingDeploymentStrategyParams {
	this := V1RollingDeploymentStrategyParams{}
	return &this
}

// GetIntervalSeconds returns the IntervalSeconds field value if set, zero value otherwise.
func (o *V1RollingDeploymentStrategyParams) GetIntervalSeconds() int64 {
	if o == nil || IsNil(o.IntervalSeconds) {
		var ret int64
		return ret
	}
	return *o.IntervalSeconds
}

// GetIntervalSecondsOk returns a tuple with the IntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingDeploymentStrategyParams) GetIntervalSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.IntervalSeconds) {
		return nil, false
	}
	return o.IntervalSeconds, true
}

// HasIntervalSeconds returns a boolean if a field has been set.
func (o *V1RollingDeploymentStrategyParams) HasIntervalSeconds() bool {
	if o != nil && !IsNil(o.IntervalSeconds) {
		return true
	}

	return false
}

// SetIntervalSeconds gets a reference to the given int64 and assigns it to the IntervalSeconds field.
func (o *V1RollingDeploymentStrategyParams) SetIntervalSeconds(v int64) {
	o.IntervalSeconds = &v
}

// GetMaxSurge returns the MaxSurge field value if set, zero value otherwise.
func (o *V1RollingDeploymentStrategyParams) GetMaxSurge() string {
	if o == nil || IsNil(o.MaxSurge) {
		var ret string
		return ret
	}
	return *o.MaxSurge
}

// GetMaxSurgeOk returns a tuple with the MaxSurge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingDeploymentStrategyParams) GetMaxSurgeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxSurge) {
		return nil, false
	}
	return o.MaxSurge, true
}

// HasMaxSurge returns a boolean if a field has been set.
func (o *V1RollingDeploymentStrategyParams) HasMaxSurge() bool {
	if o != nil && !IsNil(o.MaxSurge) {
		return true
	}

	return false
}

// SetMaxSurge gets a reference to the given string and assigns it to the MaxSurge field.
func (o *V1RollingDeploymentStrategyParams) SetMaxSurge(v string) {
	o.MaxSurge = &v
}

// GetMaxUnavailable returns the MaxUnavailable field value if set, zero value otherwise.
func (o *V1RollingDeploymentStrategyParams) GetMaxUnavailable() string {
	if o == nil || IsNil(o.MaxUnavailable) {
		var ret string
		return ret
	}
	return *o.MaxUnavailable
}

// GetMaxUnavailableOk returns a tuple with the MaxUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingDeploymentStrategyParams) GetMaxUnavailableOk() (*string, bool) {
	if o == nil || IsNil(o.MaxUnavailable) {
		return nil, false
	}
	return o.MaxUnavailable, true
}

// HasMaxUnavailable returns a boolean if a field has been set.
func (o *V1RollingDeploymentStrategyParams) HasMaxUnavailable() bool {
	if o != nil && !IsNil(o.MaxUnavailable) {
		return true
	}

	return false
}

// SetMaxUnavailable gets a reference to the given string and assigns it to the MaxUnavailable field.
func (o *V1RollingDeploymentStrategyParams) SetMaxUnavailable(v string) {
	o.MaxUnavailable = &v
}

// GetPost returns the Post field value if set, zero value otherwise.
func (o *V1RollingDeploymentStrategyParams) GetPost() V1LifecycleHook {
	if o == nil || IsNil(o.Post) {
		var ret V1LifecycleHook
		return ret
	}
	return *o.Post
}

// GetPostOk returns a tuple with the Post field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingDeploymentStrategyParams) GetPostOk() (*V1LifecycleHook, bool) {
	if o == nil || IsNil(o.Post) {
		return nil, false
	}
	return o.Post, true
}

// HasPost returns a boolean if a field has been set.
func (o *V1RollingDeploymentStrategyParams) HasPost() bool {
	if o != nil && !IsNil(o.Post) {
		return true
	}

	return false
}

// SetPost gets a reference to the given V1LifecycleHook and assigns it to the Post field.
func (o *V1RollingDeploymentStrategyParams) SetPost(v V1LifecycleHook) {
	o.Post = &v
}

// GetPre returns the Pre field value if set, zero value otherwise.
func (o *V1RollingDeploymentStrategyParams) GetPre() V1LifecycleHook {
	if o == nil || IsNil(o.Pre) {
		var ret V1LifecycleHook
		return ret
	}
	return *o.Pre
}

// GetPreOk returns a tuple with the Pre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingDeploymentStrategyParams) GetPreOk() (*V1LifecycleHook, bool) {
	if o == nil || IsNil(o.Pre) {
		return nil, false
	}
	return o.Pre, true
}

// HasPre returns a boolean if a field has been set.
func (o *V1RollingDeploymentStrategyParams) HasPre() bool {
	if o != nil && !IsNil(o.Pre) {
		return true
	}

	return false
}

// SetPre gets a reference to the given V1LifecycleHook and assigns it to the Pre field.
func (o *V1RollingDeploymentStrategyParams) SetPre(v V1LifecycleHook) {
	o.Pre = &v
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *V1RollingDeploymentStrategyParams) GetTimeoutSeconds() int64 {
	if o == nil || IsNil(o.TimeoutSeconds) {
		var ret int64
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingDeploymentStrategyParams) GetTimeoutSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeoutSeconds) {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *V1RollingDeploymentStrategyParams) HasTimeoutSeconds() bool {
	if o != nil && !IsNil(o.TimeoutSeconds) {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int64 and assigns it to the TimeoutSeconds field.
func (o *V1RollingDeploymentStrategyParams) SetTimeoutSeconds(v int64) {
	o.TimeoutSeconds = &v
}

// GetUpdatePeriodSeconds returns the UpdatePeriodSeconds field value if set, zero value otherwise.
func (o *V1RollingDeploymentStrategyParams) GetUpdatePeriodSeconds() int64 {
	if o == nil || IsNil(o.UpdatePeriodSeconds) {
		var ret int64
		return ret
	}
	return *o.UpdatePeriodSeconds
}

// GetUpdatePeriodSecondsOk returns a tuple with the UpdatePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingDeploymentStrategyParams) GetUpdatePeriodSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatePeriodSeconds) {
		return nil, false
	}
	return o.UpdatePeriodSeconds, true
}

// HasUpdatePeriodSeconds returns a boolean if a field has been set.
func (o *V1RollingDeploymentStrategyParams) HasUpdatePeriodSeconds() bool {
	if o != nil && !IsNil(o.UpdatePeriodSeconds) {
		return true
	}

	return false
}

// SetUpdatePeriodSeconds gets a reference to the given int64 and assigns it to the UpdatePeriodSeconds field.
func (o *V1RollingDeploymentStrategyParams) SetUpdatePeriodSeconds(v int64) {
	o.UpdatePeriodSeconds = &v
}

func (o V1RollingDeploymentStrategyParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1RollingDeploymentStrategyParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntervalSeconds) {
		toSerialize["intervalSeconds"] = o.IntervalSeconds
	}
	if !IsNil(o.MaxSurge) {
		toSerialize["maxSurge"] = o.MaxSurge
	}
	if !IsNil(o.MaxUnavailable) {
		toSerialize["maxUnavailable"] = o.MaxUnavailable
	}
	if !IsNil(o.Post) {
		toSerialize["post"] = o.Post
	}
	if !IsNil(o.Pre) {
		toSerialize["pre"] = o.Pre
	}
	if !IsNil(o.TimeoutSeconds) {
		toSerialize["timeoutSeconds"] = o.TimeoutSeconds
	}
	if !IsNil(o.UpdatePeriodSeconds) {
		toSerialize["updatePeriodSeconds"] = o.UpdatePeriodSeconds
	}
	return toSerialize, nil
}

type NullableV1RollingDeploymentStrategyParams struct {
	value *V1RollingDeploymentStrategyParams
	isSet bool
}

func (v NullableV1RollingDeploymentStrategyParams) Get() *V1RollingDeploymentStrategyParams {
	return v.value
}

func (v *NullableV1RollingDeploymentStrategyParams) Set(val *V1RollingDeploymentStrategyParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RollingDeploymentStrategyParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RollingDeploymentStrategyParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RollingDeploymentStrategyParams(val *V1RollingDeploymentStrategyParams) *NullableV1RollingDeploymentStrategyParams {
	return &NullableV1RollingDeploymentStrategyParams{value: val, isSet: true}
}

func (v NullableV1RollingDeploymentStrategyParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RollingDeploymentStrategyParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


