/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ContainerState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ContainerState{}

// V1ContainerState ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
type V1ContainerState struct {
	Running *V1ContainerStateRunning `json:"running,omitempty"`
	Terminated *V1ContainerStateTerminated `json:"terminated,omitempty"`
	Waiting *V1ContainerStateWaiting `json:"waiting,omitempty"`
}

// NewV1ContainerState instantiates a new V1ContainerState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ContainerState() *V1ContainerState {
	this := V1ContainerState{}
	return &this
}

// NewV1ContainerStateWithDefaults instantiates a new V1ContainerState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ContainerStateWithDefaults() *V1ContainerState {
	this := V1ContainerState{}
	return &this
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *V1ContainerState) GetRunning() V1ContainerStateRunning {
	if o == nil || IsNil(o.Running) {
		var ret V1ContainerStateRunning
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerState) GetRunningOk() (*V1ContainerStateRunning, bool) {
	if o == nil || IsNil(o.Running) {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *V1ContainerState) HasRunning() bool {
	if o != nil && !IsNil(o.Running) {
		return true
	}

	return false
}

// SetRunning gets a reference to the given V1ContainerStateRunning and assigns it to the Running field.
func (o *V1ContainerState) SetRunning(v V1ContainerStateRunning) {
	o.Running = &v
}

// GetTerminated returns the Terminated field value if set, zero value otherwise.
func (o *V1ContainerState) GetTerminated() V1ContainerStateTerminated {
	if o == nil || IsNil(o.Terminated) {
		var ret V1ContainerStateTerminated
		return ret
	}
	return *o.Terminated
}

// GetTerminatedOk returns a tuple with the Terminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerState) GetTerminatedOk() (*V1ContainerStateTerminated, bool) {
	if o == nil || IsNil(o.Terminated) {
		return nil, false
	}
	return o.Terminated, true
}

// HasTerminated returns a boolean if a field has been set.
func (o *V1ContainerState) HasTerminated() bool {
	if o != nil && !IsNil(o.Terminated) {
		return true
	}

	return false
}

// SetTerminated gets a reference to the given V1ContainerStateTerminated and assigns it to the Terminated field.
func (o *V1ContainerState) SetTerminated(v V1ContainerStateTerminated) {
	o.Terminated = &v
}

// GetWaiting returns the Waiting field value if set, zero value otherwise.
func (o *V1ContainerState) GetWaiting() V1ContainerStateWaiting {
	if o == nil || IsNil(o.Waiting) {
		var ret V1ContainerStateWaiting
		return ret
	}
	return *o.Waiting
}

// GetWaitingOk returns a tuple with the Waiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerState) GetWaitingOk() (*V1ContainerStateWaiting, bool) {
	if o == nil || IsNil(o.Waiting) {
		return nil, false
	}
	return o.Waiting, true
}

// HasWaiting returns a boolean if a field has been set.
func (o *V1ContainerState) HasWaiting() bool {
	if o != nil && !IsNil(o.Waiting) {
		return true
	}

	return false
}

// SetWaiting gets a reference to the given V1ContainerStateWaiting and assigns it to the Waiting field.
func (o *V1ContainerState) SetWaiting(v V1ContainerStateWaiting) {
	o.Waiting = &v
}

func (o V1ContainerState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ContainerState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Running) {
		toSerialize["running"] = o.Running
	}
	if !IsNil(o.Terminated) {
		toSerialize["terminated"] = o.Terminated
	}
	if !IsNil(o.Waiting) {
		toSerialize["waiting"] = o.Waiting
	}
	return toSerialize, nil
}

type NullableV1ContainerState struct {
	value *V1ContainerState
	isSet bool
}

func (v NullableV1ContainerState) Get() *V1ContainerState {
	return v.value
}

func (v *NullableV1ContainerState) Set(val *V1ContainerState) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ContainerState) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ContainerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ContainerState(val *V1ContainerState) *NullableV1ContainerState {
	return &NullableV1ContainerState{value: val, isSet: true}
}

func (v NullableV1ContainerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ContainerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


