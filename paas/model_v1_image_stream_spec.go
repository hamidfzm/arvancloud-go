/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageStreamSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageStreamSpec{}

// V1ImageStreamSpec ImageStreamSpec represents options for ImageStreams.
type V1ImageStreamSpec struct {
	// tags map arbitrary string values to specific image locators
	Tags []V1TagReference `json:"tags,omitempty"`
	// dockerImageRepository is optional, if specified this stream is backed by a Docker repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.
	DockerImageRepository *string `json:"dockerImageRepository,omitempty"`
	LookupPolicy *V1ImageLookupPolicy `json:"lookupPolicy,omitempty"`
}

// NewV1ImageStreamSpec instantiates a new V1ImageStreamSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageStreamSpec() *V1ImageStreamSpec {
	this := V1ImageStreamSpec{}
	return &this
}

// NewV1ImageStreamSpecWithDefaults instantiates a new V1ImageStreamSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageStreamSpecWithDefaults() *V1ImageStreamSpec {
	this := V1ImageStreamSpec{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *V1ImageStreamSpec) GetTags() []V1TagReference {
	if o == nil || IsNil(o.Tags) {
		var ret []V1TagReference
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamSpec) GetTagsOk() ([]V1TagReference, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *V1ImageStreamSpec) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []V1TagReference and assigns it to the Tags field.
func (o *V1ImageStreamSpec) SetTags(v []V1TagReference) {
	o.Tags = v
}

// GetDockerImageRepository returns the DockerImageRepository field value if set, zero value otherwise.
func (o *V1ImageStreamSpec) GetDockerImageRepository() string {
	if o == nil || IsNil(o.DockerImageRepository) {
		var ret string
		return ret
	}
	return *o.DockerImageRepository
}

// GetDockerImageRepositoryOk returns a tuple with the DockerImageRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamSpec) GetDockerImageRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.DockerImageRepository) {
		return nil, false
	}
	return o.DockerImageRepository, true
}

// HasDockerImageRepository returns a boolean if a field has been set.
func (o *V1ImageStreamSpec) HasDockerImageRepository() bool {
	if o != nil && !IsNil(o.DockerImageRepository) {
		return true
	}

	return false
}

// SetDockerImageRepository gets a reference to the given string and assigns it to the DockerImageRepository field.
func (o *V1ImageStreamSpec) SetDockerImageRepository(v string) {
	o.DockerImageRepository = &v
}

// GetLookupPolicy returns the LookupPolicy field value if set, zero value otherwise.
func (o *V1ImageStreamSpec) GetLookupPolicy() V1ImageLookupPolicy {
	if o == nil || IsNil(o.LookupPolicy) {
		var ret V1ImageLookupPolicy
		return ret
	}
	return *o.LookupPolicy
}

// GetLookupPolicyOk returns a tuple with the LookupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamSpec) GetLookupPolicyOk() (*V1ImageLookupPolicy, bool) {
	if o == nil || IsNil(o.LookupPolicy) {
		return nil, false
	}
	return o.LookupPolicy, true
}

// HasLookupPolicy returns a boolean if a field has been set.
func (o *V1ImageStreamSpec) HasLookupPolicy() bool {
	if o != nil && !IsNil(o.LookupPolicy) {
		return true
	}

	return false
}

// SetLookupPolicy gets a reference to the given V1ImageLookupPolicy and assigns it to the LookupPolicy field.
func (o *V1ImageStreamSpec) SetLookupPolicy(v V1ImageLookupPolicy) {
	o.LookupPolicy = &v
}

func (o V1ImageStreamSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageStreamSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.DockerImageRepository) {
		toSerialize["dockerImageRepository"] = o.DockerImageRepository
	}
	if !IsNil(o.LookupPolicy) {
		toSerialize["lookupPolicy"] = o.LookupPolicy
	}
	return toSerialize, nil
}

type NullableV1ImageStreamSpec struct {
	value *V1ImageStreamSpec
	isSet bool
}

func (v NullableV1ImageStreamSpec) Get() *V1ImageStreamSpec {
	return v.value
}

func (v *NullableV1ImageStreamSpec) Set(val *V1ImageStreamSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageStreamSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageStreamSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageStreamSpec(val *V1ImageStreamSpec) *NullableV1ImageStreamSpec {
	return &NullableV1ImageStreamSpec{value: val, isSet: true}
}

func (v NullableV1ImageStreamSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageStreamSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


