/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1DeploymentConfigSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DeploymentConfigSpec{}

// V1DeploymentConfigSpec DeploymentConfigSpec represents the desired state of the deployment.
type V1DeploymentConfigSpec struct {
	// MinReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int32 `json:"minReadySeconds,omitempty"`
	// Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.
	Paused *bool `json:"paused,omitempty"`
	// Replicas is the number of desired replicas.
	Replicas int32 `json:"replicas"`
	// RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified. Defaults to 10. (This only applies to DeploymentConfigs created via the new group API resource, not the legacy resource.)
	RevisionHistoryLimit *int32 `json:"revisionHistoryLimit,omitempty"`
	// Selector is a label query over pods that should match the Replicas count.
	Selector map[string]interface{} `json:"selector,omitempty"`
	Strategy V1DeploymentStrategy `json:"strategy"`
	Template *V1PodTemplateSpec `json:"template,omitempty"`
	// Test ensures that this deployment config will have zero replicas except while a deployment is running. This allows the deployment config to be used as a continuous deployment test - triggering on images, running the deployment, and then succeeding or failing. Post strategy hooks and After actions can be used to integrate successful deployment with an action.
	Test bool `json:"test"`
	// Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger.
	Triggers []V1DeploymentTriggerPolicy `json:"triggers"`
}

// NewV1DeploymentConfigSpec instantiates a new V1DeploymentConfigSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DeploymentConfigSpec(replicas int32, strategy V1DeploymentStrategy, test bool, triggers []V1DeploymentTriggerPolicy) *V1DeploymentConfigSpec {
	this := V1DeploymentConfigSpec{}
	this.Replicas = replicas
	this.Strategy = strategy
	this.Test = test
	this.Triggers = triggers
	return &this
}

// NewV1DeploymentConfigSpecWithDefaults instantiates a new V1DeploymentConfigSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DeploymentConfigSpecWithDefaults() *V1DeploymentConfigSpec {
	this := V1DeploymentConfigSpec{}
	return &this
}

// GetMinReadySeconds returns the MinReadySeconds field value if set, zero value otherwise.
func (o *V1DeploymentConfigSpec) GetMinReadySeconds() int32 {
	if o == nil || IsNil(o.MinReadySeconds) {
		var ret int32
		return ret
	}
	return *o.MinReadySeconds
}

// GetMinReadySecondsOk returns a tuple with the MinReadySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetMinReadySecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinReadySeconds) {
		return nil, false
	}
	return o.MinReadySeconds, true
}

// HasMinReadySeconds returns a boolean if a field has been set.
func (o *V1DeploymentConfigSpec) HasMinReadySeconds() bool {
	if o != nil && !IsNil(o.MinReadySeconds) {
		return true
	}

	return false
}

// SetMinReadySeconds gets a reference to the given int32 and assigns it to the MinReadySeconds field.
func (o *V1DeploymentConfigSpec) SetMinReadySeconds(v int32) {
	o.MinReadySeconds = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *V1DeploymentConfigSpec) GetPaused() bool {
	if o == nil || IsNil(o.Paused) {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.Paused) {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *V1DeploymentConfigSpec) HasPaused() bool {
	if o != nil && !IsNil(o.Paused) {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *V1DeploymentConfigSpec) SetPaused(v bool) {
	o.Paused = &v
}

// GetReplicas returns the Replicas field value
func (o *V1DeploymentConfigSpec) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *V1DeploymentConfigSpec) SetReplicas(v int32) {
	o.Replicas = v
}

// GetRevisionHistoryLimit returns the RevisionHistoryLimit field value if set, zero value otherwise.
func (o *V1DeploymentConfigSpec) GetRevisionHistoryLimit() int32 {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		var ret int32
		return ret
	}
	return *o.RevisionHistoryLimit
}

// GetRevisionHistoryLimitOk returns a tuple with the RevisionHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetRevisionHistoryLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		return nil, false
	}
	return o.RevisionHistoryLimit, true
}

// HasRevisionHistoryLimit returns a boolean if a field has been set.
func (o *V1DeploymentConfigSpec) HasRevisionHistoryLimit() bool {
	if o != nil && !IsNil(o.RevisionHistoryLimit) {
		return true
	}

	return false
}

// SetRevisionHistoryLimit gets a reference to the given int32 and assigns it to the RevisionHistoryLimit field.
func (o *V1DeploymentConfigSpec) SetRevisionHistoryLimit(v int32) {
	o.RevisionHistoryLimit = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *V1DeploymentConfigSpec) GetSelector() map[string]interface{} {
	if o == nil || IsNil(o.Selector) {
		var ret map[string]interface{}
		return ret
	}
	return o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetSelectorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Selector) {
		return map[string]interface{}{}, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *V1DeploymentConfigSpec) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given map[string]interface{} and assigns it to the Selector field.
func (o *V1DeploymentConfigSpec) SetSelector(v map[string]interface{}) {
	o.Selector = v
}

// GetStrategy returns the Strategy field value
func (o *V1DeploymentConfigSpec) GetStrategy() V1DeploymentStrategy {
	if o == nil {
		var ret V1DeploymentStrategy
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetStrategyOk() (*V1DeploymentStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *V1DeploymentConfigSpec) SetStrategy(v V1DeploymentStrategy) {
	o.Strategy = v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *V1DeploymentConfigSpec) GetTemplate() V1PodTemplateSpec {
	if o == nil || IsNil(o.Template) {
		var ret V1PodTemplateSpec
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetTemplateOk() (*V1PodTemplateSpec, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *V1DeploymentConfigSpec) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given V1PodTemplateSpec and assigns it to the Template field.
func (o *V1DeploymentConfigSpec) SetTemplate(v V1PodTemplateSpec) {
	o.Template = &v
}

// GetTest returns the Test field value
func (o *V1DeploymentConfigSpec) GetTest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetTestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *V1DeploymentConfigSpec) SetTest(v bool) {
	o.Test = v
}

// GetTriggers returns the Triggers field value
func (o *V1DeploymentConfigSpec) GetTriggers() []V1DeploymentTriggerPolicy {
	if o == nil {
		var ret []V1DeploymentTriggerPolicy
		return ret
	}

	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value
// and a boolean to check if the value has been set.
func (o *V1DeploymentConfigSpec) GetTriggersOk() ([]V1DeploymentTriggerPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return o.Triggers, true
}

// SetTriggers sets field value
func (o *V1DeploymentConfigSpec) SetTriggers(v []V1DeploymentTriggerPolicy) {
	o.Triggers = v
}

func (o V1DeploymentConfigSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DeploymentConfigSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinReadySeconds) {
		toSerialize["minReadySeconds"] = o.MinReadySeconds
	}
	if !IsNil(o.Paused) {
		toSerialize["paused"] = o.Paused
	}
	toSerialize["replicas"] = o.Replicas
	if !IsNil(o.RevisionHistoryLimit) {
		toSerialize["revisionHistoryLimit"] = o.RevisionHistoryLimit
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	toSerialize["strategy"] = o.Strategy
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	toSerialize["test"] = o.Test
	toSerialize["triggers"] = o.Triggers
	return toSerialize, nil
}

type NullableV1DeploymentConfigSpec struct {
	value *V1DeploymentConfigSpec
	isSet bool
}

func (v NullableV1DeploymentConfigSpec) Get() *V1DeploymentConfigSpec {
	return v.value
}

func (v *NullableV1DeploymentConfigSpec) Set(val *V1DeploymentConfigSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DeploymentConfigSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DeploymentConfigSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DeploymentConfigSpec(val *V1DeploymentConfigSpec) *NullableV1DeploymentConfigSpec {
	return &NullableV1DeploymentConfigSpec{value: val, isSet: true}
}

func (v NullableV1DeploymentConfigSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DeploymentConfigSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


