/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1SourceStrategyOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SourceStrategyOptions{}

// V1SourceStrategyOptions SourceStrategyOptions contains extra strategy options for Source builds
type V1SourceStrategyOptions struct {
	// incremental overrides the source-strategy incremental option in the build config
	Incremental *bool `json:"incremental,omitempty"`
}

// NewV1SourceStrategyOptions instantiates a new V1SourceStrategyOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SourceStrategyOptions() *V1SourceStrategyOptions {
	this := V1SourceStrategyOptions{}
	return &this
}

// NewV1SourceStrategyOptionsWithDefaults instantiates a new V1SourceStrategyOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SourceStrategyOptionsWithDefaults() *V1SourceStrategyOptions {
	this := V1SourceStrategyOptions{}
	return &this
}

// GetIncremental returns the Incremental field value if set, zero value otherwise.
func (o *V1SourceStrategyOptions) GetIncremental() bool {
	if o == nil || IsNil(o.Incremental) {
		var ret bool
		return ret
	}
	return *o.Incremental
}

// GetIncrementalOk returns a tuple with the Incremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceStrategyOptions) GetIncrementalOk() (*bool, bool) {
	if o == nil || IsNil(o.Incremental) {
		return nil, false
	}
	return o.Incremental, true
}

// HasIncremental returns a boolean if a field has been set.
func (o *V1SourceStrategyOptions) HasIncremental() bool {
	if o != nil && !IsNil(o.Incremental) {
		return true
	}

	return false
}

// SetIncremental gets a reference to the given bool and assigns it to the Incremental field.
func (o *V1SourceStrategyOptions) SetIncremental(v bool) {
	o.Incremental = &v
}

func (o V1SourceStrategyOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SourceStrategyOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Incremental) {
		toSerialize["incremental"] = o.Incremental
	}
	return toSerialize, nil
}

type NullableV1SourceStrategyOptions struct {
	value *V1SourceStrategyOptions
	isSet bool
}

func (v NullableV1SourceStrategyOptions) Get() *V1SourceStrategyOptions {
	return v.value
}

func (v *NullableV1SourceStrategyOptions) Set(val *V1SourceStrategyOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SourceStrategyOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SourceStrategyOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SourceStrategyOptions(val *V1SourceStrategyOptions) *NullableV1SourceStrategyOptions {
	return &NullableV1SourceStrategyOptions{value: val, isSet: true}
}

func (v NullableV1SourceStrategyOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SourceStrategyOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


