/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1EndpointSubset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1EndpointSubset{}

// V1EndpointSubset EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:   {     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],     Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]   } The resulting set of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]
type V1EndpointSubset struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
	Addresses []V1EndpointAddress `json:"addresses,omitempty"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
	NotReadyAddresses []V1EndpointAddress `json:"notReadyAddresses,omitempty"`
	// Port numbers available on the related IP addresses.
	Ports []V1EndpointPort `json:"ports,omitempty"`
}

// NewV1EndpointSubset instantiates a new V1EndpointSubset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EndpointSubset() *V1EndpointSubset {
	this := V1EndpointSubset{}
	return &this
}

// NewV1EndpointSubsetWithDefaults instantiates a new V1EndpointSubset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EndpointSubsetWithDefaults() *V1EndpointSubset {
	this := V1EndpointSubset{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *V1EndpointSubset) GetAddresses() []V1EndpointAddress {
	if o == nil || IsNil(o.Addresses) {
		var ret []V1EndpointAddress
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EndpointSubset) GetAddressesOk() ([]V1EndpointAddress, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *V1EndpointSubset) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []V1EndpointAddress and assigns it to the Addresses field.
func (o *V1EndpointSubset) SetAddresses(v []V1EndpointAddress) {
	o.Addresses = v
}

// GetNotReadyAddresses returns the NotReadyAddresses field value if set, zero value otherwise.
func (o *V1EndpointSubset) GetNotReadyAddresses() []V1EndpointAddress {
	if o == nil || IsNil(o.NotReadyAddresses) {
		var ret []V1EndpointAddress
		return ret
	}
	return o.NotReadyAddresses
}

// GetNotReadyAddressesOk returns a tuple with the NotReadyAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EndpointSubset) GetNotReadyAddressesOk() ([]V1EndpointAddress, bool) {
	if o == nil || IsNil(o.NotReadyAddresses) {
		return nil, false
	}
	return o.NotReadyAddresses, true
}

// HasNotReadyAddresses returns a boolean if a field has been set.
func (o *V1EndpointSubset) HasNotReadyAddresses() bool {
	if o != nil && !IsNil(o.NotReadyAddresses) {
		return true
	}

	return false
}

// SetNotReadyAddresses gets a reference to the given []V1EndpointAddress and assigns it to the NotReadyAddresses field.
func (o *V1EndpointSubset) SetNotReadyAddresses(v []V1EndpointAddress) {
	o.NotReadyAddresses = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *V1EndpointSubset) GetPorts() []V1EndpointPort {
	if o == nil || IsNil(o.Ports) {
		var ret []V1EndpointPort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EndpointSubset) GetPortsOk() ([]V1EndpointPort, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *V1EndpointSubset) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []V1EndpointPort and assigns it to the Ports field.
func (o *V1EndpointSubset) SetPorts(v []V1EndpointPort) {
	o.Ports = v
}

func (o V1EndpointSubset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1EndpointSubset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.NotReadyAddresses) {
		toSerialize["notReadyAddresses"] = o.NotReadyAddresses
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	return toSerialize, nil
}

type NullableV1EndpointSubset struct {
	value *V1EndpointSubset
	isSet bool
}

func (v NullableV1EndpointSubset) Get() *V1EndpointSubset {
	return v.value
}

func (v *NullableV1EndpointSubset) Set(val *V1EndpointSubset) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EndpointSubset) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EndpointSubset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EndpointSubset(val *V1EndpointSubset) *NullableV1EndpointSubset {
	return &NullableV1EndpointSubset{value: val, isSet: true}
}

func (v NullableV1EndpointSubset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EndpointSubset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


