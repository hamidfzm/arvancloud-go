/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1RouteStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1RouteStatus{}

// V1RouteStatus RouteStatus provides relevant info about the status of a route, including which routers acknowledge it.
type V1RouteStatus struct {
	// ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are `Ready`
	Ingress []V1RouteIngress `json:"ingress"`
}

// NewV1RouteStatus instantiates a new V1RouteStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1RouteStatus(ingress []V1RouteIngress) *V1RouteStatus {
	this := V1RouteStatus{}
	this.Ingress = ingress
	return &this
}

// NewV1RouteStatusWithDefaults instantiates a new V1RouteStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RouteStatusWithDefaults() *V1RouteStatus {
	this := V1RouteStatus{}
	return &this
}

// GetIngress returns the Ingress field value
func (o *V1RouteStatus) GetIngress() []V1RouteIngress {
	if o == nil {
		var ret []V1RouteIngress
		return ret
	}

	return o.Ingress
}

// GetIngressOk returns a tuple with the Ingress field value
// and a boolean to check if the value has been set.
func (o *V1RouteStatus) GetIngressOk() ([]V1RouteIngress, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ingress, true
}

// SetIngress sets field value
func (o *V1RouteStatus) SetIngress(v []V1RouteIngress) {
	o.Ingress = v
}

func (o V1RouteStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1RouteStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ingress"] = o.Ingress
	return toSerialize, nil
}

type NullableV1RouteStatus struct {
	value *V1RouteStatus
	isSet bool
}

func (v NullableV1RouteStatus) Get() *V1RouteStatus {
	return v.value
}

func (v *NullableV1RouteStatus) Set(val *V1RouteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RouteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RouteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RouteStatus(val *V1RouteStatus) *NullableV1RouteStatus {
	return &NullableV1RouteStatus{value: val, isSet: true}
}

func (v NullableV1RouteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RouteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


