/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1TagReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1TagReference{}

// V1TagReference TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.
type V1TagReference struct {
	// Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.
	Annotations map[string]interface{} `json:"annotations"`
	From *V1ObjectReference `json:"from,omitempty"`
	// Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.
	Generation int64 `json:"generation"`
	ImportPolicy *V1TagImportPolicy `json:"importPolicy,omitempty"`
	// Name of the tag
	Name string `json:"name"`
	// Reference states if the tag will be imported. Default value is false, which means the tag will be imported.
	Reference *bool `json:"reference,omitempty"`
	ReferencePolicy *V1TagReferencePolicy `json:"referencePolicy,omitempty"`
}

// NewV1TagReference instantiates a new V1TagReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TagReference(annotations map[string]interface{}, generation int64, name string) *V1TagReference {
	this := V1TagReference{}
	this.Annotations = annotations
	this.Generation = generation
	this.Name = name
	return &this
}

// NewV1TagReferenceWithDefaults instantiates a new V1TagReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TagReferenceWithDefaults() *V1TagReference {
	this := V1TagReference{}
	return &this
}

// GetAnnotations returns the Annotations field value
func (o *V1TagReference) GetAnnotations() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
func (o *V1TagReference) GetAnnotationsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Annotations, true
}

// SetAnnotations sets field value
func (o *V1TagReference) SetAnnotations(v map[string]interface{}) {
	o.Annotations = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *V1TagReference) GetFrom() V1ObjectReference {
	if o == nil || IsNil(o.From) {
		var ret V1ObjectReference
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TagReference) GetFromOk() (*V1ObjectReference, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *V1TagReference) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given V1ObjectReference and assigns it to the From field.
func (o *V1TagReference) SetFrom(v V1ObjectReference) {
	o.From = &v
}

// GetGeneration returns the Generation field value
func (o *V1TagReference) GetGeneration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value
// and a boolean to check if the value has been set.
func (o *V1TagReference) GetGenerationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Generation, true
}

// SetGeneration sets field value
func (o *V1TagReference) SetGeneration(v int64) {
	o.Generation = v
}

// GetImportPolicy returns the ImportPolicy field value if set, zero value otherwise.
func (o *V1TagReference) GetImportPolicy() V1TagImportPolicy {
	if o == nil || IsNil(o.ImportPolicy) {
		var ret V1TagImportPolicy
		return ret
	}
	return *o.ImportPolicy
}

// GetImportPolicyOk returns a tuple with the ImportPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TagReference) GetImportPolicyOk() (*V1TagImportPolicy, bool) {
	if o == nil || IsNil(o.ImportPolicy) {
		return nil, false
	}
	return o.ImportPolicy, true
}

// HasImportPolicy returns a boolean if a field has been set.
func (o *V1TagReference) HasImportPolicy() bool {
	if o != nil && !IsNil(o.ImportPolicy) {
		return true
	}

	return false
}

// SetImportPolicy gets a reference to the given V1TagImportPolicy and assigns it to the ImportPolicy field.
func (o *V1TagReference) SetImportPolicy(v V1TagImportPolicy) {
	o.ImportPolicy = &v
}

// GetName returns the Name field value
func (o *V1TagReference) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1TagReference) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1TagReference) SetName(v string) {
	o.Name = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *V1TagReference) GetReference() bool {
	if o == nil || IsNil(o.Reference) {
		var ret bool
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TagReference) GetReferenceOk() (*bool, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *V1TagReference) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given bool and assigns it to the Reference field.
func (o *V1TagReference) SetReference(v bool) {
	o.Reference = &v
}

// GetReferencePolicy returns the ReferencePolicy field value if set, zero value otherwise.
func (o *V1TagReference) GetReferencePolicy() V1TagReferencePolicy {
	if o == nil || IsNil(o.ReferencePolicy) {
		var ret V1TagReferencePolicy
		return ret
	}
	return *o.ReferencePolicy
}

// GetReferencePolicyOk returns a tuple with the ReferencePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TagReference) GetReferencePolicyOk() (*V1TagReferencePolicy, bool) {
	if o == nil || IsNil(o.ReferencePolicy) {
		return nil, false
	}
	return o.ReferencePolicy, true
}

// HasReferencePolicy returns a boolean if a field has been set.
func (o *V1TagReference) HasReferencePolicy() bool {
	if o != nil && !IsNil(o.ReferencePolicy) {
		return true
	}

	return false
}

// SetReferencePolicy gets a reference to the given V1TagReferencePolicy and assigns it to the ReferencePolicy field.
func (o *V1TagReference) SetReferencePolicy(v V1TagReferencePolicy) {
	o.ReferencePolicy = &v
}

func (o V1TagReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1TagReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["annotations"] = o.Annotations
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	toSerialize["generation"] = o.Generation
	if !IsNil(o.ImportPolicy) {
		toSerialize["importPolicy"] = o.ImportPolicy
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.ReferencePolicy) {
		toSerialize["referencePolicy"] = o.ReferencePolicy
	}
	return toSerialize, nil
}

type NullableV1TagReference struct {
	value *V1TagReference
	isSet bool
}

func (v NullableV1TagReference) Get() *V1TagReference {
	return v.value
}

func (v *NullableV1TagReference) Set(val *V1TagReference) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TagReference) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TagReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TagReference(val *V1TagReference) *NullableV1TagReference {
	return &NullableV1TagReference{value: val, isSet: true}
}

func (v NullableV1TagReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TagReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


