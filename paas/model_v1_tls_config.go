/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1TLSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1TLSConfig{}

// V1TLSConfig TLSConfig defines config used to secure a route and provide termination
type V1TLSConfig struct {
	// caCertificate provides the cert authority certificate contents
	CaCertificate *string `json:"caCertificate,omitempty"`
	// certificate provides certificate contents
	Certificate *string `json:"certificate,omitempty"`
	// destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
	DestinationCACertificate *string `json:"destinationCACertificate,omitempty"`
	// insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
	InsecureEdgeTerminationPolicy *string `json:"insecureEdgeTerminationPolicy,omitempty"`
	// key provides key file contents
	Key *string `json:"key,omitempty"`
	// termination indicates termination type.
	Termination string `json:"termination"`
}

// NewV1TLSConfig instantiates a new V1TLSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TLSConfig(termination string) *V1TLSConfig {
	this := V1TLSConfig{}
	this.Termination = termination
	return &this
}

// NewV1TLSConfigWithDefaults instantiates a new V1TLSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TLSConfigWithDefaults() *V1TLSConfig {
	this := V1TLSConfig{}
	return &this
}

// GetCaCertificate returns the CaCertificate field value if set, zero value otherwise.
func (o *V1TLSConfig) GetCaCertificate() string {
	if o == nil || IsNil(o.CaCertificate) {
		var ret string
		return ret
	}
	return *o.CaCertificate
}

// GetCaCertificateOk returns a tuple with the CaCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetCaCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.CaCertificate) {
		return nil, false
	}
	return o.CaCertificate, true
}

// HasCaCertificate returns a boolean if a field has been set.
func (o *V1TLSConfig) HasCaCertificate() bool {
	if o != nil && !IsNil(o.CaCertificate) {
		return true
	}

	return false
}

// SetCaCertificate gets a reference to the given string and assigns it to the CaCertificate field.
func (o *V1TLSConfig) SetCaCertificate(v string) {
	o.CaCertificate = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *V1TLSConfig) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *V1TLSConfig) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *V1TLSConfig) SetCertificate(v string) {
	o.Certificate = &v
}

// GetDestinationCACertificate returns the DestinationCACertificate field value if set, zero value otherwise.
func (o *V1TLSConfig) GetDestinationCACertificate() string {
	if o == nil || IsNil(o.DestinationCACertificate) {
		var ret string
		return ret
	}
	return *o.DestinationCACertificate
}

// GetDestinationCACertificateOk returns a tuple with the DestinationCACertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetDestinationCACertificateOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationCACertificate) {
		return nil, false
	}
	return o.DestinationCACertificate, true
}

// HasDestinationCACertificate returns a boolean if a field has been set.
func (o *V1TLSConfig) HasDestinationCACertificate() bool {
	if o != nil && !IsNil(o.DestinationCACertificate) {
		return true
	}

	return false
}

// SetDestinationCACertificate gets a reference to the given string and assigns it to the DestinationCACertificate field.
func (o *V1TLSConfig) SetDestinationCACertificate(v string) {
	o.DestinationCACertificate = &v
}

// GetInsecureEdgeTerminationPolicy returns the InsecureEdgeTerminationPolicy field value if set, zero value otherwise.
func (o *V1TLSConfig) GetInsecureEdgeTerminationPolicy() string {
	if o == nil || IsNil(o.InsecureEdgeTerminationPolicy) {
		var ret string
		return ret
	}
	return *o.InsecureEdgeTerminationPolicy
}

// GetInsecureEdgeTerminationPolicyOk returns a tuple with the InsecureEdgeTerminationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetInsecureEdgeTerminationPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.InsecureEdgeTerminationPolicy) {
		return nil, false
	}
	return o.InsecureEdgeTerminationPolicy, true
}

// HasInsecureEdgeTerminationPolicy returns a boolean if a field has been set.
func (o *V1TLSConfig) HasInsecureEdgeTerminationPolicy() bool {
	if o != nil && !IsNil(o.InsecureEdgeTerminationPolicy) {
		return true
	}

	return false
}

// SetInsecureEdgeTerminationPolicy gets a reference to the given string and assigns it to the InsecureEdgeTerminationPolicy field.
func (o *V1TLSConfig) SetInsecureEdgeTerminationPolicy(v string) {
	o.InsecureEdgeTerminationPolicy = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *V1TLSConfig) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *V1TLSConfig) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *V1TLSConfig) SetKey(v string) {
	o.Key = &v
}

// GetTermination returns the Termination field value
func (o *V1TLSConfig) GetTermination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Termination
}

// GetTerminationOk returns a tuple with the Termination field value
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetTerminationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Termination, true
}

// SetTermination sets field value
func (o *V1TLSConfig) SetTermination(v string) {
	o.Termination = v
}

func (o V1TLSConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1TLSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaCertificate) {
		toSerialize["caCertificate"] = o.CaCertificate
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.DestinationCACertificate) {
		toSerialize["destinationCACertificate"] = o.DestinationCACertificate
	}
	if !IsNil(o.InsecureEdgeTerminationPolicy) {
		toSerialize["insecureEdgeTerminationPolicy"] = o.InsecureEdgeTerminationPolicy
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["termination"] = o.Termination
	return toSerialize, nil
}

type NullableV1TLSConfig struct {
	value *V1TLSConfig
	isSet bool
}

func (v NullableV1TLSConfig) Get() *V1TLSConfig {
	return v.value
}

func (v *NullableV1TLSConfig) Set(val *V1TLSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TLSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TLSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TLSConfig(val *V1TLSConfig) *NullableV1TLSConfig {
	return &NullableV1TLSConfig{value: val, isSet: true}
}

func (v NullableV1TLSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TLSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


