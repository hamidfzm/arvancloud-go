/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1SourceBuildStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SourceBuildStrategy{}

// V1SourceBuildStrategy SourceBuildStrategy defines input parameters specific to an Source build.
type V1SourceBuildStrategy struct {
	// env contains additional environment variables you want to pass into a builder container.
	Env []V1EnvVar `json:"env,omitempty"`
	// forcePull describes if the builder should pull the images from registry prior to building.
	ForcePull *bool `json:"forcePull,omitempty"`
	From V1ObjectReference `json:"from"`
	// incremental flag forces the Source build to do incremental builds if true.
	Incremental *bool `json:"incremental,omitempty"`
	PullSecret *V1LocalObjectReference `json:"pullSecret,omitempty"`
	// scripts is the location of Source scripts
	Scripts *string `json:"scripts,omitempty"`
}

// NewV1SourceBuildStrategy instantiates a new V1SourceBuildStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SourceBuildStrategy(from V1ObjectReference) *V1SourceBuildStrategy {
	this := V1SourceBuildStrategy{}
	this.From = from
	return &this
}

// NewV1SourceBuildStrategyWithDefaults instantiates a new V1SourceBuildStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SourceBuildStrategyWithDefaults() *V1SourceBuildStrategy {
	this := V1SourceBuildStrategy{}
	return &this
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *V1SourceBuildStrategy) GetEnv() []V1EnvVar {
	if o == nil || IsNil(o.Env) {
		var ret []V1EnvVar
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceBuildStrategy) GetEnvOk() ([]V1EnvVar, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *V1SourceBuildStrategy) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []V1EnvVar and assigns it to the Env field.
func (o *V1SourceBuildStrategy) SetEnv(v []V1EnvVar) {
	o.Env = v
}

// GetForcePull returns the ForcePull field value if set, zero value otherwise.
func (o *V1SourceBuildStrategy) GetForcePull() bool {
	if o == nil || IsNil(o.ForcePull) {
		var ret bool
		return ret
	}
	return *o.ForcePull
}

// GetForcePullOk returns a tuple with the ForcePull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceBuildStrategy) GetForcePullOk() (*bool, bool) {
	if o == nil || IsNil(o.ForcePull) {
		return nil, false
	}
	return o.ForcePull, true
}

// HasForcePull returns a boolean if a field has been set.
func (o *V1SourceBuildStrategy) HasForcePull() bool {
	if o != nil && !IsNil(o.ForcePull) {
		return true
	}

	return false
}

// SetForcePull gets a reference to the given bool and assigns it to the ForcePull field.
func (o *V1SourceBuildStrategy) SetForcePull(v bool) {
	o.ForcePull = &v
}

// GetFrom returns the From field value
func (o *V1SourceBuildStrategy) GetFrom() V1ObjectReference {
	if o == nil {
		var ret V1ObjectReference
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *V1SourceBuildStrategy) GetFromOk() (*V1ObjectReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *V1SourceBuildStrategy) SetFrom(v V1ObjectReference) {
	o.From = v
}

// GetIncremental returns the Incremental field value if set, zero value otherwise.
func (o *V1SourceBuildStrategy) GetIncremental() bool {
	if o == nil || IsNil(o.Incremental) {
		var ret bool
		return ret
	}
	return *o.Incremental
}

// GetIncrementalOk returns a tuple with the Incremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceBuildStrategy) GetIncrementalOk() (*bool, bool) {
	if o == nil || IsNil(o.Incremental) {
		return nil, false
	}
	return o.Incremental, true
}

// HasIncremental returns a boolean if a field has been set.
func (o *V1SourceBuildStrategy) HasIncremental() bool {
	if o != nil && !IsNil(o.Incremental) {
		return true
	}

	return false
}

// SetIncremental gets a reference to the given bool and assigns it to the Incremental field.
func (o *V1SourceBuildStrategy) SetIncremental(v bool) {
	o.Incremental = &v
}

// GetPullSecret returns the PullSecret field value if set, zero value otherwise.
func (o *V1SourceBuildStrategy) GetPullSecret() V1LocalObjectReference {
	if o == nil || IsNil(o.PullSecret) {
		var ret V1LocalObjectReference
		return ret
	}
	return *o.PullSecret
}

// GetPullSecretOk returns a tuple with the PullSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceBuildStrategy) GetPullSecretOk() (*V1LocalObjectReference, bool) {
	if o == nil || IsNil(o.PullSecret) {
		return nil, false
	}
	return o.PullSecret, true
}

// HasPullSecret returns a boolean if a field has been set.
func (o *V1SourceBuildStrategy) HasPullSecret() bool {
	if o != nil && !IsNil(o.PullSecret) {
		return true
	}

	return false
}

// SetPullSecret gets a reference to the given V1LocalObjectReference and assigns it to the PullSecret field.
func (o *V1SourceBuildStrategy) SetPullSecret(v V1LocalObjectReference) {
	o.PullSecret = &v
}

// GetScripts returns the Scripts field value if set, zero value otherwise.
func (o *V1SourceBuildStrategy) GetScripts() string {
	if o == nil || IsNil(o.Scripts) {
		var ret string
		return ret
	}
	return *o.Scripts
}

// GetScriptsOk returns a tuple with the Scripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceBuildStrategy) GetScriptsOk() (*string, bool) {
	if o == nil || IsNil(o.Scripts) {
		return nil, false
	}
	return o.Scripts, true
}

// HasScripts returns a boolean if a field has been set.
func (o *V1SourceBuildStrategy) HasScripts() bool {
	if o != nil && !IsNil(o.Scripts) {
		return true
	}

	return false
}

// SetScripts gets a reference to the given string and assigns it to the Scripts field.
func (o *V1SourceBuildStrategy) SetScripts(v string) {
	o.Scripts = &v
}

func (o V1SourceBuildStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SourceBuildStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.ForcePull) {
		toSerialize["forcePull"] = o.ForcePull
	}
	toSerialize["from"] = o.From
	if !IsNil(o.Incremental) {
		toSerialize["incremental"] = o.Incremental
	}
	if !IsNil(o.PullSecret) {
		toSerialize["pullSecret"] = o.PullSecret
	}
	if !IsNil(o.Scripts) {
		toSerialize["scripts"] = o.Scripts
	}
	return toSerialize, nil
}

type NullableV1SourceBuildStrategy struct {
	value *V1SourceBuildStrategy
	isSet bool
}

func (v NullableV1SourceBuildStrategy) Get() *V1SourceBuildStrategy {
	return v.value
}

func (v *NullableV1SourceBuildStrategy) Set(val *V1SourceBuildStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SourceBuildStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SourceBuildStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SourceBuildStrategy(val *V1SourceBuildStrategy) *NullableV1SourceBuildStrategy {
	return &NullableV1SourceBuildStrategy{value: val, isSet: true}
}

func (v NullableV1SourceBuildStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SourceBuildStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


