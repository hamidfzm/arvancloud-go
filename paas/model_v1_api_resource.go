/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1APIResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1APIResource{}

// V1APIResource APIResource specifies the name of a resource and whether it is namespaced.
type V1APIResource struct {
	// categories is a list of the grouped resources this resource belongs to (e.g. 'all')
	Categories []string `json:"categories,omitempty"`
	// group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".
	Group *string `json:"group,omitempty"`
	// kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
	Kind string `json:"kind"`
	// name is the plural name of the resource.
	Name string `json:"name"`
	// namespaced indicates if a resource is namespaced or not.
	Namespaced bool `json:"namespaced"`
	// shortNames is a list of suggested short names of the resource.
	ShortNames []string `json:"shortNames,omitempty"`
	// singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
	SingularName string `json:"singularName"`
	// verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
	Verbs []string `json:"verbs"`
	// version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".
	Version *string `json:"version,omitempty"`
}

// NewV1APIResource instantiates a new V1APIResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1APIResource(kind string, name string, namespaced bool, singularName string, verbs []string) *V1APIResource {
	this := V1APIResource{}
	this.Kind = kind
	this.Name = name
	this.Namespaced = namespaced
	this.SingularName = singularName
	this.Verbs = verbs
	return &this
}

// NewV1APIResourceWithDefaults instantiates a new V1APIResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1APIResourceWithDefaults() *V1APIResource {
	this := V1APIResource{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *V1APIResource) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *V1APIResource) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *V1APIResource) SetCategories(v []string) {
	o.Categories = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V1APIResource) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V1APIResource) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *V1APIResource) SetGroup(v string) {
	o.Group = &v
}

// GetKind returns the Kind field value
func (o *V1APIResource) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *V1APIResource) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *V1APIResource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1APIResource) SetName(v string) {
	o.Name = v
}

// GetNamespaced returns the Namespaced field value
func (o *V1APIResource) GetNamespaced() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Namespaced
}

// GetNamespacedOk returns a tuple with the Namespaced field value
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetNamespacedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespaced, true
}

// SetNamespaced sets field value
func (o *V1APIResource) SetNamespaced(v bool) {
	o.Namespaced = v
}

// GetShortNames returns the ShortNames field value if set, zero value otherwise.
func (o *V1APIResource) GetShortNames() []string {
	if o == nil || IsNil(o.ShortNames) {
		var ret []string
		return ret
	}
	return o.ShortNames
}

// GetShortNamesOk returns a tuple with the ShortNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetShortNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ShortNames) {
		return nil, false
	}
	return o.ShortNames, true
}

// HasShortNames returns a boolean if a field has been set.
func (o *V1APIResource) HasShortNames() bool {
	if o != nil && !IsNil(o.ShortNames) {
		return true
	}

	return false
}

// SetShortNames gets a reference to the given []string and assigns it to the ShortNames field.
func (o *V1APIResource) SetShortNames(v []string) {
	o.ShortNames = v
}

// GetSingularName returns the SingularName field value
func (o *V1APIResource) GetSingularName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SingularName
}

// GetSingularNameOk returns a tuple with the SingularName field value
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetSingularNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SingularName, true
}

// SetSingularName sets field value
func (o *V1APIResource) SetSingularName(v string) {
	o.SingularName = v
}

// GetVerbs returns the Verbs field value
func (o *V1APIResource) GetVerbs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Verbs
}

// GetVerbsOk returns a tuple with the Verbs field value
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetVerbsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Verbs, true
}

// SetVerbs sets field value
func (o *V1APIResource) SetVerbs(v []string) {
	o.Verbs = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V1APIResource) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1APIResource) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V1APIResource) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *V1APIResource) SetVersion(v string) {
	o.Version = &v
}

func (o V1APIResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1APIResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	toSerialize["namespaced"] = o.Namespaced
	if !IsNil(o.ShortNames) {
		toSerialize["shortNames"] = o.ShortNames
	}
	toSerialize["singularName"] = o.SingularName
	toSerialize["verbs"] = o.Verbs
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableV1APIResource struct {
	value *V1APIResource
	isSet bool
}

func (v NullableV1APIResource) Get() *V1APIResource {
	return v.value
}

func (v *NullableV1APIResource) Set(val *V1APIResource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1APIResource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1APIResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1APIResource(val *V1APIResource) *NullableV1APIResource {
	return &NullableV1APIResource{value: val, isSet: true}
}

func (v NullableV1APIResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1APIResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


