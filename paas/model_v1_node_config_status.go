/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1NodeConfigStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NodeConfigStatus{}

// V1NodeConfigStatus NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
type V1NodeConfigStatus struct {
	Active *V1NodeConfigSource `json:"active,omitempty"`
	Assigned *V1NodeConfigSource `json:"assigned,omitempty"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
	Error *string `json:"error,omitempty"`
	LastKnownGood *V1NodeConfigSource `json:"lastKnownGood,omitempty"`
}

// NewV1NodeConfigStatus instantiates a new V1NodeConfigStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NodeConfigStatus() *V1NodeConfigStatus {
	this := V1NodeConfigStatus{}
	return &this
}

// NewV1NodeConfigStatusWithDefaults instantiates a new V1NodeConfigStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NodeConfigStatusWithDefaults() *V1NodeConfigStatus {
	this := V1NodeConfigStatus{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *V1NodeConfigStatus) GetActive() V1NodeConfigSource {
	if o == nil || IsNil(o.Active) {
		var ret V1NodeConfigSource
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeConfigStatus) GetActiveOk() (*V1NodeConfigSource, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *V1NodeConfigStatus) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given V1NodeConfigSource and assigns it to the Active field.
func (o *V1NodeConfigStatus) SetActive(v V1NodeConfigSource) {
	o.Active = &v
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *V1NodeConfigStatus) GetAssigned() V1NodeConfigSource {
	if o == nil || IsNil(o.Assigned) {
		var ret V1NodeConfigSource
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeConfigStatus) GetAssignedOk() (*V1NodeConfigSource, bool) {
	if o == nil || IsNil(o.Assigned) {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *V1NodeConfigStatus) HasAssigned() bool {
	if o != nil && !IsNil(o.Assigned) {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given V1NodeConfigSource and assigns it to the Assigned field.
func (o *V1NodeConfigStatus) SetAssigned(v V1NodeConfigSource) {
	o.Assigned = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *V1NodeConfigStatus) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeConfigStatus) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *V1NodeConfigStatus) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *V1NodeConfigStatus) SetError(v string) {
	o.Error = &v
}

// GetLastKnownGood returns the LastKnownGood field value if set, zero value otherwise.
func (o *V1NodeConfigStatus) GetLastKnownGood() V1NodeConfigSource {
	if o == nil || IsNil(o.LastKnownGood) {
		var ret V1NodeConfigSource
		return ret
	}
	return *o.LastKnownGood
}

// GetLastKnownGoodOk returns a tuple with the LastKnownGood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeConfigStatus) GetLastKnownGoodOk() (*V1NodeConfigSource, bool) {
	if o == nil || IsNil(o.LastKnownGood) {
		return nil, false
	}
	return o.LastKnownGood, true
}

// HasLastKnownGood returns a boolean if a field has been set.
func (o *V1NodeConfigStatus) HasLastKnownGood() bool {
	if o != nil && !IsNil(o.LastKnownGood) {
		return true
	}

	return false
}

// SetLastKnownGood gets a reference to the given V1NodeConfigSource and assigns it to the LastKnownGood field.
func (o *V1NodeConfigStatus) SetLastKnownGood(v V1NodeConfigSource) {
	o.LastKnownGood = &v
}

func (o V1NodeConfigStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NodeConfigStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Assigned) {
		toSerialize["assigned"] = o.Assigned
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.LastKnownGood) {
		toSerialize["lastKnownGood"] = o.LastKnownGood
	}
	return toSerialize, nil
}

type NullableV1NodeConfigStatus struct {
	value *V1NodeConfigStatus
	isSet bool
}

func (v NullableV1NodeConfigStatus) Get() *V1NodeConfigStatus {
	return v.value
}

func (v *NullableV1NodeConfigStatus) Set(val *V1NodeConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NodeConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NodeConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NodeConfigStatus(val *V1NodeConfigStatus) *NullableV1NodeConfigStatus {
	return &NullableV1NodeConfigStatus{value: val, isSet: true}
}

func (v NullableV1NodeConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NodeConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


