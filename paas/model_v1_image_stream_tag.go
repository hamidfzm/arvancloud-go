/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageStreamTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageStreamTag{}

// V1ImageStreamTag ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream.
type V1ImageStreamTag struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// conditions is an array of conditions that apply to the image stream tag.
	Conditions []V1TagEventCondition `json:"conditions,omitempty"`
	// generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or conditions will be filled out indicating any error.
	Generation int64 `json:"generation"`
	Image V1Image `json:"image"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	LookupPolicy V1ImageLookupPolicy `json:"lookupPolicy"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	Tag V1TagReference `json:"tag"`
}

// NewV1ImageStreamTag instantiates a new V1ImageStreamTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageStreamTag(generation int64, image V1Image, lookupPolicy V1ImageLookupPolicy, tag V1TagReference) *V1ImageStreamTag {
	this := V1ImageStreamTag{}
	this.Generation = generation
	this.Image = image
	this.LookupPolicy = lookupPolicy
	this.Tag = tag
	return &this
}

// NewV1ImageStreamTagWithDefaults instantiates a new V1ImageStreamTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageStreamTagWithDefaults() *V1ImageStreamTag {
	this := V1ImageStreamTag{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1ImageStreamTag) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1ImageStreamTag) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1ImageStreamTag) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1ImageStreamTag) GetConditions() []V1TagEventCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1TagEventCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetConditionsOk() ([]V1TagEventCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1ImageStreamTag) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1TagEventCondition and assigns it to the Conditions field.
func (o *V1ImageStreamTag) SetConditions(v []V1TagEventCondition) {
	o.Conditions = v
}

// GetGeneration returns the Generation field value
func (o *V1ImageStreamTag) GetGeneration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetGenerationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Generation, true
}

// SetGeneration sets field value
func (o *V1ImageStreamTag) SetGeneration(v int64) {
	o.Generation = v
}

// GetImage returns the Image field value
func (o *V1ImageStreamTag) GetImage() V1Image {
	if o == nil {
		var ret V1Image
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetImageOk() (*V1Image, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *V1ImageStreamTag) SetImage(v V1Image) {
	o.Image = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1ImageStreamTag) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1ImageStreamTag) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1ImageStreamTag) SetKind(v string) {
	o.Kind = &v
}

// GetLookupPolicy returns the LookupPolicy field value
func (o *V1ImageStreamTag) GetLookupPolicy() V1ImageLookupPolicy {
	if o == nil {
		var ret V1ImageLookupPolicy
		return ret
	}

	return o.LookupPolicy
}

// GetLookupPolicyOk returns a tuple with the LookupPolicy field value
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetLookupPolicyOk() (*V1ImageLookupPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LookupPolicy, true
}

// SetLookupPolicy sets field value
func (o *V1ImageStreamTag) SetLookupPolicy(v V1ImageLookupPolicy) {
	o.LookupPolicy = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1ImageStreamTag) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1ImageStreamTag) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1ImageStreamTag) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetTag returns the Tag field value
func (o *V1ImageStreamTag) GetTag() V1TagReference {
	if o == nil {
		var ret V1TagReference
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *V1ImageStreamTag) GetTagOk() (*V1TagReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *V1ImageStreamTag) SetTag(v V1TagReference) {
	o.Tag = v
}

func (o V1ImageStreamTag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageStreamTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["generation"] = o.Generation
	toSerialize["image"] = o.Image
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	toSerialize["lookupPolicy"] = o.LookupPolicy
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

type NullableV1ImageStreamTag struct {
	value *V1ImageStreamTag
	isSet bool
}

func (v NullableV1ImageStreamTag) Get() *V1ImageStreamTag {
	return v.value
}

func (v *NullableV1ImageStreamTag) Set(val *V1ImageStreamTag) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageStreamTag) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageStreamTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageStreamTag(val *V1ImageStreamTag) *NullableV1ImageStreamTag {
	return &NullableV1ImageStreamTag{value: val, isSet: true}
}

func (v NullableV1ImageStreamTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageStreamTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


