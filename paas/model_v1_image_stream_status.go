/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageStreamStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageStreamStatus{}

// V1ImageStreamStatus ImageStreamStatus contains information about the state of this image stream.
type V1ImageStreamStatus struct {
	// Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.
	Tags []V1NamedTagEventList `json:"tags,omitempty"`
	// DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located
	DockerImageRepository string `json:"dockerImageRepository"`
	// PublicDockerImageRepository represents the public location from where the image can be pulled outside the cluster. This field may be empty if the administrator has not exposed the integrated registry externally.
	PublicDockerImageRepository *string `json:"publicDockerImageRepository,omitempty"`
}

// NewV1ImageStreamStatus instantiates a new V1ImageStreamStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageStreamStatus(dockerImageRepository string) *V1ImageStreamStatus {
	this := V1ImageStreamStatus{}
	this.DockerImageRepository = dockerImageRepository
	return &this
}

// NewV1ImageStreamStatusWithDefaults instantiates a new V1ImageStreamStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageStreamStatusWithDefaults() *V1ImageStreamStatus {
	this := V1ImageStreamStatus{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *V1ImageStreamStatus) GetTags() []V1NamedTagEventList {
	if o == nil || IsNil(o.Tags) {
		var ret []V1NamedTagEventList
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamStatus) GetTagsOk() ([]V1NamedTagEventList, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *V1ImageStreamStatus) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []V1NamedTagEventList and assigns it to the Tags field.
func (o *V1ImageStreamStatus) SetTags(v []V1NamedTagEventList) {
	o.Tags = v
}

// GetDockerImageRepository returns the DockerImageRepository field value
func (o *V1ImageStreamStatus) GetDockerImageRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DockerImageRepository
}

// GetDockerImageRepositoryOk returns a tuple with the DockerImageRepository field value
// and a boolean to check if the value has been set.
func (o *V1ImageStreamStatus) GetDockerImageRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DockerImageRepository, true
}

// SetDockerImageRepository sets field value
func (o *V1ImageStreamStatus) SetDockerImageRepository(v string) {
	o.DockerImageRepository = v
}

// GetPublicDockerImageRepository returns the PublicDockerImageRepository field value if set, zero value otherwise.
func (o *V1ImageStreamStatus) GetPublicDockerImageRepository() string {
	if o == nil || IsNil(o.PublicDockerImageRepository) {
		var ret string
		return ret
	}
	return *o.PublicDockerImageRepository
}

// GetPublicDockerImageRepositoryOk returns a tuple with the PublicDockerImageRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ImageStreamStatus) GetPublicDockerImageRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.PublicDockerImageRepository) {
		return nil, false
	}
	return o.PublicDockerImageRepository, true
}

// HasPublicDockerImageRepository returns a boolean if a field has been set.
func (o *V1ImageStreamStatus) HasPublicDockerImageRepository() bool {
	if o != nil && !IsNil(o.PublicDockerImageRepository) {
		return true
	}

	return false
}

// SetPublicDockerImageRepository gets a reference to the given string and assigns it to the PublicDockerImageRepository field.
func (o *V1ImageStreamStatus) SetPublicDockerImageRepository(v string) {
	o.PublicDockerImageRepository = &v
}

func (o V1ImageStreamStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageStreamStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["dockerImageRepository"] = o.DockerImageRepository
	if !IsNil(o.PublicDockerImageRepository) {
		toSerialize["publicDockerImageRepository"] = o.PublicDockerImageRepository
	}
	return toSerialize, nil
}

type NullableV1ImageStreamStatus struct {
	value *V1ImageStreamStatus
	isSet bool
}

func (v NullableV1ImageStreamStatus) Get() *V1ImageStreamStatus {
	return v.value
}

func (v *NullableV1ImageStreamStatus) Set(val *V1ImageStreamStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageStreamStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageStreamStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageStreamStatus(val *V1ImageStreamStatus) *NullableV1ImageStreamStatus {
	return &NullableV1ImageStreamStatus{value: val, isSet: true}
}

func (v NullableV1ImageStreamStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageStreamStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


