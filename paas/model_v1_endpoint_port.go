/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1EndpointPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1EndpointPort{}

// V1EndpointPort EndpointPort is a tuple that describes a single port.
type V1EndpointPort struct {
	// The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.
	Name *string `json:"name,omitempty"`
	// The port number of the endpoint.
	Port int32 `json:"port"`
	// The IP protocol for this port. Must be UDP or TCP. Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
}

// NewV1EndpointPort instantiates a new V1EndpointPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EndpointPort(port int32) *V1EndpointPort {
	this := V1EndpointPort{}
	this.Port = port
	return &this
}

// NewV1EndpointPortWithDefaults instantiates a new V1EndpointPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EndpointPortWithDefaults() *V1EndpointPort {
	this := V1EndpointPort{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1EndpointPort) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EndpointPort) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1EndpointPort) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1EndpointPort) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value
func (o *V1EndpointPort) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *V1EndpointPort) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *V1EndpointPort) SetPort(v int32) {
	o.Port = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *V1EndpointPort) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EndpointPort) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *V1EndpointPort) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *V1EndpointPort) SetProtocol(v string) {
	o.Protocol = &v
}

func (o V1EndpointPort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1EndpointPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["port"] = o.Port
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	return toSerialize, nil
}

type NullableV1EndpointPort struct {
	value *V1EndpointPort
	isSet bool
}

func (v NullableV1EndpointPort) Get() *V1EndpointPort {
	return v.value
}

func (v *NullableV1EndpointPort) Set(val *V1EndpointPort) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EndpointPort) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EndpointPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EndpointPort(val *V1EndpointPort) *NullableV1EndpointPort {
	return &NullableV1EndpointPort{value: val, isSet: true}
}

func (v NullableV1EndpointPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EndpointPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


