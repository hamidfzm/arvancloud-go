/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1NamedTagEventList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NamedTagEventList{}

// V1NamedTagEventList NamedTagEventList relates a tag to its image history.
type V1NamedTagEventList struct {
	// Conditions is an array of conditions that apply to the tag event list.
	Conditions []V1TagEventCondition `json:"conditions,omitempty"`
	// Standard object's metadata.
	Items []V1TagEvent `json:"items"`
	// Tag is the tag for which the history is recorded
	Tag string `json:"tag"`
}

// NewV1NamedTagEventList instantiates a new V1NamedTagEventList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NamedTagEventList(items []V1TagEvent, tag string) *V1NamedTagEventList {
	this := V1NamedTagEventList{}
	this.Items = items
	this.Tag = tag
	return &this
}

// NewV1NamedTagEventListWithDefaults instantiates a new V1NamedTagEventList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NamedTagEventListWithDefaults() *V1NamedTagEventList {
	this := V1NamedTagEventList{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1NamedTagEventList) GetConditions() []V1TagEventCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1TagEventCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NamedTagEventList) GetConditionsOk() ([]V1TagEventCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1NamedTagEventList) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1TagEventCondition and assigns it to the Conditions field.
func (o *V1NamedTagEventList) SetConditions(v []V1TagEventCondition) {
	o.Conditions = v
}

// GetItems returns the Items field value
func (o *V1NamedTagEventList) GetItems() []V1TagEvent {
	if o == nil {
		var ret []V1TagEvent
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *V1NamedTagEventList) GetItemsOk() ([]V1TagEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *V1NamedTagEventList) SetItems(v []V1TagEvent) {
	o.Items = v
}

// GetTag returns the Tag field value
func (o *V1NamedTagEventList) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *V1NamedTagEventList) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *V1NamedTagEventList) SetTag(v string) {
	o.Tag = v
}

func (o V1NamedTagEventList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NamedTagEventList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["items"] = o.Items
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

type NullableV1NamedTagEventList struct {
	value *V1NamedTagEventList
	isSet bool
}

func (v NullableV1NamedTagEventList) Get() *V1NamedTagEventList {
	return v.value
}

func (v *NullableV1NamedTagEventList) Set(val *V1NamedTagEventList) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NamedTagEventList) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NamedTagEventList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NamedTagEventList(val *V1NamedTagEventList) *NullableV1NamedTagEventList {
	return &NullableV1NamedTagEventList{value: val, isSet: true}
}

func (v NullableV1NamedTagEventList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NamedTagEventList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


