/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1GitBuildSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GitBuildSource{}

// V1GitBuildSource GitBuildSource defines the parameters of a Git SCM
type V1GitBuildSource struct {
	// httpProxy is a proxy used to reach the git repository over http
	HttpProxy *string `json:"httpProxy,omitempty"`
	// httpsProxy is a proxy used to reach the git repository over https
	HttpsProxy *string `json:"httpsProxy,omitempty"`
	// noProxy is the list of domains for which the proxy should not be used
	NoProxy *string `json:"noProxy,omitempty"`
	// ref is the branch/tag/ref to build.
	Ref *string `json:"ref,omitempty"`
	// uri points to the source that will be built. The structure of the source will depend on the type of build to run
	Uri string `json:"uri"`
}

// NewV1GitBuildSource instantiates a new V1GitBuildSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GitBuildSource(uri string) *V1GitBuildSource {
	this := V1GitBuildSource{}
	this.Uri = uri
	return &this
}

// NewV1GitBuildSourceWithDefaults instantiates a new V1GitBuildSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GitBuildSourceWithDefaults() *V1GitBuildSource {
	this := V1GitBuildSource{}
	return &this
}

// GetHttpProxy returns the HttpProxy field value if set, zero value otherwise.
func (o *V1GitBuildSource) GetHttpProxy() string {
	if o == nil || IsNil(o.HttpProxy) {
		var ret string
		return ret
	}
	return *o.HttpProxy
}

// GetHttpProxyOk returns a tuple with the HttpProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GitBuildSource) GetHttpProxyOk() (*string, bool) {
	if o == nil || IsNil(o.HttpProxy) {
		return nil, false
	}
	return o.HttpProxy, true
}

// HasHttpProxy returns a boolean if a field has been set.
func (o *V1GitBuildSource) HasHttpProxy() bool {
	if o != nil && !IsNil(o.HttpProxy) {
		return true
	}

	return false
}

// SetHttpProxy gets a reference to the given string and assigns it to the HttpProxy field.
func (o *V1GitBuildSource) SetHttpProxy(v string) {
	o.HttpProxy = &v
}

// GetHttpsProxy returns the HttpsProxy field value if set, zero value otherwise.
func (o *V1GitBuildSource) GetHttpsProxy() string {
	if o == nil || IsNil(o.HttpsProxy) {
		var ret string
		return ret
	}
	return *o.HttpsProxy
}

// GetHttpsProxyOk returns a tuple with the HttpsProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GitBuildSource) GetHttpsProxyOk() (*string, bool) {
	if o == nil || IsNil(o.HttpsProxy) {
		return nil, false
	}
	return o.HttpsProxy, true
}

// HasHttpsProxy returns a boolean if a field has been set.
func (o *V1GitBuildSource) HasHttpsProxy() bool {
	if o != nil && !IsNil(o.HttpsProxy) {
		return true
	}

	return false
}

// SetHttpsProxy gets a reference to the given string and assigns it to the HttpsProxy field.
func (o *V1GitBuildSource) SetHttpsProxy(v string) {
	o.HttpsProxy = &v
}

// GetNoProxy returns the NoProxy field value if set, zero value otherwise.
func (o *V1GitBuildSource) GetNoProxy() string {
	if o == nil || IsNil(o.NoProxy) {
		var ret string
		return ret
	}
	return *o.NoProxy
}

// GetNoProxyOk returns a tuple with the NoProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GitBuildSource) GetNoProxyOk() (*string, bool) {
	if o == nil || IsNil(o.NoProxy) {
		return nil, false
	}
	return o.NoProxy, true
}

// HasNoProxy returns a boolean if a field has been set.
func (o *V1GitBuildSource) HasNoProxy() bool {
	if o != nil && !IsNil(o.NoProxy) {
		return true
	}

	return false
}

// SetNoProxy gets a reference to the given string and assigns it to the NoProxy field.
func (o *V1GitBuildSource) SetNoProxy(v string) {
	o.NoProxy = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *V1GitBuildSource) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GitBuildSource) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *V1GitBuildSource) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *V1GitBuildSource) SetRef(v string) {
	o.Ref = &v
}

// GetUri returns the Uri field value
func (o *V1GitBuildSource) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *V1GitBuildSource) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *V1GitBuildSource) SetUri(v string) {
	o.Uri = v
}

func (o V1GitBuildSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GitBuildSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HttpProxy) {
		toSerialize["httpProxy"] = o.HttpProxy
	}
	if !IsNil(o.HttpsProxy) {
		toSerialize["httpsProxy"] = o.HttpsProxy
	}
	if !IsNil(o.NoProxy) {
		toSerialize["noProxy"] = o.NoProxy
	}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

type NullableV1GitBuildSource struct {
	value *V1GitBuildSource
	isSet bool
}

func (v NullableV1GitBuildSource) Get() *V1GitBuildSource {
	return v.value
}

func (v *NullableV1GitBuildSource) Set(val *V1GitBuildSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GitBuildSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GitBuildSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GitBuildSource(val *V1GitBuildSource) *NullableV1GitBuildSource {
	return &NullableV1GitBuildSource{value: val, isSet: true}
}

func (v NullableV1GitBuildSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GitBuildSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


