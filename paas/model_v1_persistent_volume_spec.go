/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1PersistentVolumeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PersistentVolumeSpec{}

// V1PersistentVolumeSpec PersistentVolumeSpec is the specification of a persistent volume.
type V1PersistentVolumeSpec struct {
	// AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
	AccessModes []V1PersistentVolumeAccessMode `json:"accessModes,omitempty"`
	AwsElasticBlockStore *V1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore,omitempty"`
	AzureDisk *V1AzureDiskVolumeSource `json:"azureDisk,omitempty"`
	AzureFile *V1AzureFilePersistentVolumeSource `json:"azureFile,omitempty"`
	// A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
	Capacity map[string]interface{} `json:"capacity,omitempty"`
	Cephfs *V1CephFSPersistentVolumeSource `json:"cephfs,omitempty"`
	Cinder *V1CinderPersistentVolumeSource `json:"cinder,omitempty"`
	ClaimRef *V1ObjectReference `json:"claimRef,omitempty"`
	Csi *V1CSIPersistentVolumeSource `json:"csi,omitempty"`
	Fc *V1FCVolumeSource `json:"fc,omitempty"`
	FlexVolume *V1FlexPersistentVolumeSource `json:"flexVolume,omitempty"`
	Flocker *V1FlockerVolumeSource `json:"flocker,omitempty"`
	GcePersistentDisk *V1GCEPersistentDiskVolumeSource `json:"gcePersistentDisk,omitempty"`
	Glusterfs *V1GlusterfsVolumeSource `json:"glusterfs,omitempty"`
	HostPath *V1HostPathVolumeSource `json:"hostPath,omitempty"`
	Iscsi *V1ISCSIPersistentVolumeSource `json:"iscsi,omitempty"`
	Local *V1LocalVolumeSource `json:"local,omitempty"`
	// A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
	MountOptions []string `json:"mountOptions,omitempty"`
	Nfs *V1NFSVolumeSource `json:"nfs,omitempty"`
	NodeAffinity *V1VolumeNodeAffinity `json:"nodeAffinity,omitempty"`
	// What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
	PersistentVolumeReclaimPolicy *string `json:"persistentVolumeReclaimPolicy,omitempty"`
	PhotonPersistentDisk *V1PhotonPersistentDiskVolumeSource `json:"photonPersistentDisk,omitempty"`
	PortworxVolume *V1PortworxVolumeSource `json:"portworxVolume,omitempty"`
	Quobyte *V1QuobyteVolumeSource `json:"quobyte,omitempty"`
	Rbd *V1RBDPersistentVolumeSource `json:"rbd,omitempty"`
	ScaleIO *V1ScaleIOPersistentVolumeSource `json:"scaleIO,omitempty"`
	// Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
	StorageClassName *string `json:"storageClassName,omitempty"`
	Storageos *V1StorageOSPersistentVolumeSource `json:"storageos,omitempty"`
	VolumeMode *V1PersistentVolumeMode `json:"volumeMode,omitempty"`
	VsphereVolume *V1VsphereVirtualDiskVolumeSource `json:"vsphereVolume,omitempty"`
}

// NewV1PersistentVolumeSpec instantiates a new V1PersistentVolumeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PersistentVolumeSpec() *V1PersistentVolumeSpec {
	this := V1PersistentVolumeSpec{}
	return &this
}

// NewV1PersistentVolumeSpecWithDefaults instantiates a new V1PersistentVolumeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PersistentVolumeSpecWithDefaults() *V1PersistentVolumeSpec {
	this := V1PersistentVolumeSpec{}
	return &this
}

// GetAccessModes returns the AccessModes field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetAccessModes() []V1PersistentVolumeAccessMode {
	if o == nil || IsNil(o.AccessModes) {
		var ret []V1PersistentVolumeAccessMode
		return ret
	}
	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetAccessModesOk() ([]V1PersistentVolumeAccessMode, bool) {
	if o == nil || IsNil(o.AccessModes) {
		return nil, false
	}
	return o.AccessModes, true
}

// HasAccessModes returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasAccessModes() bool {
	if o != nil && !IsNil(o.AccessModes) {
		return true
	}

	return false
}

// SetAccessModes gets a reference to the given []V1PersistentVolumeAccessMode and assigns it to the AccessModes field.
func (o *V1PersistentVolumeSpec) SetAccessModes(v []V1PersistentVolumeAccessMode) {
	o.AccessModes = v
}

// GetAwsElasticBlockStore returns the AwsElasticBlockStore field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetAwsElasticBlockStore() V1AWSElasticBlockStoreVolumeSource {
	if o == nil || IsNil(o.AwsElasticBlockStore) {
		var ret V1AWSElasticBlockStoreVolumeSource
		return ret
	}
	return *o.AwsElasticBlockStore
}

// GetAwsElasticBlockStoreOk returns a tuple with the AwsElasticBlockStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetAwsElasticBlockStoreOk() (*V1AWSElasticBlockStoreVolumeSource, bool) {
	if o == nil || IsNil(o.AwsElasticBlockStore) {
		return nil, false
	}
	return o.AwsElasticBlockStore, true
}

// HasAwsElasticBlockStore returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasAwsElasticBlockStore() bool {
	if o != nil && !IsNil(o.AwsElasticBlockStore) {
		return true
	}

	return false
}

// SetAwsElasticBlockStore gets a reference to the given V1AWSElasticBlockStoreVolumeSource and assigns it to the AwsElasticBlockStore field.
func (o *V1PersistentVolumeSpec) SetAwsElasticBlockStore(v V1AWSElasticBlockStoreVolumeSource) {
	o.AwsElasticBlockStore = &v
}

// GetAzureDisk returns the AzureDisk field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetAzureDisk() V1AzureDiskVolumeSource {
	if o == nil || IsNil(o.AzureDisk) {
		var ret V1AzureDiskVolumeSource
		return ret
	}
	return *o.AzureDisk
}

// GetAzureDiskOk returns a tuple with the AzureDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetAzureDiskOk() (*V1AzureDiskVolumeSource, bool) {
	if o == nil || IsNil(o.AzureDisk) {
		return nil, false
	}
	return o.AzureDisk, true
}

// HasAzureDisk returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasAzureDisk() bool {
	if o != nil && !IsNil(o.AzureDisk) {
		return true
	}

	return false
}

// SetAzureDisk gets a reference to the given V1AzureDiskVolumeSource and assigns it to the AzureDisk field.
func (o *V1PersistentVolumeSpec) SetAzureDisk(v V1AzureDiskVolumeSource) {
	o.AzureDisk = &v
}

// GetAzureFile returns the AzureFile field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetAzureFile() V1AzureFilePersistentVolumeSource {
	if o == nil || IsNil(o.AzureFile) {
		var ret V1AzureFilePersistentVolumeSource
		return ret
	}
	return *o.AzureFile
}

// GetAzureFileOk returns a tuple with the AzureFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetAzureFileOk() (*V1AzureFilePersistentVolumeSource, bool) {
	if o == nil || IsNil(o.AzureFile) {
		return nil, false
	}
	return o.AzureFile, true
}

// HasAzureFile returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasAzureFile() bool {
	if o != nil && !IsNil(o.AzureFile) {
		return true
	}

	return false
}

// SetAzureFile gets a reference to the given V1AzureFilePersistentVolumeSource and assigns it to the AzureFile field.
func (o *V1PersistentVolumeSpec) SetAzureFile(v V1AzureFilePersistentVolumeSource) {
	o.AzureFile = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetCapacity() map[string]interface{} {
	if o == nil || IsNil(o.Capacity) {
		var ret map[string]interface{}
		return ret
	}
	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetCapacityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Capacity) {
		return map[string]interface{}{}, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given map[string]interface{} and assigns it to the Capacity field.
func (o *V1PersistentVolumeSpec) SetCapacity(v map[string]interface{}) {
	o.Capacity = v
}

// GetCephfs returns the Cephfs field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetCephfs() V1CephFSPersistentVolumeSource {
	if o == nil || IsNil(o.Cephfs) {
		var ret V1CephFSPersistentVolumeSource
		return ret
	}
	return *o.Cephfs
}

// GetCephfsOk returns a tuple with the Cephfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetCephfsOk() (*V1CephFSPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.Cephfs) {
		return nil, false
	}
	return o.Cephfs, true
}

// HasCephfs returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasCephfs() bool {
	if o != nil && !IsNil(o.Cephfs) {
		return true
	}

	return false
}

// SetCephfs gets a reference to the given V1CephFSPersistentVolumeSource and assigns it to the Cephfs field.
func (o *V1PersistentVolumeSpec) SetCephfs(v V1CephFSPersistentVolumeSource) {
	o.Cephfs = &v
}

// GetCinder returns the Cinder field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetCinder() V1CinderPersistentVolumeSource {
	if o == nil || IsNil(o.Cinder) {
		var ret V1CinderPersistentVolumeSource
		return ret
	}
	return *o.Cinder
}

// GetCinderOk returns a tuple with the Cinder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetCinderOk() (*V1CinderPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.Cinder) {
		return nil, false
	}
	return o.Cinder, true
}

// HasCinder returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasCinder() bool {
	if o != nil && !IsNil(o.Cinder) {
		return true
	}

	return false
}

// SetCinder gets a reference to the given V1CinderPersistentVolumeSource and assigns it to the Cinder field.
func (o *V1PersistentVolumeSpec) SetCinder(v V1CinderPersistentVolumeSource) {
	o.Cinder = &v
}

// GetClaimRef returns the ClaimRef field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetClaimRef() V1ObjectReference {
	if o == nil || IsNil(o.ClaimRef) {
		var ret V1ObjectReference
		return ret
	}
	return *o.ClaimRef
}

// GetClaimRefOk returns a tuple with the ClaimRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetClaimRefOk() (*V1ObjectReference, bool) {
	if o == nil || IsNil(o.ClaimRef) {
		return nil, false
	}
	return o.ClaimRef, true
}

// HasClaimRef returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasClaimRef() bool {
	if o != nil && !IsNil(o.ClaimRef) {
		return true
	}

	return false
}

// SetClaimRef gets a reference to the given V1ObjectReference and assigns it to the ClaimRef field.
func (o *V1PersistentVolumeSpec) SetClaimRef(v V1ObjectReference) {
	o.ClaimRef = &v
}

// GetCsi returns the Csi field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetCsi() V1CSIPersistentVolumeSource {
	if o == nil || IsNil(o.Csi) {
		var ret V1CSIPersistentVolumeSource
		return ret
	}
	return *o.Csi
}

// GetCsiOk returns a tuple with the Csi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetCsiOk() (*V1CSIPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.Csi) {
		return nil, false
	}
	return o.Csi, true
}

// HasCsi returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasCsi() bool {
	if o != nil && !IsNil(o.Csi) {
		return true
	}

	return false
}

// SetCsi gets a reference to the given V1CSIPersistentVolumeSource and assigns it to the Csi field.
func (o *V1PersistentVolumeSpec) SetCsi(v V1CSIPersistentVolumeSource) {
	o.Csi = &v
}

// GetFc returns the Fc field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetFc() V1FCVolumeSource {
	if o == nil || IsNil(o.Fc) {
		var ret V1FCVolumeSource
		return ret
	}
	return *o.Fc
}

// GetFcOk returns a tuple with the Fc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetFcOk() (*V1FCVolumeSource, bool) {
	if o == nil || IsNil(o.Fc) {
		return nil, false
	}
	return o.Fc, true
}

// HasFc returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasFc() bool {
	if o != nil && !IsNil(o.Fc) {
		return true
	}

	return false
}

// SetFc gets a reference to the given V1FCVolumeSource and assigns it to the Fc field.
func (o *V1PersistentVolumeSpec) SetFc(v V1FCVolumeSource) {
	o.Fc = &v
}

// GetFlexVolume returns the FlexVolume field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetFlexVolume() V1FlexPersistentVolumeSource {
	if o == nil || IsNil(o.FlexVolume) {
		var ret V1FlexPersistentVolumeSource
		return ret
	}
	return *o.FlexVolume
}

// GetFlexVolumeOk returns a tuple with the FlexVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetFlexVolumeOk() (*V1FlexPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.FlexVolume) {
		return nil, false
	}
	return o.FlexVolume, true
}

// HasFlexVolume returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasFlexVolume() bool {
	if o != nil && !IsNil(o.FlexVolume) {
		return true
	}

	return false
}

// SetFlexVolume gets a reference to the given V1FlexPersistentVolumeSource and assigns it to the FlexVolume field.
func (o *V1PersistentVolumeSpec) SetFlexVolume(v V1FlexPersistentVolumeSource) {
	o.FlexVolume = &v
}

// GetFlocker returns the Flocker field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetFlocker() V1FlockerVolumeSource {
	if o == nil || IsNil(o.Flocker) {
		var ret V1FlockerVolumeSource
		return ret
	}
	return *o.Flocker
}

// GetFlockerOk returns a tuple with the Flocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetFlockerOk() (*V1FlockerVolumeSource, bool) {
	if o == nil || IsNil(o.Flocker) {
		return nil, false
	}
	return o.Flocker, true
}

// HasFlocker returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasFlocker() bool {
	if o != nil && !IsNil(o.Flocker) {
		return true
	}

	return false
}

// SetFlocker gets a reference to the given V1FlockerVolumeSource and assigns it to the Flocker field.
func (o *V1PersistentVolumeSpec) SetFlocker(v V1FlockerVolumeSource) {
	o.Flocker = &v
}

// GetGcePersistentDisk returns the GcePersistentDisk field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetGcePersistentDisk() V1GCEPersistentDiskVolumeSource {
	if o == nil || IsNil(o.GcePersistentDisk) {
		var ret V1GCEPersistentDiskVolumeSource
		return ret
	}
	return *o.GcePersistentDisk
}

// GetGcePersistentDiskOk returns a tuple with the GcePersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetGcePersistentDiskOk() (*V1GCEPersistentDiskVolumeSource, bool) {
	if o == nil || IsNil(o.GcePersistentDisk) {
		return nil, false
	}
	return o.GcePersistentDisk, true
}

// HasGcePersistentDisk returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasGcePersistentDisk() bool {
	if o != nil && !IsNil(o.GcePersistentDisk) {
		return true
	}

	return false
}

// SetGcePersistentDisk gets a reference to the given V1GCEPersistentDiskVolumeSource and assigns it to the GcePersistentDisk field.
func (o *V1PersistentVolumeSpec) SetGcePersistentDisk(v V1GCEPersistentDiskVolumeSource) {
	o.GcePersistentDisk = &v
}

// GetGlusterfs returns the Glusterfs field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetGlusterfs() V1GlusterfsVolumeSource {
	if o == nil || IsNil(o.Glusterfs) {
		var ret V1GlusterfsVolumeSource
		return ret
	}
	return *o.Glusterfs
}

// GetGlusterfsOk returns a tuple with the Glusterfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetGlusterfsOk() (*V1GlusterfsVolumeSource, bool) {
	if o == nil || IsNil(o.Glusterfs) {
		return nil, false
	}
	return o.Glusterfs, true
}

// HasGlusterfs returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasGlusterfs() bool {
	if o != nil && !IsNil(o.Glusterfs) {
		return true
	}

	return false
}

// SetGlusterfs gets a reference to the given V1GlusterfsVolumeSource and assigns it to the Glusterfs field.
func (o *V1PersistentVolumeSpec) SetGlusterfs(v V1GlusterfsVolumeSource) {
	o.Glusterfs = &v
}

// GetHostPath returns the HostPath field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetHostPath() V1HostPathVolumeSource {
	if o == nil || IsNil(o.HostPath) {
		var ret V1HostPathVolumeSource
		return ret
	}
	return *o.HostPath
}

// GetHostPathOk returns a tuple with the HostPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetHostPathOk() (*V1HostPathVolumeSource, bool) {
	if o == nil || IsNil(o.HostPath) {
		return nil, false
	}
	return o.HostPath, true
}

// HasHostPath returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasHostPath() bool {
	if o != nil && !IsNil(o.HostPath) {
		return true
	}

	return false
}

// SetHostPath gets a reference to the given V1HostPathVolumeSource and assigns it to the HostPath field.
func (o *V1PersistentVolumeSpec) SetHostPath(v V1HostPathVolumeSource) {
	o.HostPath = &v
}

// GetIscsi returns the Iscsi field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetIscsi() V1ISCSIPersistentVolumeSource {
	if o == nil || IsNil(o.Iscsi) {
		var ret V1ISCSIPersistentVolumeSource
		return ret
	}
	return *o.Iscsi
}

// GetIscsiOk returns a tuple with the Iscsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetIscsiOk() (*V1ISCSIPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.Iscsi) {
		return nil, false
	}
	return o.Iscsi, true
}

// HasIscsi returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasIscsi() bool {
	if o != nil && !IsNil(o.Iscsi) {
		return true
	}

	return false
}

// SetIscsi gets a reference to the given V1ISCSIPersistentVolumeSource and assigns it to the Iscsi field.
func (o *V1PersistentVolumeSpec) SetIscsi(v V1ISCSIPersistentVolumeSource) {
	o.Iscsi = &v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetLocal() V1LocalVolumeSource {
	if o == nil || IsNil(o.Local) {
		var ret V1LocalVolumeSource
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetLocalOk() (*V1LocalVolumeSource, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given V1LocalVolumeSource and assigns it to the Local field.
func (o *V1PersistentVolumeSpec) SetLocal(v V1LocalVolumeSource) {
	o.Local = &v
}

// GetMountOptions returns the MountOptions field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetMountOptions() []string {
	if o == nil || IsNil(o.MountOptions) {
		var ret []string
		return ret
	}
	return o.MountOptions
}

// GetMountOptionsOk returns a tuple with the MountOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetMountOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.MountOptions) {
		return nil, false
	}
	return o.MountOptions, true
}

// HasMountOptions returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasMountOptions() bool {
	if o != nil && !IsNil(o.MountOptions) {
		return true
	}

	return false
}

// SetMountOptions gets a reference to the given []string and assigns it to the MountOptions field.
func (o *V1PersistentVolumeSpec) SetMountOptions(v []string) {
	o.MountOptions = v
}

// GetNfs returns the Nfs field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetNfs() V1NFSVolumeSource {
	if o == nil || IsNil(o.Nfs) {
		var ret V1NFSVolumeSource
		return ret
	}
	return *o.Nfs
}

// GetNfsOk returns a tuple with the Nfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetNfsOk() (*V1NFSVolumeSource, bool) {
	if o == nil || IsNil(o.Nfs) {
		return nil, false
	}
	return o.Nfs, true
}

// HasNfs returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasNfs() bool {
	if o != nil && !IsNil(o.Nfs) {
		return true
	}

	return false
}

// SetNfs gets a reference to the given V1NFSVolumeSource and assigns it to the Nfs field.
func (o *V1PersistentVolumeSpec) SetNfs(v V1NFSVolumeSource) {
	o.Nfs = &v
}

// GetNodeAffinity returns the NodeAffinity field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetNodeAffinity() V1VolumeNodeAffinity {
	if o == nil || IsNil(o.NodeAffinity) {
		var ret V1VolumeNodeAffinity
		return ret
	}
	return *o.NodeAffinity
}

// GetNodeAffinityOk returns a tuple with the NodeAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetNodeAffinityOk() (*V1VolumeNodeAffinity, bool) {
	if o == nil || IsNil(o.NodeAffinity) {
		return nil, false
	}
	return o.NodeAffinity, true
}

// HasNodeAffinity returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasNodeAffinity() bool {
	if o != nil && !IsNil(o.NodeAffinity) {
		return true
	}

	return false
}

// SetNodeAffinity gets a reference to the given V1VolumeNodeAffinity and assigns it to the NodeAffinity field.
func (o *V1PersistentVolumeSpec) SetNodeAffinity(v V1VolumeNodeAffinity) {
	o.NodeAffinity = &v
}

// GetPersistentVolumeReclaimPolicy returns the PersistentVolumeReclaimPolicy field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetPersistentVolumeReclaimPolicy() string {
	if o == nil || IsNil(o.PersistentVolumeReclaimPolicy) {
		var ret string
		return ret
	}
	return *o.PersistentVolumeReclaimPolicy
}

// GetPersistentVolumeReclaimPolicyOk returns a tuple with the PersistentVolumeReclaimPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetPersistentVolumeReclaimPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PersistentVolumeReclaimPolicy) {
		return nil, false
	}
	return o.PersistentVolumeReclaimPolicy, true
}

// HasPersistentVolumeReclaimPolicy returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasPersistentVolumeReclaimPolicy() bool {
	if o != nil && !IsNil(o.PersistentVolumeReclaimPolicy) {
		return true
	}

	return false
}

// SetPersistentVolumeReclaimPolicy gets a reference to the given string and assigns it to the PersistentVolumeReclaimPolicy field.
func (o *V1PersistentVolumeSpec) SetPersistentVolumeReclaimPolicy(v string) {
	o.PersistentVolumeReclaimPolicy = &v
}

// GetPhotonPersistentDisk returns the PhotonPersistentDisk field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetPhotonPersistentDisk() V1PhotonPersistentDiskVolumeSource {
	if o == nil || IsNil(o.PhotonPersistentDisk) {
		var ret V1PhotonPersistentDiskVolumeSource
		return ret
	}
	return *o.PhotonPersistentDisk
}

// GetPhotonPersistentDiskOk returns a tuple with the PhotonPersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetPhotonPersistentDiskOk() (*V1PhotonPersistentDiskVolumeSource, bool) {
	if o == nil || IsNil(o.PhotonPersistentDisk) {
		return nil, false
	}
	return o.PhotonPersistentDisk, true
}

// HasPhotonPersistentDisk returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasPhotonPersistentDisk() bool {
	if o != nil && !IsNil(o.PhotonPersistentDisk) {
		return true
	}

	return false
}

// SetPhotonPersistentDisk gets a reference to the given V1PhotonPersistentDiskVolumeSource and assigns it to the PhotonPersistentDisk field.
func (o *V1PersistentVolumeSpec) SetPhotonPersistentDisk(v V1PhotonPersistentDiskVolumeSource) {
	o.PhotonPersistentDisk = &v
}

// GetPortworxVolume returns the PortworxVolume field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetPortworxVolume() V1PortworxVolumeSource {
	if o == nil || IsNil(o.PortworxVolume) {
		var ret V1PortworxVolumeSource
		return ret
	}
	return *o.PortworxVolume
}

// GetPortworxVolumeOk returns a tuple with the PortworxVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetPortworxVolumeOk() (*V1PortworxVolumeSource, bool) {
	if o == nil || IsNil(o.PortworxVolume) {
		return nil, false
	}
	return o.PortworxVolume, true
}

// HasPortworxVolume returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasPortworxVolume() bool {
	if o != nil && !IsNil(o.PortworxVolume) {
		return true
	}

	return false
}

// SetPortworxVolume gets a reference to the given V1PortworxVolumeSource and assigns it to the PortworxVolume field.
func (o *V1PersistentVolumeSpec) SetPortworxVolume(v V1PortworxVolumeSource) {
	o.PortworxVolume = &v
}

// GetQuobyte returns the Quobyte field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetQuobyte() V1QuobyteVolumeSource {
	if o == nil || IsNil(o.Quobyte) {
		var ret V1QuobyteVolumeSource
		return ret
	}
	return *o.Quobyte
}

// GetQuobyteOk returns a tuple with the Quobyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetQuobyteOk() (*V1QuobyteVolumeSource, bool) {
	if o == nil || IsNil(o.Quobyte) {
		return nil, false
	}
	return o.Quobyte, true
}

// HasQuobyte returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasQuobyte() bool {
	if o != nil && !IsNil(o.Quobyte) {
		return true
	}

	return false
}

// SetQuobyte gets a reference to the given V1QuobyteVolumeSource and assigns it to the Quobyte field.
func (o *V1PersistentVolumeSpec) SetQuobyte(v V1QuobyteVolumeSource) {
	o.Quobyte = &v
}

// GetRbd returns the Rbd field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetRbd() V1RBDPersistentVolumeSource {
	if o == nil || IsNil(o.Rbd) {
		var ret V1RBDPersistentVolumeSource
		return ret
	}
	return *o.Rbd
}

// GetRbdOk returns a tuple with the Rbd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetRbdOk() (*V1RBDPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.Rbd) {
		return nil, false
	}
	return o.Rbd, true
}

// HasRbd returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasRbd() bool {
	if o != nil && !IsNil(o.Rbd) {
		return true
	}

	return false
}

// SetRbd gets a reference to the given V1RBDPersistentVolumeSource and assigns it to the Rbd field.
func (o *V1PersistentVolumeSpec) SetRbd(v V1RBDPersistentVolumeSource) {
	o.Rbd = &v
}

// GetScaleIO returns the ScaleIO field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetScaleIO() V1ScaleIOPersistentVolumeSource {
	if o == nil || IsNil(o.ScaleIO) {
		var ret V1ScaleIOPersistentVolumeSource
		return ret
	}
	return *o.ScaleIO
}

// GetScaleIOOk returns a tuple with the ScaleIO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetScaleIOOk() (*V1ScaleIOPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.ScaleIO) {
		return nil, false
	}
	return o.ScaleIO, true
}

// HasScaleIO returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasScaleIO() bool {
	if o != nil && !IsNil(o.ScaleIO) {
		return true
	}

	return false
}

// SetScaleIO gets a reference to the given V1ScaleIOPersistentVolumeSource and assigns it to the ScaleIO field.
func (o *V1PersistentVolumeSpec) SetScaleIO(v V1ScaleIOPersistentVolumeSource) {
	o.ScaleIO = &v
}

// GetStorageClassName returns the StorageClassName field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetStorageClassName() string {
	if o == nil || IsNil(o.StorageClassName) {
		var ret string
		return ret
	}
	return *o.StorageClassName
}

// GetStorageClassNameOk returns a tuple with the StorageClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetStorageClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.StorageClassName) {
		return nil, false
	}
	return o.StorageClassName, true
}

// HasStorageClassName returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasStorageClassName() bool {
	if o != nil && !IsNil(o.StorageClassName) {
		return true
	}

	return false
}

// SetStorageClassName gets a reference to the given string and assigns it to the StorageClassName field.
func (o *V1PersistentVolumeSpec) SetStorageClassName(v string) {
	o.StorageClassName = &v
}

// GetStorageos returns the Storageos field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetStorageos() V1StorageOSPersistentVolumeSource {
	if o == nil || IsNil(o.Storageos) {
		var ret V1StorageOSPersistentVolumeSource
		return ret
	}
	return *o.Storageos
}

// GetStorageosOk returns a tuple with the Storageos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetStorageosOk() (*V1StorageOSPersistentVolumeSource, bool) {
	if o == nil || IsNil(o.Storageos) {
		return nil, false
	}
	return o.Storageos, true
}

// HasStorageos returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasStorageos() bool {
	if o != nil && !IsNil(o.Storageos) {
		return true
	}

	return false
}

// SetStorageos gets a reference to the given V1StorageOSPersistentVolumeSource and assigns it to the Storageos field.
func (o *V1PersistentVolumeSpec) SetStorageos(v V1StorageOSPersistentVolumeSource) {
	o.Storageos = &v
}

// GetVolumeMode returns the VolumeMode field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetVolumeMode() V1PersistentVolumeMode {
	if o == nil || IsNil(o.VolumeMode) {
		var ret V1PersistentVolumeMode
		return ret
	}
	return *o.VolumeMode
}

// GetVolumeModeOk returns a tuple with the VolumeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetVolumeModeOk() (*V1PersistentVolumeMode, bool) {
	if o == nil || IsNil(o.VolumeMode) {
		return nil, false
	}
	return o.VolumeMode, true
}

// HasVolumeMode returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasVolumeMode() bool {
	if o != nil && !IsNil(o.VolumeMode) {
		return true
	}

	return false
}

// SetVolumeMode gets a reference to the given V1PersistentVolumeMode and assigns it to the VolumeMode field.
func (o *V1PersistentVolumeSpec) SetVolumeMode(v V1PersistentVolumeMode) {
	o.VolumeMode = &v
}

// GetVsphereVolume returns the VsphereVolume field value if set, zero value otherwise.
func (o *V1PersistentVolumeSpec) GetVsphereVolume() V1VsphereVirtualDiskVolumeSource {
	if o == nil || IsNil(o.VsphereVolume) {
		var ret V1VsphereVirtualDiskVolumeSource
		return ret
	}
	return *o.VsphereVolume
}

// GetVsphereVolumeOk returns a tuple with the VsphereVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeSpec) GetVsphereVolumeOk() (*V1VsphereVirtualDiskVolumeSource, bool) {
	if o == nil || IsNil(o.VsphereVolume) {
		return nil, false
	}
	return o.VsphereVolume, true
}

// HasVsphereVolume returns a boolean if a field has been set.
func (o *V1PersistentVolumeSpec) HasVsphereVolume() bool {
	if o != nil && !IsNil(o.VsphereVolume) {
		return true
	}

	return false
}

// SetVsphereVolume gets a reference to the given V1VsphereVirtualDiskVolumeSource and assigns it to the VsphereVolume field.
func (o *V1PersistentVolumeSpec) SetVsphereVolume(v V1VsphereVirtualDiskVolumeSource) {
	o.VsphereVolume = &v
}

func (o V1PersistentVolumeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PersistentVolumeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessModes) {
		toSerialize["accessModes"] = o.AccessModes
	}
	if !IsNil(o.AwsElasticBlockStore) {
		toSerialize["awsElasticBlockStore"] = o.AwsElasticBlockStore
	}
	if !IsNil(o.AzureDisk) {
		toSerialize["azureDisk"] = o.AzureDisk
	}
	if !IsNil(o.AzureFile) {
		toSerialize["azureFile"] = o.AzureFile
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Cephfs) {
		toSerialize["cephfs"] = o.Cephfs
	}
	if !IsNil(o.Cinder) {
		toSerialize["cinder"] = o.Cinder
	}
	if !IsNil(o.ClaimRef) {
		toSerialize["claimRef"] = o.ClaimRef
	}
	if !IsNil(o.Csi) {
		toSerialize["csi"] = o.Csi
	}
	if !IsNil(o.Fc) {
		toSerialize["fc"] = o.Fc
	}
	if !IsNil(o.FlexVolume) {
		toSerialize["flexVolume"] = o.FlexVolume
	}
	if !IsNil(o.Flocker) {
		toSerialize["flocker"] = o.Flocker
	}
	if !IsNil(o.GcePersistentDisk) {
		toSerialize["gcePersistentDisk"] = o.GcePersistentDisk
	}
	if !IsNil(o.Glusterfs) {
		toSerialize["glusterfs"] = o.Glusterfs
	}
	if !IsNil(o.HostPath) {
		toSerialize["hostPath"] = o.HostPath
	}
	if !IsNil(o.Iscsi) {
		toSerialize["iscsi"] = o.Iscsi
	}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	if !IsNil(o.MountOptions) {
		toSerialize["mountOptions"] = o.MountOptions
	}
	if !IsNil(o.Nfs) {
		toSerialize["nfs"] = o.Nfs
	}
	if !IsNil(o.NodeAffinity) {
		toSerialize["nodeAffinity"] = o.NodeAffinity
	}
	if !IsNil(o.PersistentVolumeReclaimPolicy) {
		toSerialize["persistentVolumeReclaimPolicy"] = o.PersistentVolumeReclaimPolicy
	}
	if !IsNil(o.PhotonPersistentDisk) {
		toSerialize["photonPersistentDisk"] = o.PhotonPersistentDisk
	}
	if !IsNil(o.PortworxVolume) {
		toSerialize["portworxVolume"] = o.PortworxVolume
	}
	if !IsNil(o.Quobyte) {
		toSerialize["quobyte"] = o.Quobyte
	}
	if !IsNil(o.Rbd) {
		toSerialize["rbd"] = o.Rbd
	}
	if !IsNil(o.ScaleIO) {
		toSerialize["scaleIO"] = o.ScaleIO
	}
	if !IsNil(o.StorageClassName) {
		toSerialize["storageClassName"] = o.StorageClassName
	}
	if !IsNil(o.Storageos) {
		toSerialize["storageos"] = o.Storageos
	}
	if !IsNil(o.VolumeMode) {
		toSerialize["volumeMode"] = o.VolumeMode
	}
	if !IsNil(o.VsphereVolume) {
		toSerialize["vsphereVolume"] = o.VsphereVolume
	}
	return toSerialize, nil
}

type NullableV1PersistentVolumeSpec struct {
	value *V1PersistentVolumeSpec
	isSet bool
}

func (v NullableV1PersistentVolumeSpec) Get() *V1PersistentVolumeSpec {
	return v.value
}

func (v *NullableV1PersistentVolumeSpec) Set(val *V1PersistentVolumeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PersistentVolumeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PersistentVolumeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PersistentVolumeSpec(val *V1PersistentVolumeSpec) *NullableV1PersistentVolumeSpec {
	return &NullableV1PersistentVolumeSpec{value: val, isSet: true}
}

func (v NullableV1PersistentVolumeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PersistentVolumeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


