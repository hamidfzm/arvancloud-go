/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1StorageOSPersistentVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1StorageOSPersistentVolumeSource{}

// V1StorageOSPersistentVolumeSource Represents a StorageOS persistent volume resource.
type V1StorageOSPersistentVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef *V1ObjectReference `json:"secretRef,omitempty"`
	// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `json:"volumeName,omitempty"`
	// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `json:"volumeNamespace,omitempty"`
}

// NewV1StorageOSPersistentVolumeSource instantiates a new V1StorageOSPersistentVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1StorageOSPersistentVolumeSource() *V1StorageOSPersistentVolumeSource {
	this := V1StorageOSPersistentVolumeSource{}
	return &this
}

// NewV1StorageOSPersistentVolumeSourceWithDefaults instantiates a new V1StorageOSPersistentVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1StorageOSPersistentVolumeSourceWithDefaults() *V1StorageOSPersistentVolumeSource {
	this := V1StorageOSPersistentVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1StorageOSPersistentVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StorageOSPersistentVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1StorageOSPersistentVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1StorageOSPersistentVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1StorageOSPersistentVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StorageOSPersistentVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1StorageOSPersistentVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1StorageOSPersistentVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *V1StorageOSPersistentVolumeSource) GetSecretRef() V1ObjectReference {
	if o == nil || IsNil(o.SecretRef) {
		var ret V1ObjectReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StorageOSPersistentVolumeSource) GetSecretRefOk() (*V1ObjectReference, bool) {
	if o == nil || IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *V1StorageOSPersistentVolumeSource) HasSecretRef() bool {
	if o != nil && !IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1ObjectReference and assigns it to the SecretRef field.
func (o *V1StorageOSPersistentVolumeSource) SetSecretRef(v V1ObjectReference) {
	o.SecretRef = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *V1StorageOSPersistentVolumeSource) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StorageOSPersistentVolumeSource) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *V1StorageOSPersistentVolumeSource) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *V1StorageOSPersistentVolumeSource) SetVolumeName(v string) {
	o.VolumeName = &v
}

// GetVolumeNamespace returns the VolumeNamespace field value if set, zero value otherwise.
func (o *V1StorageOSPersistentVolumeSource) GetVolumeNamespace() string {
	if o == nil || IsNil(o.VolumeNamespace) {
		var ret string
		return ret
	}
	return *o.VolumeNamespace
}

// GetVolumeNamespaceOk returns a tuple with the VolumeNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StorageOSPersistentVolumeSource) GetVolumeNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeNamespace) {
		return nil, false
	}
	return o.VolumeNamespace, true
}

// HasVolumeNamespace returns a boolean if a field has been set.
func (o *V1StorageOSPersistentVolumeSource) HasVolumeNamespace() bool {
	if o != nil && !IsNil(o.VolumeNamespace) {
		return true
	}

	return false
}

// SetVolumeNamespace gets a reference to the given string and assigns it to the VolumeNamespace field.
func (o *V1StorageOSPersistentVolumeSource) SetVolumeNamespace(v string) {
	o.VolumeNamespace = &v
}

func (o V1StorageOSPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1StorageOSPersistentVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	if !IsNil(o.VolumeName) {
		toSerialize["volumeName"] = o.VolumeName
	}
	if !IsNil(o.VolumeNamespace) {
		toSerialize["volumeNamespace"] = o.VolumeNamespace
	}
	return toSerialize, nil
}

type NullableV1StorageOSPersistentVolumeSource struct {
	value *V1StorageOSPersistentVolumeSource
	isSet bool
}

func (v NullableV1StorageOSPersistentVolumeSource) Get() *V1StorageOSPersistentVolumeSource {
	return v.value
}

func (v *NullableV1StorageOSPersistentVolumeSource) Set(val *V1StorageOSPersistentVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1StorageOSPersistentVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1StorageOSPersistentVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1StorageOSPersistentVolumeSource(val *V1StorageOSPersistentVolumeSource) *NullableV1StorageOSPersistentVolumeSource {
	return &NullableV1StorageOSPersistentVolumeSource{value: val, isSet: true}
}

func (v NullableV1StorageOSPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1StorageOSPersistentVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


