/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1BuildStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BuildStatus{}

// V1BuildStatus BuildStatus contains the status of a build
type V1BuildStatus struct {
	// cancelled describes if a cancel event was triggered for the build.
	Cancelled *bool `json:"cancelled,omitempty"`
	// completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC.
	CompletionTimestamp *string `json:"completionTimestamp,omitempty"`
	Config *V1ObjectReference `json:"config,omitempty"`
	// logSnippet is the last few lines of the build log.  This value is only set for builds that failed.
	LogSnippet *string `json:"logSnippet,omitempty"`
	// message is a human-readable message indicating details about why the build has this status.
	Message *string `json:"message,omitempty"`
	Output *V1BuildStatusOutput `json:"output,omitempty"`
	// outputDockerImageReference contains a reference to the Docker image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.
	OutputDockerImageReference *string `json:"outputDockerImageReference,omitempty"`
	// phase is the point in the build lifecycle. Possible values are \"New\", \"Pending\", \"Running\", \"Complete\", \"Failed\", \"Error\", and \"Cancelled\".
	Phase string `json:"phase"`
	// reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
	Reason *string `json:"reason,omitempty"`
	// stages contains details about each stage that occurs during the build including start time, duration (in milliseconds), and the steps that occured within each stage.
	Stages []V1StageInfo `json:"stages,omitempty"`
	// startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC.
	StartTimestamp *string `json:"startTimestamp,omitempty"`
}

// NewV1BuildStatus instantiates a new V1BuildStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BuildStatus(phase string) *V1BuildStatus {
	this := V1BuildStatus{}
	this.Phase = phase
	return &this
}

// NewV1BuildStatusWithDefaults instantiates a new V1BuildStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BuildStatusWithDefaults() *V1BuildStatus {
	this := V1BuildStatus{}
	return &this
}

// GetCancelled returns the Cancelled field value if set, zero value otherwise.
func (o *V1BuildStatus) GetCancelled() bool {
	if o == nil || IsNil(o.Cancelled) {
		var ret bool
		return ret
	}
	return *o.Cancelled
}

// GetCancelledOk returns a tuple with the Cancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetCancelledOk() (*bool, bool) {
	if o == nil || IsNil(o.Cancelled) {
		return nil, false
	}
	return o.Cancelled, true
}

// HasCancelled returns a boolean if a field has been set.
func (o *V1BuildStatus) HasCancelled() bool {
	if o != nil && !IsNil(o.Cancelled) {
		return true
	}

	return false
}

// SetCancelled gets a reference to the given bool and assigns it to the Cancelled field.
func (o *V1BuildStatus) SetCancelled(v bool) {
	o.Cancelled = &v
}

// GetCompletionTimestamp returns the CompletionTimestamp field value if set, zero value otherwise.
func (o *V1BuildStatus) GetCompletionTimestamp() string {
	if o == nil || IsNil(o.CompletionTimestamp) {
		var ret string
		return ret
	}
	return *o.CompletionTimestamp
}

// GetCompletionTimestampOk returns a tuple with the CompletionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetCompletionTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.CompletionTimestamp) {
		return nil, false
	}
	return o.CompletionTimestamp, true
}

// HasCompletionTimestamp returns a boolean if a field has been set.
func (o *V1BuildStatus) HasCompletionTimestamp() bool {
	if o != nil && !IsNil(o.CompletionTimestamp) {
		return true
	}

	return false
}

// SetCompletionTimestamp gets a reference to the given string and assigns it to the CompletionTimestamp field.
func (o *V1BuildStatus) SetCompletionTimestamp(v string) {
	o.CompletionTimestamp = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *V1BuildStatus) GetConfig() V1ObjectReference {
	if o == nil || IsNil(o.Config) {
		var ret V1ObjectReference
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetConfigOk() (*V1ObjectReference, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *V1BuildStatus) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given V1ObjectReference and assigns it to the Config field.
func (o *V1BuildStatus) SetConfig(v V1ObjectReference) {
	o.Config = &v
}

// GetLogSnippet returns the LogSnippet field value if set, zero value otherwise.
func (o *V1BuildStatus) GetLogSnippet() string {
	if o == nil || IsNil(o.LogSnippet) {
		var ret string
		return ret
	}
	return *o.LogSnippet
}

// GetLogSnippetOk returns a tuple with the LogSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetLogSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.LogSnippet) {
		return nil, false
	}
	return o.LogSnippet, true
}

// HasLogSnippet returns a boolean if a field has been set.
func (o *V1BuildStatus) HasLogSnippet() bool {
	if o != nil && !IsNil(o.LogSnippet) {
		return true
	}

	return false
}

// SetLogSnippet gets a reference to the given string and assigns it to the LogSnippet field.
func (o *V1BuildStatus) SetLogSnippet(v string) {
	o.LogSnippet = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1BuildStatus) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1BuildStatus) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1BuildStatus) SetMessage(v string) {
	o.Message = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *V1BuildStatus) GetOutput() V1BuildStatusOutput {
	if o == nil || IsNil(o.Output) {
		var ret V1BuildStatusOutput
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetOutputOk() (*V1BuildStatusOutput, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *V1BuildStatus) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given V1BuildStatusOutput and assigns it to the Output field.
func (o *V1BuildStatus) SetOutput(v V1BuildStatusOutput) {
	o.Output = &v
}

// GetOutputDockerImageReference returns the OutputDockerImageReference field value if set, zero value otherwise.
func (o *V1BuildStatus) GetOutputDockerImageReference() string {
	if o == nil || IsNil(o.OutputDockerImageReference) {
		var ret string
		return ret
	}
	return *o.OutputDockerImageReference
}

// GetOutputDockerImageReferenceOk returns a tuple with the OutputDockerImageReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetOutputDockerImageReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDockerImageReference) {
		return nil, false
	}
	return o.OutputDockerImageReference, true
}

// HasOutputDockerImageReference returns a boolean if a field has been set.
func (o *V1BuildStatus) HasOutputDockerImageReference() bool {
	if o != nil && !IsNil(o.OutputDockerImageReference) {
		return true
	}

	return false
}

// SetOutputDockerImageReference gets a reference to the given string and assigns it to the OutputDockerImageReference field.
func (o *V1BuildStatus) SetOutputDockerImageReference(v string) {
	o.OutputDockerImageReference = &v
}

// GetPhase returns the Phase field value
func (o *V1BuildStatus) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *V1BuildStatus) SetPhase(v string) {
	o.Phase = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *V1BuildStatus) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *V1BuildStatus) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *V1BuildStatus) SetReason(v string) {
	o.Reason = &v
}

// GetStages returns the Stages field value if set, zero value otherwise.
func (o *V1BuildStatus) GetStages() []V1StageInfo {
	if o == nil || IsNil(o.Stages) {
		var ret []V1StageInfo
		return ret
	}
	return o.Stages
}

// GetStagesOk returns a tuple with the Stages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetStagesOk() ([]V1StageInfo, bool) {
	if o == nil || IsNil(o.Stages) {
		return nil, false
	}
	return o.Stages, true
}

// HasStages returns a boolean if a field has been set.
func (o *V1BuildStatus) HasStages() bool {
	if o != nil && !IsNil(o.Stages) {
		return true
	}

	return false
}

// SetStages gets a reference to the given []V1StageInfo and assigns it to the Stages field.
func (o *V1BuildStatus) SetStages(v []V1StageInfo) {
	o.Stages = v
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *V1BuildStatus) GetStartTimestamp() string {
	if o == nil || IsNil(o.StartTimestamp) {
		var ret string
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BuildStatus) GetStartTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.StartTimestamp) {
		return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *V1BuildStatus) HasStartTimestamp() bool {
	if o != nil && !IsNil(o.StartTimestamp) {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given string and assigns it to the StartTimestamp field.
func (o *V1BuildStatus) SetStartTimestamp(v string) {
	o.StartTimestamp = &v
}

func (o V1BuildStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BuildStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cancelled) {
		toSerialize["cancelled"] = o.Cancelled
	}
	if !IsNil(o.CompletionTimestamp) {
		toSerialize["completionTimestamp"] = o.CompletionTimestamp
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.LogSnippet) {
		toSerialize["logSnippet"] = o.LogSnippet
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.OutputDockerImageReference) {
		toSerialize["outputDockerImageReference"] = o.OutputDockerImageReference
	}
	toSerialize["phase"] = o.Phase
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Stages) {
		toSerialize["stages"] = o.Stages
	}
	if !IsNil(o.StartTimestamp) {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	return toSerialize, nil
}

type NullableV1BuildStatus struct {
	value *V1BuildStatus
	isSet bool
}

func (v NullableV1BuildStatus) Get() *V1BuildStatus {
	return v.value
}

func (v *NullableV1BuildStatus) Set(val *V1BuildStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BuildStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BuildStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BuildStatus(val *V1BuildStatus) *NullableV1BuildStatus {
	return &NullableV1BuildStatus{value: val, isSet: true}
}

func (v NullableV1BuildStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BuildStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


