/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1NodeConfigSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NodeConfigSource{}

// V1NodeConfigSource NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.
type V1NodeConfigSource struct {
	ConfigMap *V1ConfigMapNodeConfigSource `json:"configMap,omitempty"`
}

// NewV1NodeConfigSource instantiates a new V1NodeConfigSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NodeConfigSource() *V1NodeConfigSource {
	this := V1NodeConfigSource{}
	return &this
}

// NewV1NodeConfigSourceWithDefaults instantiates a new V1NodeConfigSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NodeConfigSourceWithDefaults() *V1NodeConfigSource {
	this := V1NodeConfigSource{}
	return &this
}

// GetConfigMap returns the ConfigMap field value if set, zero value otherwise.
func (o *V1NodeConfigSource) GetConfigMap() V1ConfigMapNodeConfigSource {
	if o == nil || IsNil(o.ConfigMap) {
		var ret V1ConfigMapNodeConfigSource
		return ret
	}
	return *o.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeConfigSource) GetConfigMapOk() (*V1ConfigMapNodeConfigSource, bool) {
	if o == nil || IsNil(o.ConfigMap) {
		return nil, false
	}
	return o.ConfigMap, true
}

// HasConfigMap returns a boolean if a field has been set.
func (o *V1NodeConfigSource) HasConfigMap() bool {
	if o != nil && !IsNil(o.ConfigMap) {
		return true
	}

	return false
}

// SetConfigMap gets a reference to the given V1ConfigMapNodeConfigSource and assigns it to the ConfigMap field.
func (o *V1NodeConfigSource) SetConfigMap(v V1ConfigMapNodeConfigSource) {
	o.ConfigMap = &v
}

func (o V1NodeConfigSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NodeConfigSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigMap) {
		toSerialize["configMap"] = o.ConfigMap
	}
	return toSerialize, nil
}

type NullableV1NodeConfigSource struct {
	value *V1NodeConfigSource
	isSet bool
}

func (v NullableV1NodeConfigSource) Get() *V1NodeConfigSource {
	return v.value
}

func (v *NullableV1NodeConfigSource) Set(val *V1NodeConfigSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NodeConfigSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NodeConfigSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NodeConfigSource(val *V1NodeConfigSource) *NullableV1NodeConfigSource {
	return &NullableV1NodeConfigSource{value: val, isSet: true}
}

func (v NullableV1NodeConfigSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NodeConfigSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


