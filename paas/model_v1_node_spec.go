/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1NodeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NodeSpec{}

// V1NodeSpec NodeSpec describes the attributes that a node is created with.
type V1NodeSpec struct {
	ConfigSource *V1NodeConfigSource `json:"configSource,omitempty"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
	ExternalID *string `json:"externalID,omitempty"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCIDR *string `json:"podCIDR,omitempty"`
	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	ProviderID *string `json:"providerID,omitempty"`
	// If specified, the node's taints.
	Taints []V1Taint `json:"taints,omitempty"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	Unschedulable *bool `json:"unschedulable,omitempty"`
}

// NewV1NodeSpec instantiates a new V1NodeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NodeSpec() *V1NodeSpec {
	this := V1NodeSpec{}
	return &this
}

// NewV1NodeSpecWithDefaults instantiates a new V1NodeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NodeSpecWithDefaults() *V1NodeSpec {
	this := V1NodeSpec{}
	return &this
}

// GetConfigSource returns the ConfigSource field value if set, zero value otherwise.
func (o *V1NodeSpec) GetConfigSource() V1NodeConfigSource {
	if o == nil || IsNil(o.ConfigSource) {
		var ret V1NodeConfigSource
		return ret
	}
	return *o.ConfigSource
}

// GetConfigSourceOk returns a tuple with the ConfigSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeSpec) GetConfigSourceOk() (*V1NodeConfigSource, bool) {
	if o == nil || IsNil(o.ConfigSource) {
		return nil, false
	}
	return o.ConfigSource, true
}

// HasConfigSource returns a boolean if a field has been set.
func (o *V1NodeSpec) HasConfigSource() bool {
	if o != nil && !IsNil(o.ConfigSource) {
		return true
	}

	return false
}

// SetConfigSource gets a reference to the given V1NodeConfigSource and assigns it to the ConfigSource field.
func (o *V1NodeSpec) SetConfigSource(v V1NodeConfigSource) {
	o.ConfigSource = &v
}

// GetExternalID returns the ExternalID field value if set, zero value otherwise.
func (o *V1NodeSpec) GetExternalID() string {
	if o == nil || IsNil(o.ExternalID) {
		var ret string
		return ret
	}
	return *o.ExternalID
}

// GetExternalIDOk returns a tuple with the ExternalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeSpec) GetExternalIDOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalID) {
		return nil, false
	}
	return o.ExternalID, true
}

// HasExternalID returns a boolean if a field has been set.
func (o *V1NodeSpec) HasExternalID() bool {
	if o != nil && !IsNil(o.ExternalID) {
		return true
	}

	return false
}

// SetExternalID gets a reference to the given string and assigns it to the ExternalID field.
func (o *V1NodeSpec) SetExternalID(v string) {
	o.ExternalID = &v
}

// GetPodCIDR returns the PodCIDR field value if set, zero value otherwise.
func (o *V1NodeSpec) GetPodCIDR() string {
	if o == nil || IsNil(o.PodCIDR) {
		var ret string
		return ret
	}
	return *o.PodCIDR
}

// GetPodCIDROk returns a tuple with the PodCIDR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeSpec) GetPodCIDROk() (*string, bool) {
	if o == nil || IsNil(o.PodCIDR) {
		return nil, false
	}
	return o.PodCIDR, true
}

// HasPodCIDR returns a boolean if a field has been set.
func (o *V1NodeSpec) HasPodCIDR() bool {
	if o != nil && !IsNil(o.PodCIDR) {
		return true
	}

	return false
}

// SetPodCIDR gets a reference to the given string and assigns it to the PodCIDR field.
func (o *V1NodeSpec) SetPodCIDR(v string) {
	o.PodCIDR = &v
}

// GetProviderID returns the ProviderID field value if set, zero value otherwise.
func (o *V1NodeSpec) GetProviderID() string {
	if o == nil || IsNil(o.ProviderID) {
		var ret string
		return ret
	}
	return *o.ProviderID
}

// GetProviderIDOk returns a tuple with the ProviderID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeSpec) GetProviderIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderID) {
		return nil, false
	}
	return o.ProviderID, true
}

// HasProviderID returns a boolean if a field has been set.
func (o *V1NodeSpec) HasProviderID() bool {
	if o != nil && !IsNil(o.ProviderID) {
		return true
	}

	return false
}

// SetProviderID gets a reference to the given string and assigns it to the ProviderID field.
func (o *V1NodeSpec) SetProviderID(v string) {
	o.ProviderID = &v
}

// GetTaints returns the Taints field value if set, zero value otherwise.
func (o *V1NodeSpec) GetTaints() []V1Taint {
	if o == nil || IsNil(o.Taints) {
		var ret []V1Taint
		return ret
	}
	return o.Taints
}

// GetTaintsOk returns a tuple with the Taints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeSpec) GetTaintsOk() ([]V1Taint, bool) {
	if o == nil || IsNil(o.Taints) {
		return nil, false
	}
	return o.Taints, true
}

// HasTaints returns a boolean if a field has been set.
func (o *V1NodeSpec) HasTaints() bool {
	if o != nil && !IsNil(o.Taints) {
		return true
	}

	return false
}

// SetTaints gets a reference to the given []V1Taint and assigns it to the Taints field.
func (o *V1NodeSpec) SetTaints(v []V1Taint) {
	o.Taints = v
}

// GetUnschedulable returns the Unschedulable field value if set, zero value otherwise.
func (o *V1NodeSpec) GetUnschedulable() bool {
	if o == nil || IsNil(o.Unschedulable) {
		var ret bool
		return ret
	}
	return *o.Unschedulable
}

// GetUnschedulableOk returns a tuple with the Unschedulable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NodeSpec) GetUnschedulableOk() (*bool, bool) {
	if o == nil || IsNil(o.Unschedulable) {
		return nil, false
	}
	return o.Unschedulable, true
}

// HasUnschedulable returns a boolean if a field has been set.
func (o *V1NodeSpec) HasUnschedulable() bool {
	if o != nil && !IsNil(o.Unschedulable) {
		return true
	}

	return false
}

// SetUnschedulable gets a reference to the given bool and assigns it to the Unschedulable field.
func (o *V1NodeSpec) SetUnschedulable(v bool) {
	o.Unschedulable = &v
}

func (o V1NodeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NodeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigSource) {
		toSerialize["configSource"] = o.ConfigSource
	}
	if !IsNil(o.ExternalID) {
		toSerialize["externalID"] = o.ExternalID
	}
	if !IsNil(o.PodCIDR) {
		toSerialize["podCIDR"] = o.PodCIDR
	}
	if !IsNil(o.ProviderID) {
		toSerialize["providerID"] = o.ProviderID
	}
	if !IsNil(o.Taints) {
		toSerialize["taints"] = o.Taints
	}
	if !IsNil(o.Unschedulable) {
		toSerialize["unschedulable"] = o.Unschedulable
	}
	return toSerialize, nil
}

type NullableV1NodeSpec struct {
	value *V1NodeSpec
	isSet bool
}

func (v NullableV1NodeSpec) Get() *V1NodeSpec {
	return v.value
}

func (v *NullableV1NodeSpec) Set(val *V1NodeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NodeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NodeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NodeSpec(val *V1NodeSpec) *NullableV1NodeSpec {
	return &NullableV1NodeSpec{value: val, isSet: true}
}

func (v NullableV1NodeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NodeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


