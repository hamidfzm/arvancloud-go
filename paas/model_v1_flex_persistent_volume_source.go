/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1FlexPersistentVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1FlexPersistentVolumeSource{}

// V1FlexPersistentVolumeSource FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
type V1FlexPersistentVolumeSource struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.
	FsType *string `json:"fsType,omitempty"`
	// Optional: Extra command options if any.
	Options map[string]interface{} `json:"options,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef *V1SecretReference `json:"secretRef,omitempty"`
}

// NewV1FlexPersistentVolumeSource instantiates a new V1FlexPersistentVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1FlexPersistentVolumeSource(driver string) *V1FlexPersistentVolumeSource {
	this := V1FlexPersistentVolumeSource{}
	this.Driver = driver
	return &this
}

// NewV1FlexPersistentVolumeSourceWithDefaults instantiates a new V1FlexPersistentVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1FlexPersistentVolumeSourceWithDefaults() *V1FlexPersistentVolumeSource {
	this := V1FlexPersistentVolumeSource{}
	return &this
}

// GetDriver returns the Driver field value
func (o *V1FlexPersistentVolumeSource) GetDriver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Driver
}

// GetDriverOk returns a tuple with the Driver field value
// and a boolean to check if the value has been set.
func (o *V1FlexPersistentVolumeSource) GetDriverOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Driver, true
}

// SetDriver sets field value
func (o *V1FlexPersistentVolumeSource) SetDriver(v string) {
	o.Driver = v
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1FlexPersistentVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexPersistentVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1FlexPersistentVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1FlexPersistentVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *V1FlexPersistentVolumeSource) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexPersistentVolumeSource) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *V1FlexPersistentVolumeSource) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *V1FlexPersistentVolumeSource) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1FlexPersistentVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexPersistentVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1FlexPersistentVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1FlexPersistentVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *V1FlexPersistentVolumeSource) GetSecretRef() V1SecretReference {
	if o == nil || IsNil(o.SecretRef) {
		var ret V1SecretReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexPersistentVolumeSource) GetSecretRefOk() (*V1SecretReference, bool) {
	if o == nil || IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *V1FlexPersistentVolumeSource) HasSecretRef() bool {
	if o != nil && !IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1SecretReference and assigns it to the SecretRef field.
func (o *V1FlexPersistentVolumeSource) SetSecretRef(v V1SecretReference) {
	o.SecretRef = &v
}

func (o V1FlexPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1FlexPersistentVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["driver"] = o.Driver
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	return toSerialize, nil
}

type NullableV1FlexPersistentVolumeSource struct {
	value *V1FlexPersistentVolumeSource
	isSet bool
}

func (v NullableV1FlexPersistentVolumeSource) Get() *V1FlexPersistentVolumeSource {
	return v.value
}

func (v *NullableV1FlexPersistentVolumeSource) Set(val *V1FlexPersistentVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FlexPersistentVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FlexPersistentVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FlexPersistentVolumeSource(val *V1FlexPersistentVolumeSource) *NullableV1FlexPersistentVolumeSource {
	return &NullableV1FlexPersistentVolumeSource{value: val, isSet: true}
}

func (v NullableV1FlexPersistentVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FlexPersistentVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


