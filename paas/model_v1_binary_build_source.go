/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1BinaryBuildSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1BinaryBuildSource{}

// V1BinaryBuildSource BinaryBuildSource describes a binary file to be used for the Docker and Source build strategies, where the file will be extracted and used as the build source.
type V1BinaryBuildSource struct {
	// asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying \"webapp.war\" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.
	AsFile *string `json:"asFile,omitempty"`
}

// NewV1BinaryBuildSource instantiates a new V1BinaryBuildSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BinaryBuildSource() *V1BinaryBuildSource {
	this := V1BinaryBuildSource{}
	return &this
}

// NewV1BinaryBuildSourceWithDefaults instantiates a new V1BinaryBuildSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BinaryBuildSourceWithDefaults() *V1BinaryBuildSource {
	this := V1BinaryBuildSource{}
	return &this
}

// GetAsFile returns the AsFile field value if set, zero value otherwise.
func (o *V1BinaryBuildSource) GetAsFile() string {
	if o == nil || IsNil(o.AsFile) {
		var ret string
		return ret
	}
	return *o.AsFile
}

// GetAsFileOk returns a tuple with the AsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BinaryBuildSource) GetAsFileOk() (*string, bool) {
	if o == nil || IsNil(o.AsFile) {
		return nil, false
	}
	return o.AsFile, true
}

// HasAsFile returns a boolean if a field has been set.
func (o *V1BinaryBuildSource) HasAsFile() bool {
	if o != nil && !IsNil(o.AsFile) {
		return true
	}

	return false
}

// SetAsFile gets a reference to the given string and assigns it to the AsFile field.
func (o *V1BinaryBuildSource) SetAsFile(v string) {
	o.AsFile = &v
}

func (o V1BinaryBuildSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1BinaryBuildSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsFile) {
		toSerialize["asFile"] = o.AsFile
	}
	return toSerialize, nil
}

type NullableV1BinaryBuildSource struct {
	value *V1BinaryBuildSource
	isSet bool
}

func (v NullableV1BinaryBuildSource) Get() *V1BinaryBuildSource {
	return v.value
}

func (v *NullableV1BinaryBuildSource) Set(val *V1BinaryBuildSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BinaryBuildSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BinaryBuildSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BinaryBuildSource(val *V1BinaryBuildSource) *NullableV1BinaryBuildSource {
	return &NullableV1BinaryBuildSource{value: val, isSet: true}
}

func (v NullableV1BinaryBuildSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BinaryBuildSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


