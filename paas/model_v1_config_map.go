/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ConfigMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ConfigMap{}

// V1ConfigMap ConfigMap holds configuration data for pods to consume.
type V1ConfigMap struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData map[string]interface{} `json:"binaryData,omitempty"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
	Data map[string]interface{} `json:"data,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
}

// NewV1ConfigMap instantiates a new V1ConfigMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ConfigMap() *V1ConfigMap {
	this := V1ConfigMap{}
	return &this
}

// NewV1ConfigMapWithDefaults instantiates a new V1ConfigMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigMapWithDefaults() *V1ConfigMap {
	this := V1ConfigMap{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1ConfigMap) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMap) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1ConfigMap) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1ConfigMap) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetBinaryData returns the BinaryData field value if set, zero value otherwise.
func (o *V1ConfigMap) GetBinaryData() map[string]interface{} {
	if o == nil || IsNil(o.BinaryData) {
		var ret map[string]interface{}
		return ret
	}
	return o.BinaryData
}

// GetBinaryDataOk returns a tuple with the BinaryData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMap) GetBinaryDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BinaryData) {
		return map[string]interface{}{}, false
	}
	return o.BinaryData, true
}

// HasBinaryData returns a boolean if a field has been set.
func (o *V1ConfigMap) HasBinaryData() bool {
	if o != nil && !IsNil(o.BinaryData) {
		return true
	}

	return false
}

// SetBinaryData gets a reference to the given map[string]interface{} and assigns it to the BinaryData field.
func (o *V1ConfigMap) SetBinaryData(v map[string]interface{}) {
	o.BinaryData = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *V1ConfigMap) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMap) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *V1ConfigMap) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *V1ConfigMap) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1ConfigMap) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMap) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1ConfigMap) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1ConfigMap) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1ConfigMap) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigMap) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1ConfigMap) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1ConfigMap) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

func (o V1ConfigMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ConfigMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.BinaryData) {
		toSerialize["binaryData"] = o.BinaryData
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableV1ConfigMap struct {
	value *V1ConfigMap
	isSet bool
}

func (v NullableV1ConfigMap) Get() *V1ConfigMap {
	return v.value
}

func (v *NullableV1ConfigMap) Set(val *V1ConfigMap) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConfigMap) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConfigMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConfigMap(val *V1ConfigMap) *NullableV1ConfigMap {
	return &NullableV1ConfigMap{value: val, isSet: true}
}

func (v NullableV1ConfigMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConfigMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


