/*
Arvancloud PaaS REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paas

import (
	"encoding/json"
)

// checks if the V1ImageLayer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ImageLayer{}

// V1ImageLayer ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.
type V1ImageLayer struct {
	// MediaType of the referenced object.
	MediaType string `json:"mediaType"`
	// Name of the layer as defined by the underlying store.
	Name string `json:"name"`
	// Size of the layer in bytes as defined by the underlying store.
	Size int64 `json:"size"`
}

// NewV1ImageLayer instantiates a new V1ImageLayer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ImageLayer(mediaType string, name string, size int64) *V1ImageLayer {
	this := V1ImageLayer{}
	this.MediaType = mediaType
	this.Name = name
	this.Size = size
	return &this
}

// NewV1ImageLayerWithDefaults instantiates a new V1ImageLayer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ImageLayerWithDefaults() *V1ImageLayer {
	this := V1ImageLayer{}
	return &this
}

// GetMediaType returns the MediaType field value
func (o *V1ImageLayer) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *V1ImageLayer) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *V1ImageLayer) SetMediaType(v string) {
	o.MediaType = v
}

// GetName returns the Name field value
func (o *V1ImageLayer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1ImageLayer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1ImageLayer) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *V1ImageLayer) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *V1ImageLayer) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *V1ImageLayer) SetSize(v int64) {
	o.Size = v
}

func (o V1ImageLayer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ImageLayer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mediaType"] = o.MediaType
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

type NullableV1ImageLayer struct {
	value *V1ImageLayer
	isSet bool
}

func (v NullableV1ImageLayer) Get() *V1ImageLayer {
	return v.value
}

func (v *NullableV1ImageLayer) Set(val *V1ImageLayer) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ImageLayer) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ImageLayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ImageLayer(val *V1ImageLayer) *NullableV1ImageLayer {
	return &NullableV1ImageLayer{value: val, isSet: true}
}

func (v NullableV1ImageLayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ImageLayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


