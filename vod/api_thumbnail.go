/*
Arvan VOD

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vod

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// ThumbnailAPIService ThumbnailAPI service
type ThumbnailAPIService service

type ApiVideosVideoThumbnailGetRequest struct {
	ctx context.Context
	ApiService *ThumbnailAPIService
	video string
	secureIp *string
	secureExpireTime *int32
}

// The IP address for generate secure links for. If channel is secure default is request IP
func (r ApiVideosVideoThumbnailGetRequest) SecureIp(secureIp string) ApiVideosVideoThumbnailGetRequest {
	r.secureIp = &secureIp
	return r
}

// The Unix Timestamp for expire secure links.      *          If channel is secure default is 24 hours later from now
func (r ApiVideosVideoThumbnailGetRequest) SecureExpireTime(secureExpireTime int32) ApiVideosVideoThumbnailGetRequest {
	r.secureExpireTime = &secureExpireTime
	return r
}

func (r ApiVideosVideoThumbnailGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.VideosVideoThumbnailGetExecute(r)
}

/*
VideosVideoThumbnailGet Display video thumbnail.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param video The Id of video
 @return ApiVideosVideoThumbnailGetRequest
*/
func (a *ThumbnailAPIService) VideosVideoThumbnailGet(ctx context.Context, video string) ApiVideosVideoThumbnailGetRequest {
	return ApiVideosVideoThumbnailGetRequest{
		ApiService: a,
		ctx: ctx,
		video: video,
	}
}

// Execute executes the request
func (a *ThumbnailAPIService) VideosVideoThumbnailGetExecute(r ApiVideosVideoThumbnailGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailAPIService.VideosVideoThumbnailGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"video"+"}", url.PathEscape(parameterValueToString(r.video, "video")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.secureIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secure_ip", r.secureIp, "")
	}
	if r.secureExpireTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secure_expire_time", r.secureExpireTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVideosVideoThumbnailPostRequest struct {
	ctx context.Context
	ApiService *ThumbnailAPIService
	video string
	thumbnail *os.File
	thumbnailTime *int32
}

// The png file.
func (r ApiVideosVideoThumbnailPostRequest) Thumbnail(thumbnail *os.File) ApiVideosVideoThumbnailPostRequest {
	r.thumbnail = thumbnail
	return r
}

// Specific video time
func (r ApiVideosVideoThumbnailPostRequest) ThumbnailTime(thumbnailTime int32) ApiVideosVideoThumbnailPostRequest {
	r.thumbnailTime = &thumbnailTime
	return r
}

func (r ApiVideosVideoThumbnailPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.VideosVideoThumbnailPostExecute(r)
}

/*
VideosVideoThumbnailPost Store a newly created thumbnail.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param video The Id of video
 @return ApiVideosVideoThumbnailPostRequest
*/
func (a *ThumbnailAPIService) VideosVideoThumbnailPost(ctx context.Context, video string) ApiVideosVideoThumbnailPostRequest {
	return ApiVideosVideoThumbnailPostRequest{
		ApiService: a,
		ctx: ctx,
		video: video,
	}
}

// Execute executes the request
func (a *ThumbnailAPIService) VideosVideoThumbnailPostExecute(r ApiVideosVideoThumbnailPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailAPIService.VideosVideoThumbnailPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"video"+"}", url.PathEscape(parameterValueToString(r.video, "video")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var thumbnailLocalVarFormFileName string
	var thumbnailLocalVarFileName     string
	var thumbnailLocalVarFileBytes    []byte

	thumbnailLocalVarFormFileName = "thumbnail"


	thumbnailLocalVarFile := r.thumbnail

	if thumbnailLocalVarFile != nil {
		fbs, _ := io.ReadAll(thumbnailLocalVarFile)

		thumbnailLocalVarFileBytes = fbs
		thumbnailLocalVarFileName = thumbnailLocalVarFile.Name()
		thumbnailLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: thumbnailLocalVarFileBytes, fileName: thumbnailLocalVarFileName, formFileName: thumbnailLocalVarFormFileName})
	}
	if r.thumbnailTime != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "thumbnail_time", r.thumbnailTime, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
