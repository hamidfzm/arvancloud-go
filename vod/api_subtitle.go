/*
Arvan VOD

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vod

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// SubtitleAPIService SubtitleAPI service
type SubtitleAPIService service

type ApiSubtitlesSubtitleDeleteRequest struct {
	ctx context.Context
	ApiService *SubtitleAPIService
	subtitle string
}

func (r ApiSubtitlesSubtitleDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SubtitlesSubtitleDeleteExecute(r)
}

/*
SubtitlesSubtitleDelete Remove the specified subtitle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subtitle The Id of subtitle
 @return ApiSubtitlesSubtitleDeleteRequest
*/
func (a *SubtitleAPIService) SubtitlesSubtitleDelete(ctx context.Context, subtitle string) ApiSubtitlesSubtitleDeleteRequest {
	return ApiSubtitlesSubtitleDeleteRequest{
		ApiService: a,
		ctx: ctx,
		subtitle: subtitle,
	}
}

// Execute executes the request
func (a *SubtitleAPIService) SubtitlesSubtitleDeleteExecute(r ApiSubtitlesSubtitleDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.SubtitlesSubtitleDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subtitles/{subtitle}"
	localVarPath = strings.Replace(localVarPath, "{"+"subtitle"+"}", url.PathEscape(parameterValueToString(r.subtitle, "subtitle")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSubtitlesSubtitleGetRequest struct {
	ctx context.Context
	ApiService *SubtitleAPIService
	subtitle string
	secureIp *string
	secureExpireTime *int32
}

// The IP address for generate secure links for. If channel is secure default is request IP
func (r ApiSubtitlesSubtitleGetRequest) SecureIp(secureIp string) ApiSubtitlesSubtitleGetRequest {
	r.secureIp = &secureIp
	return r
}

// The Unix Timestamp for expire secure links.      *          If channel is secure default is 24 hours later from now
func (r ApiSubtitlesSubtitleGetRequest) SecureExpireTime(secureExpireTime int32) ApiSubtitlesSubtitleGetRequest {
	r.secureExpireTime = &secureExpireTime
	return r
}

func (r ApiSubtitlesSubtitleGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SubtitlesSubtitleGetExecute(r)
}

/*
SubtitlesSubtitleGet Return the specified subtitle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subtitle The Id of subtitle
 @return ApiSubtitlesSubtitleGetRequest
*/
func (a *SubtitleAPIService) SubtitlesSubtitleGet(ctx context.Context, subtitle string) ApiSubtitlesSubtitleGetRequest {
	return ApiSubtitlesSubtitleGetRequest{
		ApiService: a,
		ctx: ctx,
		subtitle: subtitle,
	}
}

// Execute executes the request
func (a *SubtitleAPIService) SubtitlesSubtitleGetExecute(r ApiSubtitlesSubtitleGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.SubtitlesSubtitleGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subtitles/{subtitle}"
	localVarPath = strings.Replace(localVarPath, "{"+"subtitle"+"}", url.PathEscape(parameterValueToString(r.subtitle, "subtitle")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.secureIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secure_ip", r.secureIp, "")
	}
	if r.secureExpireTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secure_expire_time", r.secureExpireTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVideosVideoSubtitlesGetRequest struct {
	ctx context.Context
	ApiService *SubtitleAPIService
	video string
	secureIp *string
	secureExpireTime *int32
}

// The IP address for generate secure links for. If channel is secure default is request IP
func (r ApiVideosVideoSubtitlesGetRequest) SecureIp(secureIp string) ApiVideosVideoSubtitlesGetRequest {
	r.secureIp = &secureIp
	return r
}

// The Unix Timestamp for expire secure links.      *          If channel is secure default is 24 hours later from now
func (r ApiVideosVideoSubtitlesGetRequest) SecureExpireTime(secureExpireTime int32) ApiVideosVideoSubtitlesGetRequest {
	r.secureExpireTime = &secureExpireTime
	return r
}

func (r ApiVideosVideoSubtitlesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.VideosVideoSubtitlesGetExecute(r)
}

/*
VideosVideoSubtitlesGet Display a listing of the subtitle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param video The Id of video
 @return ApiVideosVideoSubtitlesGetRequest
*/
func (a *SubtitleAPIService) VideosVideoSubtitlesGet(ctx context.Context, video string) ApiVideosVideoSubtitlesGetRequest {
	return ApiVideosVideoSubtitlesGetRequest{
		ApiService: a,
		ctx: ctx,
		video: video,
	}
}

// Execute executes the request
func (a *SubtitleAPIService) VideosVideoSubtitlesGetExecute(r ApiVideosVideoSubtitlesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.VideosVideoSubtitlesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video}/subtitles"
	localVarPath = strings.Replace(localVarPath, "{"+"video"+"}", url.PathEscape(parameterValueToString(r.video, "video")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.secureIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secure_ip", r.secureIp, "")
	}
	if r.secureExpireTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secure_expire_time", r.secureExpireTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVideosVideoSubtitlesPostRequest struct {
	ctx context.Context
	ApiService *SubtitleAPIService
	video string
	lang *string
	subtitle *os.File
}

// Subtitle language
func (r ApiVideosVideoSubtitlesPostRequest) Lang(lang string) ApiVideosVideoSubtitlesPostRequest {
	r.lang = &lang
	return r
}

// The SRT or VTT subtitle file.
func (r ApiVideosVideoSubtitlesPostRequest) Subtitle(subtitle *os.File) ApiVideosVideoSubtitlesPostRequest {
	r.subtitle = subtitle
	return r
}

func (r ApiVideosVideoSubtitlesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.VideosVideoSubtitlesPostExecute(r)
}

/*
VideosVideoSubtitlesPost Store a newly created subtitle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param video The Id of video
 @return ApiVideosVideoSubtitlesPostRequest
*/
func (a *SubtitleAPIService) VideosVideoSubtitlesPost(ctx context.Context, video string) ApiVideosVideoSubtitlesPostRequest {
	return ApiVideosVideoSubtitlesPostRequest{
		ApiService: a,
		ctx: ctx,
		video: video,
	}
}

// Execute executes the request
func (a *SubtitleAPIService) VideosVideoSubtitlesPostExecute(r ApiVideosVideoSubtitlesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.VideosVideoSubtitlesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/videos/{video}/subtitles"
	localVarPath = strings.Replace(localVarPath, "{"+"video"+"}", url.PathEscape(parameterValueToString(r.video, "video")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lang == nil {
		return nil, reportError("lang is required and must be specified")
	}
	if r.subtitle == nil {
		return nil, reportError("subtitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "lang", r.lang, "")
	var subtitleLocalVarFormFileName string
	var subtitleLocalVarFileName     string
	var subtitleLocalVarFileBytes    []byte

	subtitleLocalVarFormFileName = "subtitle"


	subtitleLocalVarFile := r.subtitle

	if subtitleLocalVarFile != nil {
		fbs, _ := io.ReadAll(subtitleLocalVarFile)

		subtitleLocalVarFileBytes = fbs
		subtitleLocalVarFileName = subtitleLocalVarFile.Name()
		subtitleLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: subtitleLocalVarFileBytes, fileName: subtitleLocalVarFileName, formFileName: subtitleLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
