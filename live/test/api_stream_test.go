/*
Arvan LIVE

Testing StreamAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package live

import (
	"context"
	openapiclient "github.com/hamidfzm/arvancloud-go/live"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_live_StreamAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StreamAPIService StreamsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StreamAPI.StreamsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService StreamsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StreamAPI.StreamsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService StreamsStreamDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stream string

		httpRes, err := apiClient.StreamAPI.StreamsStreamDelete(context.Background(), stream).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService StreamsStreamGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stream string

		httpRes, err := apiClient.StreamAPI.StreamsStreamGet(context.Background(), stream).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService StreamsStreamPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stream string

		httpRes, err := apiClient.StreamAPI.StreamsStreamPatch(context.Background(), stream).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService StreamsStreamStartRecordGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StreamAPI.StreamsStreamStartRecordGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService StreamsStreamStopRecordGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StreamAPI.StreamsStreamStopRecordGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
