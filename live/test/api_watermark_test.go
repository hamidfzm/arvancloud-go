/*
Arvan LIVE

Testing WatermarkAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package live

import (
	"context"
	openapiclient "github.com/hamidfzm/arvancloud-go/live"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_live_WatermarkAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WatermarkAPIService WatermarksGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WatermarkAPI.WatermarksGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatermarkAPIService WatermarksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WatermarkAPI.WatermarksPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatermarkAPIService WatermarksWatermarkDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var watermark string

		httpRes, err := apiClient.WatermarkAPI.WatermarksWatermarkDelete(context.Background(), watermark).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatermarkAPIService WatermarksWatermarkGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var watermark string

		httpRes, err := apiClient.WatermarkAPI.WatermarksWatermarkGet(context.Background(), watermark).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WatermarkAPIService WatermarksWatermarkPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var watermark string

		httpRes, err := apiClient.WatermarkAPI.WatermarksWatermarkPatch(context.Background(), watermark).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
