/*
Arvan LIVE

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package live

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// WatermarkAPIService WatermarkAPI service
type WatermarkAPIService service

type ApiWatermarksGetRequest struct {
	ctx context.Context
	ApiService *WatermarkAPIService
	filter *string
	page *int32
	perPage *int32
}

// Filter result
func (r ApiWatermarksGetRequest) Filter(filter string) ApiWatermarksGetRequest {
	r.filter = &filter
	return r
}

// Page number
func (r ApiWatermarksGetRequest) Page(page int32) ApiWatermarksGetRequest {
	r.page = &page
	return r
}

// Page limit for query
func (r ApiWatermarksGetRequest) PerPage(perPage int32) ApiWatermarksGetRequest {
	r.perPage = &perPage
	return r
}

func (r ApiWatermarksGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.WatermarksGetExecute(r)
}

/*
WatermarksGet Return all watermarks.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatermarksGetRequest
*/
func (a *WatermarkAPIService) WatermarksGet(ctx context.Context) ApiWatermarksGetRequest {
	return ApiWatermarksGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WatermarkAPIService) WatermarksGetExecute(r ApiWatermarksGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatermarkAPIService.WatermarksGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watermarks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWatermarksPostRequest struct {
	ctx context.Context
	ApiService *WatermarkAPIService
	title *string
	watermark *os.File
	description *string
}

// Title of watermark
func (r ApiWatermarksPostRequest) Title(title string) ApiWatermarksPostRequest {
	r.title = &title
	return r
}

// Watermark file
func (r ApiWatermarksPostRequest) Watermark(watermark *os.File) ApiWatermarksPostRequest {
	r.watermark = watermark
	return r
}

// Description of watermark
func (r ApiWatermarksPostRequest) Description(description string) ApiWatermarksPostRequest {
	r.description = &description
	return r
}

func (r ApiWatermarksPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.WatermarksPostExecute(r)
}

/*
WatermarksPost Store a newly created Watermark.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatermarksPostRequest
*/
func (a *WatermarkAPIService) WatermarksPost(ctx context.Context) ApiWatermarksPostRequest {
	return ApiWatermarksPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WatermarkAPIService) WatermarksPostExecute(r ApiWatermarksPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatermarkAPIService.WatermarksPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watermarks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return nil, reportError("title is required and must be specified")
	}
	if r.watermark == nil {
		return nil, reportError("watermark is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "")
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description", r.description, "")
	}
	var watermarkLocalVarFormFileName string
	var watermarkLocalVarFileName     string
	var watermarkLocalVarFileBytes    []byte

	watermarkLocalVarFormFileName = "watermark"


	watermarkLocalVarFile := r.watermark

	if watermarkLocalVarFile != nil {
		fbs, _ := io.ReadAll(watermarkLocalVarFile)

		watermarkLocalVarFileBytes = fbs
		watermarkLocalVarFileName = watermarkLocalVarFile.Name()
		watermarkLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: watermarkLocalVarFileBytes, fileName: watermarkLocalVarFileName, formFileName: watermarkLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWatermarksWatermarkDeleteRequest struct {
	ctx context.Context
	ApiService *WatermarkAPIService
	watermark string
}

func (r ApiWatermarksWatermarkDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.WatermarksWatermarkDeleteExecute(r)
}

/*
WatermarksWatermarkDelete Remove the specified watermark.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param watermark The Id of watermark
 @return ApiWatermarksWatermarkDeleteRequest
*/
func (a *WatermarkAPIService) WatermarksWatermarkDelete(ctx context.Context, watermark string) ApiWatermarksWatermarkDeleteRequest {
	return ApiWatermarksWatermarkDeleteRequest{
		ApiService: a,
		ctx: ctx,
		watermark: watermark,
	}
}

// Execute executes the request
func (a *WatermarkAPIService) WatermarksWatermarkDeleteExecute(r ApiWatermarksWatermarkDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatermarkAPIService.WatermarksWatermarkDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watermarks/{watermark}"
	localVarPath = strings.Replace(localVarPath, "{"+"watermark"+"}", url.PathEscape(parameterValueToString(r.watermark, "watermark")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWatermarksWatermarkGetRequest struct {
	ctx context.Context
	ApiService *WatermarkAPIService
	watermark string
}

func (r ApiWatermarksWatermarkGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.WatermarksWatermarkGetExecute(r)
}

/*
WatermarksWatermarkGet Return the specified watermark.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param watermark The Id of watermark
 @return ApiWatermarksWatermarkGetRequest
*/
func (a *WatermarkAPIService) WatermarksWatermarkGet(ctx context.Context, watermark string) ApiWatermarksWatermarkGetRequest {
	return ApiWatermarksWatermarkGetRequest{
		ApiService: a,
		ctx: ctx,
		watermark: watermark,
	}
}

// Execute executes the request
func (a *WatermarkAPIService) WatermarksWatermarkGetExecute(r ApiWatermarksWatermarkGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatermarkAPIService.WatermarksWatermarkGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watermarks/{watermark}"
	localVarPath = strings.Replace(localVarPath, "{"+"watermark"+"}", url.PathEscape(parameterValueToString(r.watermark, "watermark")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWatermarksWatermarkPatchRequest struct {
	ctx context.Context
	ApiService *WatermarkAPIService
	watermark string
	body *WatermarksWatermarkPatchRequest
}

// Watermark details
func (r ApiWatermarksWatermarkPatchRequest) Body(body WatermarksWatermarkPatchRequest) ApiWatermarksWatermarkPatchRequest {
	r.body = &body
	return r
}

func (r ApiWatermarksWatermarkPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.WatermarksWatermarkPatchExecute(r)
}

/*
WatermarksWatermarkPatch Update the specified watermark.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param watermark The Id of watermark
 @return ApiWatermarksWatermarkPatchRequest
*/
func (a *WatermarkAPIService) WatermarksWatermarkPatch(ctx context.Context, watermark string) ApiWatermarksWatermarkPatchRequest {
	return ApiWatermarksWatermarkPatchRequest{
		ApiService: a,
		ctx: ctx,
		watermark: watermark,
	}
}

// Execute executes the request
func (a *WatermarkAPIService) WatermarksWatermarkPatchExecute(r ApiWatermarksWatermarkPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WatermarkAPIService.WatermarksWatermarkPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watermarks/{watermark}"
	localVarPath = strings.Replace(localVarPath, "{"+"watermark"+"}", url.PathEscape(parameterValueToString(r.watermark, "watermark")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
