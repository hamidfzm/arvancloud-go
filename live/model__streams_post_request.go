/*
Arvan LIVE

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package live

import (
	"encoding/json"
)

// checks if the StreamsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamsPostRequest{}

// StreamsPostRequest struct for StreamsPostRequest
type StreamsPostRequest struct {
	// Title of the stream
	Title string `json:"title"`
	// Description of the stream
	Description *string `json:"description,omitempty"`
	// Stream latency type
	Type string `json:"type"`
	// Way to receive input stream
	Mode string `json:"mode"`
	// Public URL of stream input in PULL mode
	InputUrl *string `json:"input_url,omitempty"`
	// Unique slug for your stream. Only contain lower case letters and digits
	Slug string `json:"slug"`
	// Timeshift (DVR) in minutes to watch the earlier content
	Timeshift *int32 `json:"timeshift,omitempty"`
	// stream fps mode
	FpsMode *string `json:"fps_mode,omitempty"`
	// Input steam frame per second
	Fps int32 `json:"fps"`
	// Set this value to True to archive the stream as a VoD
	ArchiveEnabled *bool `json:"archive_enabled,omitempty"`
	// Set this value to True to enable catchup for the stream
	CatchupEnabled *bool `json:"catchup_enabled,omitempty"`
	// Hours of catchup must be available for the stream
	CatchupPeriod *int32 `json:"catchup_period,omitempty"`
	// Way to archive stream
	ArchiveMode *string `json:"archive_mode,omitempty"`
	// Channel Id to save archive
	ChannelId *string `json:"channel_id,omitempty"`
	// If you want to use watermark for a video, use this ID
	WatermarkId *string `json:"watermark_id,omitempty"`
	// Area of the watermark if watermark_id presents
	WatermarkArea *string `json:"watermark_area,omitempty"`
	// Array of convert details
	ConvertInfo []StreamsPostRequestConvertInfoInner `json:"convert_info"`
	// Enable or disable secure link for all videos in channel
	SecureLinkEnabled *bool `json:"secure_link_enabled,omitempty"`
	// Key for generate secure links
	SecureLinkKey *string `json:"secure_link_key,omitempty"`
	// IP can be considered as an optional parameter
	SecureLinkWithIp *bool `json:"secure_link_with_ip,omitempty"`
	// Enable or disable Ads for created stream
	AdsEnabled *bool `json:"ads_enabled,omitempty"`
	// Ads present method
	PresentType *string `json:"present_type,omitempty"`
	// Created CampaignId in Ads
	CampaignId *string `json:"campaign_id,omitempty"`
}

// NewStreamsPostRequest instantiates a new StreamsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamsPostRequest(title string, type_ string, mode string, slug string, fps int32, convertInfo []StreamsPostRequestConvertInfoInner) *StreamsPostRequest {
	this := StreamsPostRequest{}
	this.Title = title
	this.Type = type_
	this.Mode = mode
	this.Slug = slug
	this.Fps = fps
	var archiveEnabled bool = false
	this.ArchiveEnabled = &archiveEnabled
	var catchupEnabled bool = false
	this.CatchupEnabled = &catchupEnabled
	this.ConvertInfo = convertInfo
	return &this
}

// NewStreamsPostRequestWithDefaults instantiates a new StreamsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamsPostRequestWithDefaults() *StreamsPostRequest {
	this := StreamsPostRequest{}
	var archiveEnabled bool = false
	this.ArchiveEnabled = &archiveEnabled
	var catchupEnabled bool = false
	this.CatchupEnabled = &catchupEnabled
	return &this
}

// GetTitle returns the Title field value
func (o *StreamsPostRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *StreamsPostRequest) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StreamsPostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *StreamsPostRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *StreamsPostRequest) SetType(v string) {
	o.Type = v
}

// GetMode returns the Mode field value
func (o *StreamsPostRequest) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *StreamsPostRequest) SetMode(v string) {
	o.Mode = v
}

// GetInputUrl returns the InputUrl field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetInputUrl() string {
	if o == nil || IsNil(o.InputUrl) {
		var ret string
		return ret
	}
	return *o.InputUrl
}

// GetInputUrlOk returns a tuple with the InputUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetInputUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InputUrl) {
		return nil, false
	}
	return o.InputUrl, true
}

// HasInputUrl returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasInputUrl() bool {
	if o != nil && !IsNil(o.InputUrl) {
		return true
	}

	return false
}

// SetInputUrl gets a reference to the given string and assigns it to the InputUrl field.
func (o *StreamsPostRequest) SetInputUrl(v string) {
	o.InputUrl = &v
}

// GetSlug returns the Slug field value
func (o *StreamsPostRequest) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *StreamsPostRequest) SetSlug(v string) {
	o.Slug = v
}

// GetTimeshift returns the Timeshift field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetTimeshift() int32 {
	if o == nil || IsNil(o.Timeshift) {
		var ret int32
		return ret
	}
	return *o.Timeshift
}

// GetTimeshiftOk returns a tuple with the Timeshift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetTimeshiftOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeshift) {
		return nil, false
	}
	return o.Timeshift, true
}

// HasTimeshift returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasTimeshift() bool {
	if o != nil && !IsNil(o.Timeshift) {
		return true
	}

	return false
}

// SetTimeshift gets a reference to the given int32 and assigns it to the Timeshift field.
func (o *StreamsPostRequest) SetTimeshift(v int32) {
	o.Timeshift = &v
}

// GetFpsMode returns the FpsMode field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetFpsMode() string {
	if o == nil || IsNil(o.FpsMode) {
		var ret string
		return ret
	}
	return *o.FpsMode
}

// GetFpsModeOk returns a tuple with the FpsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetFpsModeOk() (*string, bool) {
	if o == nil || IsNil(o.FpsMode) {
		return nil, false
	}
	return o.FpsMode, true
}

// HasFpsMode returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasFpsMode() bool {
	if o != nil && !IsNil(o.FpsMode) {
		return true
	}

	return false
}

// SetFpsMode gets a reference to the given string and assigns it to the FpsMode field.
func (o *StreamsPostRequest) SetFpsMode(v string) {
	o.FpsMode = &v
}

// GetFps returns the Fps field value
func (o *StreamsPostRequest) GetFps() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fps
}

// GetFpsOk returns a tuple with the Fps field value
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetFpsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fps, true
}

// SetFps sets field value
func (o *StreamsPostRequest) SetFps(v int32) {
	o.Fps = v
}

// GetArchiveEnabled returns the ArchiveEnabled field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetArchiveEnabled() bool {
	if o == nil || IsNil(o.ArchiveEnabled) {
		var ret bool
		return ret
	}
	return *o.ArchiveEnabled
}

// GetArchiveEnabledOk returns a tuple with the ArchiveEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetArchiveEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ArchiveEnabled) {
		return nil, false
	}
	return o.ArchiveEnabled, true
}

// HasArchiveEnabled returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasArchiveEnabled() bool {
	if o != nil && !IsNil(o.ArchiveEnabled) {
		return true
	}

	return false
}

// SetArchiveEnabled gets a reference to the given bool and assigns it to the ArchiveEnabled field.
func (o *StreamsPostRequest) SetArchiveEnabled(v bool) {
	o.ArchiveEnabled = &v
}

// GetCatchupEnabled returns the CatchupEnabled field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetCatchupEnabled() bool {
	if o == nil || IsNil(o.CatchupEnabled) {
		var ret bool
		return ret
	}
	return *o.CatchupEnabled
}

// GetCatchupEnabledOk returns a tuple with the CatchupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetCatchupEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CatchupEnabled) {
		return nil, false
	}
	return o.CatchupEnabled, true
}

// HasCatchupEnabled returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasCatchupEnabled() bool {
	if o != nil && !IsNil(o.CatchupEnabled) {
		return true
	}

	return false
}

// SetCatchupEnabled gets a reference to the given bool and assigns it to the CatchupEnabled field.
func (o *StreamsPostRequest) SetCatchupEnabled(v bool) {
	o.CatchupEnabled = &v
}

// GetCatchupPeriod returns the CatchupPeriod field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetCatchupPeriod() int32 {
	if o == nil || IsNil(o.CatchupPeriod) {
		var ret int32
		return ret
	}
	return *o.CatchupPeriod
}

// GetCatchupPeriodOk returns a tuple with the CatchupPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetCatchupPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.CatchupPeriod) {
		return nil, false
	}
	return o.CatchupPeriod, true
}

// HasCatchupPeriod returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasCatchupPeriod() bool {
	if o != nil && !IsNil(o.CatchupPeriod) {
		return true
	}

	return false
}

// SetCatchupPeriod gets a reference to the given int32 and assigns it to the CatchupPeriod field.
func (o *StreamsPostRequest) SetCatchupPeriod(v int32) {
	o.CatchupPeriod = &v
}

// GetArchiveMode returns the ArchiveMode field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetArchiveMode() string {
	if o == nil || IsNil(o.ArchiveMode) {
		var ret string
		return ret
	}
	return *o.ArchiveMode
}

// GetArchiveModeOk returns a tuple with the ArchiveMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetArchiveModeOk() (*string, bool) {
	if o == nil || IsNil(o.ArchiveMode) {
		return nil, false
	}
	return o.ArchiveMode, true
}

// HasArchiveMode returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasArchiveMode() bool {
	if o != nil && !IsNil(o.ArchiveMode) {
		return true
	}

	return false
}

// SetArchiveMode gets a reference to the given string and assigns it to the ArchiveMode field.
func (o *StreamsPostRequest) SetArchiveMode(v string) {
	o.ArchiveMode = &v
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetChannelId() string {
	if o == nil || IsNil(o.ChannelId) {
		var ret string
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetChannelIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelId) {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasChannelId() bool {
	if o != nil && !IsNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given string and assigns it to the ChannelId field.
func (o *StreamsPostRequest) SetChannelId(v string) {
	o.ChannelId = &v
}

// GetWatermarkId returns the WatermarkId field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetWatermarkId() string {
	if o == nil || IsNil(o.WatermarkId) {
		var ret string
		return ret
	}
	return *o.WatermarkId
}

// GetWatermarkIdOk returns a tuple with the WatermarkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetWatermarkIdOk() (*string, bool) {
	if o == nil || IsNil(o.WatermarkId) {
		return nil, false
	}
	return o.WatermarkId, true
}

// HasWatermarkId returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasWatermarkId() bool {
	if o != nil && !IsNil(o.WatermarkId) {
		return true
	}

	return false
}

// SetWatermarkId gets a reference to the given string and assigns it to the WatermarkId field.
func (o *StreamsPostRequest) SetWatermarkId(v string) {
	o.WatermarkId = &v
}

// GetWatermarkArea returns the WatermarkArea field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetWatermarkArea() string {
	if o == nil || IsNil(o.WatermarkArea) {
		var ret string
		return ret
	}
	return *o.WatermarkArea
}

// GetWatermarkAreaOk returns a tuple with the WatermarkArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetWatermarkAreaOk() (*string, bool) {
	if o == nil || IsNil(o.WatermarkArea) {
		return nil, false
	}
	return o.WatermarkArea, true
}

// HasWatermarkArea returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasWatermarkArea() bool {
	if o != nil && !IsNil(o.WatermarkArea) {
		return true
	}

	return false
}

// SetWatermarkArea gets a reference to the given string and assigns it to the WatermarkArea field.
func (o *StreamsPostRequest) SetWatermarkArea(v string) {
	o.WatermarkArea = &v
}

// GetConvertInfo returns the ConvertInfo field value
func (o *StreamsPostRequest) GetConvertInfo() []StreamsPostRequestConvertInfoInner {
	if o == nil {
		var ret []StreamsPostRequestConvertInfoInner
		return ret
	}

	return o.ConvertInfo
}

// GetConvertInfoOk returns a tuple with the ConvertInfo field value
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetConvertInfoOk() ([]StreamsPostRequestConvertInfoInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConvertInfo, true
}

// SetConvertInfo sets field value
func (o *StreamsPostRequest) SetConvertInfo(v []StreamsPostRequestConvertInfoInner) {
	o.ConvertInfo = v
}

// GetSecureLinkEnabled returns the SecureLinkEnabled field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetSecureLinkEnabled() bool {
	if o == nil || IsNil(o.SecureLinkEnabled) {
		var ret bool
		return ret
	}
	return *o.SecureLinkEnabled
}

// GetSecureLinkEnabledOk returns a tuple with the SecureLinkEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetSecureLinkEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureLinkEnabled) {
		return nil, false
	}
	return o.SecureLinkEnabled, true
}

// HasSecureLinkEnabled returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasSecureLinkEnabled() bool {
	if o != nil && !IsNil(o.SecureLinkEnabled) {
		return true
	}

	return false
}

// SetSecureLinkEnabled gets a reference to the given bool and assigns it to the SecureLinkEnabled field.
func (o *StreamsPostRequest) SetSecureLinkEnabled(v bool) {
	o.SecureLinkEnabled = &v
}

// GetSecureLinkKey returns the SecureLinkKey field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetSecureLinkKey() string {
	if o == nil || IsNil(o.SecureLinkKey) {
		var ret string
		return ret
	}
	return *o.SecureLinkKey
}

// GetSecureLinkKeyOk returns a tuple with the SecureLinkKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetSecureLinkKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecureLinkKey) {
		return nil, false
	}
	return o.SecureLinkKey, true
}

// HasSecureLinkKey returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasSecureLinkKey() bool {
	if o != nil && !IsNil(o.SecureLinkKey) {
		return true
	}

	return false
}

// SetSecureLinkKey gets a reference to the given string and assigns it to the SecureLinkKey field.
func (o *StreamsPostRequest) SetSecureLinkKey(v string) {
	o.SecureLinkKey = &v
}

// GetSecureLinkWithIp returns the SecureLinkWithIp field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetSecureLinkWithIp() bool {
	if o == nil || IsNil(o.SecureLinkWithIp) {
		var ret bool
		return ret
	}
	return *o.SecureLinkWithIp
}

// GetSecureLinkWithIpOk returns a tuple with the SecureLinkWithIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetSecureLinkWithIpOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureLinkWithIp) {
		return nil, false
	}
	return o.SecureLinkWithIp, true
}

// HasSecureLinkWithIp returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasSecureLinkWithIp() bool {
	if o != nil && !IsNil(o.SecureLinkWithIp) {
		return true
	}

	return false
}

// SetSecureLinkWithIp gets a reference to the given bool and assigns it to the SecureLinkWithIp field.
func (o *StreamsPostRequest) SetSecureLinkWithIp(v bool) {
	o.SecureLinkWithIp = &v
}

// GetAdsEnabled returns the AdsEnabled field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetAdsEnabled() bool {
	if o == nil || IsNil(o.AdsEnabled) {
		var ret bool
		return ret
	}
	return *o.AdsEnabled
}

// GetAdsEnabledOk returns a tuple with the AdsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetAdsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AdsEnabled) {
		return nil, false
	}
	return o.AdsEnabled, true
}

// HasAdsEnabled returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasAdsEnabled() bool {
	if o != nil && !IsNil(o.AdsEnabled) {
		return true
	}

	return false
}

// SetAdsEnabled gets a reference to the given bool and assigns it to the AdsEnabled field.
func (o *StreamsPostRequest) SetAdsEnabled(v bool) {
	o.AdsEnabled = &v
}

// GetPresentType returns the PresentType field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetPresentType() string {
	if o == nil || IsNil(o.PresentType) {
		var ret string
		return ret
	}
	return *o.PresentType
}

// GetPresentTypeOk returns a tuple with the PresentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetPresentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PresentType) {
		return nil, false
	}
	return o.PresentType, true
}

// HasPresentType returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasPresentType() bool {
	if o != nil && !IsNil(o.PresentType) {
		return true
	}

	return false
}

// SetPresentType gets a reference to the given string and assigns it to the PresentType field.
func (o *StreamsPostRequest) SetPresentType(v string) {
	o.PresentType = &v
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *StreamsPostRequest) GetCampaignId() string {
	if o == nil || IsNil(o.CampaignId) {
		var ret string
		return ret
	}
	return *o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPostRequest) GetCampaignIdOk() (*string, bool) {
	if o == nil || IsNil(o.CampaignId) {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *StreamsPostRequest) HasCampaignId() bool {
	if o != nil && !IsNil(o.CampaignId) {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given string and assigns it to the CampaignId field.
func (o *StreamsPostRequest) SetCampaignId(v string) {
	o.CampaignId = &v
}

func (o StreamsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	toSerialize["mode"] = o.Mode
	if !IsNil(o.InputUrl) {
		toSerialize["input_url"] = o.InputUrl
	}
	toSerialize["slug"] = o.Slug
	if !IsNil(o.Timeshift) {
		toSerialize["timeshift"] = o.Timeshift
	}
	if !IsNil(o.FpsMode) {
		toSerialize["fps_mode"] = o.FpsMode
	}
	toSerialize["fps"] = o.Fps
	if !IsNil(o.ArchiveEnabled) {
		toSerialize["archive_enabled"] = o.ArchiveEnabled
	}
	if !IsNil(o.CatchupEnabled) {
		toSerialize["catchup_enabled"] = o.CatchupEnabled
	}
	if !IsNil(o.CatchupPeriod) {
		toSerialize["catchup_period"] = o.CatchupPeriod
	}
	if !IsNil(o.ArchiveMode) {
		toSerialize["archive_mode"] = o.ArchiveMode
	}
	if !IsNil(o.ChannelId) {
		toSerialize["channel_id"] = o.ChannelId
	}
	if !IsNil(o.WatermarkId) {
		toSerialize["watermark_id"] = o.WatermarkId
	}
	if !IsNil(o.WatermarkArea) {
		toSerialize["watermark_area"] = o.WatermarkArea
	}
	toSerialize["convert_info"] = o.ConvertInfo
	if !IsNil(o.SecureLinkEnabled) {
		toSerialize["secure_link_enabled"] = o.SecureLinkEnabled
	}
	if !IsNil(o.SecureLinkKey) {
		toSerialize["secure_link_key"] = o.SecureLinkKey
	}
	if !IsNil(o.SecureLinkWithIp) {
		toSerialize["secure_link_with_ip"] = o.SecureLinkWithIp
	}
	if !IsNil(o.AdsEnabled) {
		toSerialize["ads_enabled"] = o.AdsEnabled
	}
	if !IsNil(o.PresentType) {
		toSerialize["present_type"] = o.PresentType
	}
	if !IsNil(o.CampaignId) {
		toSerialize["campaign_id"] = o.CampaignId
	}
	return toSerialize, nil
}

type NullableStreamsPostRequest struct {
	value *StreamsPostRequest
	isSet bool
}

func (v NullableStreamsPostRequest) Get() *StreamsPostRequest {
	return v.value
}

func (v *NullableStreamsPostRequest) Set(val *StreamsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamsPostRequest(val *StreamsPostRequest) *NullableStreamsPostRequest {
	return &NullableStreamsPostRequest{value: val, isSet: true}
}

func (v NullableStreamsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


