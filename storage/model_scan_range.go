/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ScanRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanRange{}

// ScanRange Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range.
type ScanRange struct {
	Start *int32 `json:"Start,omitempty"`
	End *int32 `json:"End,omitempty"`
}

// NewScanRange instantiates a new ScanRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanRange() *ScanRange {
	this := ScanRange{}
	return &this
}

// NewScanRangeWithDefaults instantiates a new ScanRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanRangeWithDefaults() *ScanRange {
	this := ScanRange{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ScanRange) GetStart() int32 {
	if o == nil || IsNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanRange) GetStartOk() (*int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ScanRange) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *ScanRange) SetStart(v int32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ScanRange) GetEnd() int32 {
	if o == nil || IsNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanRange) GetEndOk() (*int32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ScanRange) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *ScanRange) SetEnd(v int32) {
	o.End = &v
}

func (o ScanRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["Start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["End"] = o.End
	}
	return toSerialize, nil
}

type NullableScanRange struct {
	value *ScanRange
	isSet bool
}

func (v NullableScanRange) Get() *ScanRange {
	return v.value
}

func (v *NullableScanRange) Set(val *ScanRange) {
	v.value = val
	v.isSet = true
}

func (v NullableScanRange) IsSet() bool {
	return v.isSet
}

func (v *NullableScanRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanRange(val *ScanRange) *NullableScanRange {
	return &NullableScanRange{value: val, isSet: true}
}

func (v NullableScanRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


