/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the CommonPrefix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonPrefix{}

// CommonPrefix Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 
type CommonPrefix struct {
	Prefix *string `json:"Prefix,omitempty"`
}

// NewCommonPrefix instantiates a new CommonPrefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonPrefix() *CommonPrefix {
	this := CommonPrefix{}
	return &this
}

// NewCommonPrefixWithDefaults instantiates a new CommonPrefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonPrefixWithDefaults() *CommonPrefix {
	this := CommonPrefix{}
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *CommonPrefix) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPrefix) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *CommonPrefix) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *CommonPrefix) SetPrefix(v string) {
	o.Prefix = &v
}

func (o CommonPrefix) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonPrefix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	return toSerialize, nil
}

type NullableCommonPrefix struct {
	value *CommonPrefix
	isSet bool
}

func (v NullableCommonPrefix) Get() *CommonPrefix {
	return v.value
}

func (v *NullableCommonPrefix) Set(val *CommonPrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonPrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonPrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonPrefix(val *CommonPrefix) *NullableCommonPrefix {
	return &NullableCommonPrefix{value: val, isSet: true}
}

func (v NullableCommonPrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonPrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


