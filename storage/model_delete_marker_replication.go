/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the DeleteMarkerReplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteMarkerReplication{}

// DeleteMarkerReplication <p>Specifies whether ArvanCloud S3 replicates delete markers. If you specify a <code>Filter</code> in your replication configuration, you must also include a <code>DeleteMarkerReplication</code> element. If your <code>Filter</code> includes a <code>Tag</code> element, the <code>DeleteMarkerReplication</code> <code>Status</code> must be set to Disabled, because ArvanCloud S3 does not support replicating delete markers for tag-based rules. For an example configuration, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config\">Basic Rule Configuration</a>. </p> <p>For more information about delete marker replication, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html\">Basic Rule Configuration</a>. </p> <note> <p>If you are using an earlier version of the replication configuration, ArvanCloud S3 handles replication of delete markers differently.
type DeleteMarkerReplication struct {
	Status *DeleteMarkerReplicationStatus `json:"Status,omitempty"`
}

// NewDeleteMarkerReplication instantiates a new DeleteMarkerReplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteMarkerReplication() *DeleteMarkerReplication {
	this := DeleteMarkerReplication{}
	return &this
}

// NewDeleteMarkerReplicationWithDefaults instantiates a new DeleteMarkerReplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteMarkerReplicationWithDefaults() *DeleteMarkerReplication {
	this := DeleteMarkerReplication{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeleteMarkerReplication) GetStatus() DeleteMarkerReplicationStatus {
	if o == nil || IsNil(o.Status) {
		var ret DeleteMarkerReplicationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteMarkerReplication) GetStatusOk() (*DeleteMarkerReplicationStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeleteMarkerReplication) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DeleteMarkerReplicationStatus and assigns it to the Status field.
func (o *DeleteMarkerReplication) SetStatus(v DeleteMarkerReplicationStatus) {
	o.Status = &v
}

func (o DeleteMarkerReplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteMarkerReplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDeleteMarkerReplication struct {
	value *DeleteMarkerReplication
	isSet bool
}

func (v NullableDeleteMarkerReplication) Get() *DeleteMarkerReplication {
	return v.value
}

func (v *NullableDeleteMarkerReplication) Set(val *DeleteMarkerReplication) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteMarkerReplication) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteMarkerReplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteMarkerReplication(val *DeleteMarkerReplication) *NullableDeleteMarkerReplication {
	return &NullableDeleteMarkerReplication{value: val, isSet: true}
}

func (v NullableDeleteMarkerReplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteMarkerReplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


