/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// MFADelete the model 'MFADelete'
type MFADelete string

// List of MFADelete
const (
	MFADELETE_ENABLED MFADelete = "Enabled"
	MFADELETE_DISABLED MFADelete = "Disabled"
)

// All allowed values of MFADelete enum
var AllowedMFADeleteEnumValues = []MFADelete{
	"Enabled",
	"Disabled",
}

func (v *MFADelete) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MFADelete(value)
	for _, existing := range AllowedMFADeleteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MFADelete", value)
}

// NewMFADeleteFromValue returns a pointer to a valid MFADelete
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMFADeleteFromValue(v string) (*MFADelete, error) {
	ev := MFADelete(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MFADelete: valid values are %v", v, AllowedMFADeleteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MFADelete) IsValid() bool {
	for _, existing := range AllowedMFADeleteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MFADelete value
func (v MFADelete) Ptr() *MFADelete {
	return &v
}

type NullableMFADelete struct {
	value *MFADelete
	isSet bool
}

func (v NullableMFADelete) Get() *MFADelete {
	return v.value
}

func (v *NullableMFADelete) Set(val *MFADelete) {
	v.value = val
	v.isSet = true
}

func (v NullableMFADelete) IsSet() bool {
	return v.isSet
}

func (v *NullableMFADelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFADelete(val *MFADelete) *NullableMFADelete {
	return &NullableMFADelete{value: val, isSet: true}
}

func (v NullableMFADelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFADelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

