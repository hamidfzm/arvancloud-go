/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ReplicationTimeStatus the model 'ReplicationTimeStatus'
type ReplicationTimeStatus string

// List of ReplicationTimeStatus
const (
	REPLICATIONTIMESTATUS_ENABLED ReplicationTimeStatus = "Enabled"
	REPLICATIONTIMESTATUS_DISABLED ReplicationTimeStatus = "Disabled"
)

// All allowed values of ReplicationTimeStatus enum
var AllowedReplicationTimeStatusEnumValues = []ReplicationTimeStatus{
	"Enabled",
	"Disabled",
}

func (v *ReplicationTimeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationTimeStatus(value)
	for _, existing := range AllowedReplicationTimeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationTimeStatus", value)
}

// NewReplicationTimeStatusFromValue returns a pointer to a valid ReplicationTimeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationTimeStatusFromValue(v string) (*ReplicationTimeStatus, error) {
	ev := ReplicationTimeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationTimeStatus: valid values are %v", v, AllowedReplicationTimeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationTimeStatus) IsValid() bool {
	for _, existing := range AllowedReplicationTimeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationTimeStatus value
func (v ReplicationTimeStatus) Ptr() *ReplicationTimeStatus {
	return &v
}

type NullableReplicationTimeStatus struct {
	value *ReplicationTimeStatus
	isSet bool
}

func (v NullableReplicationTimeStatus) Get() *ReplicationTimeStatus {
	return v.value
}

func (v *NullableReplicationTimeStatus) Set(val *ReplicationTimeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationTimeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationTimeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationTimeStatus(val *ReplicationTimeStatus) *NullableReplicationTimeStatus {
	return &NullableReplicationTimeStatus{value: val, isSet: true}
}

func (v NullableReplicationTimeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationTimeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

