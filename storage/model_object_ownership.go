/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ObjectOwnership <p>The container element for object ownership for a bucket's ownership controls.</p> <p>BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the <code>bucket-owner-full-control</code> canned ACL.</p> <p>ObjectWriter - The uploading account will own the object if the object is uploaded with the <code>bucket-owner-full-control</code> canned ACL.</p>
type ObjectOwnership string

// List of ObjectOwnership
const (
	OBJECTOWNERSHIP_BUCKET_OWNER_PREFERRED ObjectOwnership = "BucketOwnerPreferred"
	OBJECTOWNERSHIP_OBJECT_WRITER ObjectOwnership = "ObjectWriter"
)

// All allowed values of ObjectOwnership enum
var AllowedObjectOwnershipEnumValues = []ObjectOwnership{
	"BucketOwnerPreferred",
	"ObjectWriter",
}

func (v *ObjectOwnership) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectOwnership(value)
	for _, existing := range AllowedObjectOwnershipEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectOwnership", value)
}

// NewObjectOwnershipFromValue returns a pointer to a valid ObjectOwnership
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectOwnershipFromValue(v string) (*ObjectOwnership, error) {
	ev := ObjectOwnership(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectOwnership: valid values are %v", v, AllowedObjectOwnershipEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectOwnership) IsValid() bool {
	for _, existing := range AllowedObjectOwnershipEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectOwnership value
func (v ObjectOwnership) Ptr() *ObjectOwnership {
	return &v
}

type NullableObjectOwnership struct {
	value *ObjectOwnership
	isSet bool
}

func (v NullableObjectOwnership) Get() *ObjectOwnership {
	return v.value
}

func (v *NullableObjectOwnership) Set(val *ObjectOwnership) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectOwnership) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectOwnership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectOwnership(val *ObjectOwnership) *NullableObjectOwnership {
	return &NullableObjectOwnership{value: val, isSet: true}
}

func (v NullableObjectOwnership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectOwnership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

