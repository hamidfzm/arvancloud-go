/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the CSVOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSVOutput{}

// CSVOutput Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
type CSVOutput struct {
	QuoteFields *QuoteFields `json:"QuoteFields,omitempty"`
	QuoteEscapeCharacter *string `json:"QuoteEscapeCharacter,omitempty"`
	RecordDelimiter *string `json:"RecordDelimiter,omitempty"`
	FieldDelimiter *string `json:"FieldDelimiter,omitempty"`
	QuoteCharacter *string `json:"QuoteCharacter,omitempty"`
}

// NewCSVOutput instantiates a new CSVOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSVOutput() *CSVOutput {
	this := CSVOutput{}
	return &this
}

// NewCSVOutputWithDefaults instantiates a new CSVOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSVOutputWithDefaults() *CSVOutput {
	this := CSVOutput{}
	return &this
}

// GetQuoteFields returns the QuoteFields field value if set, zero value otherwise.
func (o *CSVOutput) GetQuoteFields() QuoteFields {
	if o == nil || IsNil(o.QuoteFields) {
		var ret QuoteFields
		return ret
	}
	return *o.QuoteFields
}

// GetQuoteFieldsOk returns a tuple with the QuoteFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetQuoteFieldsOk() (*QuoteFields, bool) {
	if o == nil || IsNil(o.QuoteFields) {
		return nil, false
	}
	return o.QuoteFields, true
}

// HasQuoteFields returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteFields() bool {
	if o != nil && !IsNil(o.QuoteFields) {
		return true
	}

	return false
}

// SetQuoteFields gets a reference to the given QuoteFields and assigns it to the QuoteFields field.
func (o *CSVOutput) SetQuoteFields(v QuoteFields) {
	o.QuoteFields = &v
}

// GetQuoteEscapeCharacter returns the QuoteEscapeCharacter field value if set, zero value otherwise.
func (o *CSVOutput) GetQuoteEscapeCharacter() string {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteEscapeCharacter
}

// GetQuoteEscapeCharacterOk returns a tuple with the QuoteEscapeCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetQuoteEscapeCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		return nil, false
	}
	return o.QuoteEscapeCharacter, true
}

// HasQuoteEscapeCharacter returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteEscapeCharacter() bool {
	if o != nil && !IsNil(o.QuoteEscapeCharacter) {
		return true
	}

	return false
}

// SetQuoteEscapeCharacter gets a reference to the given string and assigns it to the QuoteEscapeCharacter field.
func (o *CSVOutput) SetQuoteEscapeCharacter(v string) {
	o.QuoteEscapeCharacter = &v
}

// GetRecordDelimiter returns the RecordDelimiter field value if set, zero value otherwise.
func (o *CSVOutput) GetRecordDelimiter() string {
	if o == nil || IsNil(o.RecordDelimiter) {
		var ret string
		return ret
	}
	return *o.RecordDelimiter
}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetRecordDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.RecordDelimiter) {
		return nil, false
	}
	return o.RecordDelimiter, true
}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *CSVOutput) HasRecordDelimiter() bool {
	if o != nil && !IsNil(o.RecordDelimiter) {
		return true
	}

	return false
}

// SetRecordDelimiter gets a reference to the given string and assigns it to the RecordDelimiter field.
func (o *CSVOutput) SetRecordDelimiter(v string) {
	o.RecordDelimiter = &v
}

// GetFieldDelimiter returns the FieldDelimiter field value if set, zero value otherwise.
func (o *CSVOutput) GetFieldDelimiter() string {
	if o == nil || IsNil(o.FieldDelimiter) {
		var ret string
		return ret
	}
	return *o.FieldDelimiter
}

// GetFieldDelimiterOk returns a tuple with the FieldDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetFieldDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.FieldDelimiter) {
		return nil, false
	}
	return o.FieldDelimiter, true
}

// HasFieldDelimiter returns a boolean if a field has been set.
func (o *CSVOutput) HasFieldDelimiter() bool {
	if o != nil && !IsNil(o.FieldDelimiter) {
		return true
	}

	return false
}

// SetFieldDelimiter gets a reference to the given string and assigns it to the FieldDelimiter field.
func (o *CSVOutput) SetFieldDelimiter(v string) {
	o.FieldDelimiter = &v
}

// GetQuoteCharacter returns the QuoteCharacter field value if set, zero value otherwise.
func (o *CSVOutput) GetQuoteCharacter() string {
	if o == nil || IsNil(o.QuoteCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteCharacter
}

// GetQuoteCharacterOk returns a tuple with the QuoteCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetQuoteCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteCharacter) {
		return nil, false
	}
	return o.QuoteCharacter, true
}

// HasQuoteCharacter returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteCharacter() bool {
	if o != nil && !IsNil(o.QuoteCharacter) {
		return true
	}

	return false
}

// SetQuoteCharacter gets a reference to the given string and assigns it to the QuoteCharacter field.
func (o *CSVOutput) SetQuoteCharacter(v string) {
	o.QuoteCharacter = &v
}

func (o CSVOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSVOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuoteFields) {
		toSerialize["QuoteFields"] = o.QuoteFields
	}
	if !IsNil(o.QuoteEscapeCharacter) {
		toSerialize["QuoteEscapeCharacter"] = o.QuoteEscapeCharacter
	}
	if !IsNil(o.RecordDelimiter) {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}
	if !IsNil(o.FieldDelimiter) {
		toSerialize["FieldDelimiter"] = o.FieldDelimiter
	}
	if !IsNil(o.QuoteCharacter) {
		toSerialize["QuoteCharacter"] = o.QuoteCharacter
	}
	return toSerialize, nil
}

type NullableCSVOutput struct {
	value *CSVOutput
	isSet bool
}

func (v NullableCSVOutput) Get() *CSVOutput {
	return v.value
}

func (v *NullableCSVOutput) Set(val *CSVOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCSVOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCSVOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSVOutput(val *CSVOutput) *NullableCSVOutput {
	return &NullableCSVOutput{value: val, isSet: true}
}

func (v NullableCSVOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSVOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


