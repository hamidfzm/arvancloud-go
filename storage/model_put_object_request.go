/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the PutObjectRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutObjectRequest{}

// PutObjectRequest struct for PutObjectRequest
type PutObjectRequest struct {
	// Object data.
	Body *string `json:"Body,omitempty"`
	// A map of metadata to store with the object in S3.
	XAmzMeta *map[string]string `json:"x-amz-meta-,omitempty"`
}

// NewPutObjectRequest instantiates a new PutObjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutObjectRequest() *PutObjectRequest {
	this := PutObjectRequest{}
	return &this
}

// NewPutObjectRequestWithDefaults instantiates a new PutObjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutObjectRequestWithDefaults() *PutObjectRequest {
	this := PutObjectRequest{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *PutObjectRequest) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectRequest) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *PutObjectRequest) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *PutObjectRequest) SetBody(v string) {
	o.Body = &v
}

// GetXAmzMeta returns the XAmzMeta field value if set, zero value otherwise.
func (o *PutObjectRequest) GetXAmzMeta() map[string]string {
	if o == nil || IsNil(o.XAmzMeta) {
		var ret map[string]string
		return ret
	}
	return *o.XAmzMeta
}

// GetXAmzMetaOk returns a tuple with the XAmzMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectRequest) GetXAmzMetaOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.XAmzMeta) {
		return nil, false
	}
	return o.XAmzMeta, true
}

// HasXAmzMeta returns a boolean if a field has been set.
func (o *PutObjectRequest) HasXAmzMeta() bool {
	if o != nil && !IsNil(o.XAmzMeta) {
		return true
	}

	return false
}

// SetXAmzMeta gets a reference to the given map[string]string and assigns it to the XAmzMeta field.
func (o *PutObjectRequest) SetXAmzMeta(v map[string]string) {
	o.XAmzMeta = &v
}

func (o PutObjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutObjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["Body"] = o.Body
	}
	if !IsNil(o.XAmzMeta) {
		toSerialize["x-amz-meta-"] = o.XAmzMeta
	}
	return toSerialize, nil
}

type NullablePutObjectRequest struct {
	value *PutObjectRequest
	isSet bool
}

func (v NullablePutObjectRequest) Get() *PutObjectRequest {
	return v.value
}

func (v *NullablePutObjectRequest) Set(val *PutObjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutObjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutObjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutObjectRequest(val *PutObjectRequest) *NullablePutObjectRequest {
	return &NullablePutObjectRequest{value: val, isSet: true}
}

func (v NullablePutObjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutObjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


