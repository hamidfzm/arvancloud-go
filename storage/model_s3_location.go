/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the S3Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3Location{}

// S3Location Describes an ArvanCloud S3 location that will receive the results of the restore request.
type S3Location struct {
	BucketName string `json:"BucketName"`
	Prefix string `json:"Prefix"`
	Encryption *Encryption `json:"Encryption,omitempty"`
	CannedACL *ObjectCannedACL `json:"CannedACL,omitempty"`
	AccessControlList *Grants `json:"AccessControlList,omitempty"`
	Tagging *S3LocationTagging `json:"Tagging,omitempty"`
	UserMetadata *Array `json:"UserMetadata,omitempty"`
	StorageClass *StorageClass `json:"StorageClass,omitempty"`
}

// NewS3Location instantiates a new S3Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Location(bucketName string, prefix string) *S3Location {
	this := S3Location{}
	this.BucketName = bucketName
	this.Prefix = prefix
	return &this
}

// NewS3LocationWithDefaults instantiates a new S3Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LocationWithDefaults() *S3Location {
	this := S3Location{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *S3Location) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *S3Location) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *S3Location) SetBucketName(v string) {
	o.BucketName = v
}

// GetPrefix returns the Prefix field value
func (o *S3Location) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *S3Location) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *S3Location) SetPrefix(v string) {
	o.Prefix = v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *S3Location) GetEncryption() Encryption {
	if o == nil || IsNil(o.Encryption) {
		var ret Encryption
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Location) GetEncryptionOk() (*Encryption, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *S3Location) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given Encryption and assigns it to the Encryption field.
func (o *S3Location) SetEncryption(v Encryption) {
	o.Encryption = &v
}

// GetCannedACL returns the CannedACL field value if set, zero value otherwise.
func (o *S3Location) GetCannedACL() ObjectCannedACL {
	if o == nil || IsNil(o.CannedACL) {
		var ret ObjectCannedACL
		return ret
	}
	return *o.CannedACL
}

// GetCannedACLOk returns a tuple with the CannedACL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Location) GetCannedACLOk() (*ObjectCannedACL, bool) {
	if o == nil || IsNil(o.CannedACL) {
		return nil, false
	}
	return o.CannedACL, true
}

// HasCannedACL returns a boolean if a field has been set.
func (o *S3Location) HasCannedACL() bool {
	if o != nil && !IsNil(o.CannedACL) {
		return true
	}

	return false
}

// SetCannedACL gets a reference to the given ObjectCannedACL and assigns it to the CannedACL field.
func (o *S3Location) SetCannedACL(v ObjectCannedACL) {
	o.CannedACL = &v
}

// GetAccessControlList returns the AccessControlList field value if set, zero value otherwise.
func (o *S3Location) GetAccessControlList() Grants {
	if o == nil || IsNil(o.AccessControlList) {
		var ret Grants
		return ret
	}
	return *o.AccessControlList
}

// GetAccessControlListOk returns a tuple with the AccessControlList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Location) GetAccessControlListOk() (*Grants, bool) {
	if o == nil || IsNil(o.AccessControlList) {
		return nil, false
	}
	return o.AccessControlList, true
}

// HasAccessControlList returns a boolean if a field has been set.
func (o *S3Location) HasAccessControlList() bool {
	if o != nil && !IsNil(o.AccessControlList) {
		return true
	}

	return false
}

// SetAccessControlList gets a reference to the given Grants and assigns it to the AccessControlList field.
func (o *S3Location) SetAccessControlList(v Grants) {
	o.AccessControlList = &v
}

// GetTagging returns the Tagging field value if set, zero value otherwise.
func (o *S3Location) GetTagging() S3LocationTagging {
	if o == nil || IsNil(o.Tagging) {
		var ret S3LocationTagging
		return ret
	}
	return *o.Tagging
}

// GetTaggingOk returns a tuple with the Tagging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Location) GetTaggingOk() (*S3LocationTagging, bool) {
	if o == nil || IsNil(o.Tagging) {
		return nil, false
	}
	return o.Tagging, true
}

// HasTagging returns a boolean if a field has been set.
func (o *S3Location) HasTagging() bool {
	if o != nil && !IsNil(o.Tagging) {
		return true
	}

	return false
}

// SetTagging gets a reference to the given S3LocationTagging and assigns it to the Tagging field.
func (o *S3Location) SetTagging(v S3LocationTagging) {
	o.Tagging = &v
}

// GetUserMetadata returns the UserMetadata field value if set, zero value otherwise.
func (o *S3Location) GetUserMetadata() Array {
	if o == nil || IsNil(o.UserMetadata) {
		var ret Array
		return ret
	}
	return *o.UserMetadata
}

// GetUserMetadataOk returns a tuple with the UserMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Location) GetUserMetadataOk() (*Array, bool) {
	if o == nil || IsNil(o.UserMetadata) {
		return nil, false
	}
	return o.UserMetadata, true
}

// HasUserMetadata returns a boolean if a field has been set.
func (o *S3Location) HasUserMetadata() bool {
	if o != nil && !IsNil(o.UserMetadata) {
		return true
	}

	return false
}

// SetUserMetadata gets a reference to the given Array and assigns it to the UserMetadata field.
func (o *S3Location) SetUserMetadata(v Array) {
	o.UserMetadata = &v
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *S3Location) GetStorageClass() StorageClass {
	if o == nil || IsNil(o.StorageClass) {
		var ret StorageClass
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Location) GetStorageClassOk() (*StorageClass, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *S3Location) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given StorageClass and assigns it to the StorageClass field.
func (o *S3Location) SetStorageClass(v StorageClass) {
	o.StorageClass = &v
}

func (o S3Location) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["BucketName"] = o.BucketName
	toSerialize["Prefix"] = o.Prefix
	if !IsNil(o.Encryption) {
		toSerialize["Encryption"] = o.Encryption
	}
	if !IsNil(o.CannedACL) {
		toSerialize["CannedACL"] = o.CannedACL
	}
	if !IsNil(o.AccessControlList) {
		toSerialize["AccessControlList"] = o.AccessControlList
	}
	if !IsNil(o.Tagging) {
		toSerialize["Tagging"] = o.Tagging
	}
	if !IsNil(o.UserMetadata) {
		toSerialize["UserMetadata"] = o.UserMetadata
	}
	if !IsNil(o.StorageClass) {
		toSerialize["StorageClass"] = o.StorageClass
	}
	return toSerialize, nil
}

type NullableS3Location struct {
	value *S3Location
	isSet bool
}

func (v NullableS3Location) Get() *S3Location {
	return v.value
}

func (v *NullableS3Location) Set(val *S3Location) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Location) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Location) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Location(val *S3Location) *NullableS3Location {
	return &NullableS3Location{value: val, isSet: true}
}

func (v NullableS3Location) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Location) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


