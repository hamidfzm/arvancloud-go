/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the Condition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Condition{}

// Condition A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
type Condition struct {
	HttpErrorCodeReturnedEquals *string `json:"HttpErrorCodeReturnedEquals,omitempty"`
	KeyPrefixEquals *string `json:"KeyPrefixEquals,omitempty"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition() *Condition {
	this := Condition{}
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetHttpErrorCodeReturnedEquals returns the HttpErrorCodeReturnedEquals field value if set, zero value otherwise.
func (o *Condition) GetHttpErrorCodeReturnedEquals() string {
	if o == nil || IsNil(o.HttpErrorCodeReturnedEquals) {
		var ret string
		return ret
	}
	return *o.HttpErrorCodeReturnedEquals
}

// GetHttpErrorCodeReturnedEqualsOk returns a tuple with the HttpErrorCodeReturnedEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetHttpErrorCodeReturnedEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.HttpErrorCodeReturnedEquals) {
		return nil, false
	}
	return o.HttpErrorCodeReturnedEquals, true
}

// HasHttpErrorCodeReturnedEquals returns a boolean if a field has been set.
func (o *Condition) HasHttpErrorCodeReturnedEquals() bool {
	if o != nil && !IsNil(o.HttpErrorCodeReturnedEquals) {
		return true
	}

	return false
}

// SetHttpErrorCodeReturnedEquals gets a reference to the given string and assigns it to the HttpErrorCodeReturnedEquals field.
func (o *Condition) SetHttpErrorCodeReturnedEquals(v string) {
	o.HttpErrorCodeReturnedEquals = &v
}

// GetKeyPrefixEquals returns the KeyPrefixEquals field value if set, zero value otherwise.
func (o *Condition) GetKeyPrefixEquals() string {
	if o == nil || IsNil(o.KeyPrefixEquals) {
		var ret string
		return ret
	}
	return *o.KeyPrefixEquals
}

// GetKeyPrefixEqualsOk returns a tuple with the KeyPrefixEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetKeyPrefixEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.KeyPrefixEquals) {
		return nil, false
	}
	return o.KeyPrefixEquals, true
}

// HasKeyPrefixEquals returns a boolean if a field has been set.
func (o *Condition) HasKeyPrefixEquals() bool {
	if o != nil && !IsNil(o.KeyPrefixEquals) {
		return true
	}

	return false
}

// SetKeyPrefixEquals gets a reference to the given string and assigns it to the KeyPrefixEquals field.
func (o *Condition) SetKeyPrefixEquals(v string) {
	o.KeyPrefixEquals = &v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Condition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HttpErrorCodeReturnedEquals) {
		toSerialize["HttpErrorCodeReturnedEquals"] = o.HttpErrorCodeReturnedEquals
	}
	if !IsNil(o.KeyPrefixEquals) {
		toSerialize["KeyPrefixEquals"] = o.KeyPrefixEquals
	}
	return toSerialize, nil
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


