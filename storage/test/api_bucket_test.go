/*
ArvanCloud S3 Services

Testing BucketAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package storage

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/hamidfzm/arvancloud-go/storage"
)

func Test_storage_BucketAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BucketAPIService CreateBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		resp, httpRes, err := apiClient.BucketAPI.CreateBucket(context.Background(), bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService DeleteBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		httpRes, err := apiClient.BucketAPI.DeleteBucket(context.Background(), bucket).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService DeleteObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		resp, httpRes, err := apiClient.BucketAPI.DeleteObjects(context.Background(), bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService DeletePublicAccessBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		httpRes, err := apiClient.BucketAPI.DeletePublicAccessBlock(context.Background(), bucket).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService GetPublicAccessBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		resp, httpRes, err := apiClient.BucketAPI.GetPublicAccessBlock(context.Background(), bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService HeadBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		httpRes, err := apiClient.BucketAPI.HeadBucket(context.Background(), bucket).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService ListBuckets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BucketAPI.ListBuckets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService ListObjectVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		resp, httpRes, err := apiClient.BucketAPI.ListObjectVersions(context.Background(), bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService ListObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		resp, httpRes, err := apiClient.BucketAPI.ListObjects(context.Background(), bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService ListObjectsV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		resp, httpRes, err := apiClient.BucketAPI.ListObjectsV2(context.Background(), bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BucketAPIService PutPublicAccessBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		httpRes, err := apiClient.BucketAPI.PutPublicAccessBlock(context.Background(), bucket).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
