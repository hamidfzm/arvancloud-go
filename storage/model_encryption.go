/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the Encryption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Encryption{}

// Encryption Contains the type of server-side encryption used.
type Encryption struct {
	EncryptionType ServerSideEncryption `json:"EncryptionType"`
	KMSKeyId *string `json:"KMSKeyId,omitempty"`
	KMSContext *string `json:"KMSContext,omitempty"`
}

// NewEncryption instantiates a new Encryption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryption(encryptionType ServerSideEncryption) *Encryption {
	this := Encryption{}
	this.EncryptionType = encryptionType
	return &this
}

// NewEncryptionWithDefaults instantiates a new Encryption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionWithDefaults() *Encryption {
	this := Encryption{}
	return &this
}

// GetEncryptionType returns the EncryptionType field value
func (o *Encryption) GetEncryptionType() ServerSideEncryption {
	if o == nil {
		var ret ServerSideEncryption
		return ret
	}

	return o.EncryptionType
}

// GetEncryptionTypeOk returns a tuple with the EncryptionType field value
// and a boolean to check if the value has been set.
func (o *Encryption) GetEncryptionTypeOk() (*ServerSideEncryption, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionType, true
}

// SetEncryptionType sets field value
func (o *Encryption) SetEncryptionType(v ServerSideEncryption) {
	o.EncryptionType = v
}

// GetKMSKeyId returns the KMSKeyId field value if set, zero value otherwise.
func (o *Encryption) GetKMSKeyId() string {
	if o == nil || IsNil(o.KMSKeyId) {
		var ret string
		return ret
	}
	return *o.KMSKeyId
}

// GetKMSKeyIdOk returns a tuple with the KMSKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encryption) GetKMSKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.KMSKeyId) {
		return nil, false
	}
	return o.KMSKeyId, true
}

// HasKMSKeyId returns a boolean if a field has been set.
func (o *Encryption) HasKMSKeyId() bool {
	if o != nil && !IsNil(o.KMSKeyId) {
		return true
	}

	return false
}

// SetKMSKeyId gets a reference to the given string and assigns it to the KMSKeyId field.
func (o *Encryption) SetKMSKeyId(v string) {
	o.KMSKeyId = &v
}

// GetKMSContext returns the KMSContext field value if set, zero value otherwise.
func (o *Encryption) GetKMSContext() string {
	if o == nil || IsNil(o.KMSContext) {
		var ret string
		return ret
	}
	return *o.KMSContext
}

// GetKMSContextOk returns a tuple with the KMSContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encryption) GetKMSContextOk() (*string, bool) {
	if o == nil || IsNil(o.KMSContext) {
		return nil, false
	}
	return o.KMSContext, true
}

// HasKMSContext returns a boolean if a field has been set.
func (o *Encryption) HasKMSContext() bool {
	if o != nil && !IsNil(o.KMSContext) {
		return true
	}

	return false
}

// SetKMSContext gets a reference to the given string and assigns it to the KMSContext field.
func (o *Encryption) SetKMSContext(v string) {
	o.KMSContext = &v
}

func (o Encryption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Encryption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["EncryptionType"] = o.EncryptionType
	if !IsNil(o.KMSKeyId) {
		toSerialize["KMSKeyId"] = o.KMSKeyId
	}
	if !IsNil(o.KMSContext) {
		toSerialize["KMSContext"] = o.KMSContext
	}
	return toSerialize, nil
}

type NullableEncryption struct {
	value *Encryption
	isSet bool
}

func (v NullableEncryption) Get() *Encryption {
	return v.value
}

func (v *NullableEncryption) Set(val *Encryption) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryption(val *Encryption) *NullableEncryption {
	return &NullableEncryption{value: val, isSet: true}
}

func (v NullableEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


