/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the QueueConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueueConfiguration{}

// QueueConfiguration Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when ArvanCloud S3 detects specified events.
type QueueConfiguration struct {
	// An optional unique identifier for configurations in a notification configuration. If you don't provide one, ArvanCloud S3 will assign an ID.
	Id *string `json:"Id,omitempty"`
	QueueArn string `json:"QueueArn"`
	Events Array `json:"Events"`
	Filter *NotificationConfigurationFilter `json:"Filter,omitempty"`
}

// NewQueueConfiguration instantiates a new QueueConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueueConfiguration(queueArn string, events Array) *QueueConfiguration {
	this := QueueConfiguration{}
	this.QueueArn = queueArn
	this.Events = events
	return &this
}

// NewQueueConfigurationWithDefaults instantiates a new QueueConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueConfigurationWithDefaults() *QueueConfiguration {
	this := QueueConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *QueueConfiguration) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueConfiguration) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *QueueConfiguration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *QueueConfiguration) SetId(v string) {
	o.Id = &v
}

// GetQueueArn returns the QueueArn field value
func (o *QueueConfiguration) GetQueueArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueueArn
}

// GetQueueArnOk returns a tuple with the QueueArn field value
// and a boolean to check if the value has been set.
func (o *QueueConfiguration) GetQueueArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueueArn, true
}

// SetQueueArn sets field value
func (o *QueueConfiguration) SetQueueArn(v string) {
	o.QueueArn = v
}

// GetEvents returns the Events field value
func (o *QueueConfiguration) GetEvents() Array {
	if o == nil {
		var ret Array
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *QueueConfiguration) GetEventsOk() (*Array, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Events, true
}

// SetEvents sets field value
func (o *QueueConfiguration) SetEvents(v Array) {
	o.Events = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *QueueConfiguration) GetFilter() NotificationConfigurationFilter {
	if o == nil || IsNil(o.Filter) {
		var ret NotificationConfigurationFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueConfiguration) GetFilterOk() (*NotificationConfigurationFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *QueueConfiguration) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given NotificationConfigurationFilter and assigns it to the Filter field.
func (o *QueueConfiguration) SetFilter(v NotificationConfigurationFilter) {
	o.Filter = &v
}

func (o QueueConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueueConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	toSerialize["QueueArn"] = o.QueueArn
	toSerialize["Events"] = o.Events
	if !IsNil(o.Filter) {
		toSerialize["Filter"] = o.Filter
	}
	return toSerialize, nil
}

type NullableQueueConfiguration struct {
	value *QueueConfiguration
	isSet bool
}

func (v NullableQueueConfiguration) Get() *QueueConfiguration {
	return v.value
}

func (v *NullableQueueConfiguration) Set(val *QueueConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueConfiguration(val *QueueConfiguration) *NullableQueueConfiguration {
	return &NullableQueueConfiguration{value: val, isSet: true}
}

func (v NullableQueueConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


