/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SelectParametersInputSerialization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectParametersInputSerialization{}

// SelectParametersInputSerialization struct for SelectParametersInputSerialization
type SelectParametersInputSerialization struct {
	CSV *InputSerializationCSV `json:"CSV,omitempty"`
	CompressionType *CompressionType `json:"CompressionType,omitempty"`
	JSON *InputSerializationJSON `json:"JSON,omitempty"`
	Parquet *interface{} `json:"Parquet,omitempty"`
}

// NewSelectParametersInputSerialization instantiates a new SelectParametersInputSerialization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectParametersInputSerialization() *SelectParametersInputSerialization {
	this := SelectParametersInputSerialization{}
	return &this
}

// NewSelectParametersInputSerializationWithDefaults instantiates a new SelectParametersInputSerialization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectParametersInputSerializationWithDefaults() *SelectParametersInputSerialization {
	this := SelectParametersInputSerialization{}
	return &this
}

// GetCSV returns the CSV field value if set, zero value otherwise.
func (o *SelectParametersInputSerialization) GetCSV() InputSerializationCSV {
	if o == nil || IsNil(o.CSV) {
		var ret InputSerializationCSV
		return ret
	}
	return *o.CSV
}

// GetCSVOk returns a tuple with the CSV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectParametersInputSerialization) GetCSVOk() (*InputSerializationCSV, bool) {
	if o == nil || IsNil(o.CSV) {
		return nil, false
	}
	return o.CSV, true
}

// HasCSV returns a boolean if a field has been set.
func (o *SelectParametersInputSerialization) HasCSV() bool {
	if o != nil && !IsNil(o.CSV) {
		return true
	}

	return false
}

// SetCSV gets a reference to the given InputSerializationCSV and assigns it to the CSV field.
func (o *SelectParametersInputSerialization) SetCSV(v InputSerializationCSV) {
	o.CSV = &v
}

// GetCompressionType returns the CompressionType field value if set, zero value otherwise.
func (o *SelectParametersInputSerialization) GetCompressionType() CompressionType {
	if o == nil || IsNil(o.CompressionType) {
		var ret CompressionType
		return ret
	}
	return *o.CompressionType
}

// GetCompressionTypeOk returns a tuple with the CompressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectParametersInputSerialization) GetCompressionTypeOk() (*CompressionType, bool) {
	if o == nil || IsNil(o.CompressionType) {
		return nil, false
	}
	return o.CompressionType, true
}

// HasCompressionType returns a boolean if a field has been set.
func (o *SelectParametersInputSerialization) HasCompressionType() bool {
	if o != nil && !IsNil(o.CompressionType) {
		return true
	}

	return false
}

// SetCompressionType gets a reference to the given CompressionType and assigns it to the CompressionType field.
func (o *SelectParametersInputSerialization) SetCompressionType(v CompressionType) {
	o.CompressionType = &v
}

// GetJSON returns the JSON field value if set, zero value otherwise.
func (o *SelectParametersInputSerialization) GetJSON() InputSerializationJSON {
	if o == nil || IsNil(o.JSON) {
		var ret InputSerializationJSON
		return ret
	}
	return *o.JSON
}

// GetJSONOk returns a tuple with the JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectParametersInputSerialization) GetJSONOk() (*InputSerializationJSON, bool) {
	if o == nil || IsNil(o.JSON) {
		return nil, false
	}
	return o.JSON, true
}

// HasJSON returns a boolean if a field has been set.
func (o *SelectParametersInputSerialization) HasJSON() bool {
	if o != nil && !IsNil(o.JSON) {
		return true
	}

	return false
}

// SetJSON gets a reference to the given InputSerializationJSON and assigns it to the JSON field.
func (o *SelectParametersInputSerialization) SetJSON(v InputSerializationJSON) {
	o.JSON = &v
}

// GetParquet returns the Parquet field value if set, zero value otherwise.
func (o *SelectParametersInputSerialization) GetParquet() interface{} {
	if o == nil || IsNil(o.Parquet) {
		var ret interface{}
		return ret
	}
	return *o.Parquet
}

// GetParquetOk returns a tuple with the Parquet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectParametersInputSerialization) GetParquetOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Parquet) {
		return nil, false
	}
	return o.Parquet, true
}

// HasParquet returns a boolean if a field has been set.
func (o *SelectParametersInputSerialization) HasParquet() bool {
	if o != nil && !IsNil(o.Parquet) {
		return true
	}

	return false
}

// SetParquet gets a reference to the given interface{} and assigns it to the Parquet field.
func (o *SelectParametersInputSerialization) SetParquet(v interface{}) {
	o.Parquet = &v
}

func (o SelectParametersInputSerialization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectParametersInputSerialization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CSV) {
		toSerialize["CSV"] = o.CSV
	}
	if !IsNil(o.CompressionType) {
		toSerialize["CompressionType"] = o.CompressionType
	}
	if !IsNil(o.JSON) {
		toSerialize["JSON"] = o.JSON
	}
	if !IsNil(o.Parquet) {
		toSerialize["Parquet"] = o.Parquet
	}
	return toSerialize, nil
}

type NullableSelectParametersInputSerialization struct {
	value *SelectParametersInputSerialization
	isSet bool
}

func (v NullableSelectParametersInputSerialization) Get() *SelectParametersInputSerialization {
	return v.value
}

func (v *NullableSelectParametersInputSerialization) Set(val *SelectParametersInputSerialization) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectParametersInputSerialization) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectParametersInputSerialization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectParametersInputSerialization(val *SelectParametersInputSerialization) *NullableSelectParametersInputSerialization {
	return &NullableSelectParametersInputSerialization{value: val, isSet: true}
}

func (v NullableSelectParametersInputSerialization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectParametersInputSerialization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


