/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// MetricsStatus the model 'MetricsStatus'
type MetricsStatus string

// List of MetricsStatus
const (
	METRICSSTATUS_ENABLED MetricsStatus = "Enabled"
	METRICSSTATUS_DISABLED MetricsStatus = "Disabled"
)

// All allowed values of MetricsStatus enum
var AllowedMetricsStatusEnumValues = []MetricsStatus{
	"Enabled",
	"Disabled",
}

func (v *MetricsStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricsStatus(value)
	for _, existing := range AllowedMetricsStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricsStatus", value)
}

// NewMetricsStatusFromValue returns a pointer to a valid MetricsStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricsStatusFromValue(v string) (*MetricsStatus, error) {
	ev := MetricsStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricsStatus: valid values are %v", v, AllowedMetricsStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricsStatus) IsValid() bool {
	for _, existing := range AllowedMetricsStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricsStatus value
func (v MetricsStatus) Ptr() *MetricsStatus {
	return &v
}

type NullableMetricsStatus struct {
	value *MetricsStatus
	isSet bool
}

func (v NullableMetricsStatus) Get() *MetricsStatus {
	return v.value
}

func (v *NullableMetricsStatus) Set(val *MetricsStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsStatus(val *MetricsStatus) *NullableMetricsStatus {
	return &NullableMetricsStatus{value: val, isSet: true}
}

func (v NullableMetricsStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

