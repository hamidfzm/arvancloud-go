/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the OutputLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputLocation{}

// OutputLocation Describes the location where the restore job's output is stored.
type OutputLocation struct {
	S3 *OutputLocationS3 `json:"S3,omitempty"`
}

// NewOutputLocation instantiates a new OutputLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputLocation() *OutputLocation {
	this := OutputLocation{}
	return &this
}

// NewOutputLocationWithDefaults instantiates a new OutputLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputLocationWithDefaults() *OutputLocation {
	this := OutputLocation{}
	return &this
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *OutputLocation) GetS3() OutputLocationS3 {
	if o == nil || IsNil(o.S3) {
		var ret OutputLocationS3
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputLocation) GetS3Ok() (*OutputLocationS3, bool) {
	if o == nil || IsNil(o.S3) {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *OutputLocation) HasS3() bool {
	if o != nil && !IsNil(o.S3) {
		return true
	}

	return false
}

// SetS3 gets a reference to the given OutputLocationS3 and assigns it to the S3 field.
func (o *OutputLocation) SetS3(v OutputLocationS3) {
	o.S3 = &v
}

func (o OutputLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.S3) {
		toSerialize["S3"] = o.S3
	}
	return toSerialize, nil
}

type NullableOutputLocation struct {
	value *OutputLocation
	isSet bool
}

func (v NullableOutputLocation) Get() *OutputLocation {
	return v.value
}

func (v *NullableOutputLocation) Set(val *OutputLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputLocation(val *OutputLocation) *NullableOutputLocation {
	return &NullableOutputLocation{value: val, isSet: true}
}

func (v NullableOutputLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


