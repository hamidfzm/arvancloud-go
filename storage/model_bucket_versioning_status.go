/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// BucketVersioningStatus the model 'BucketVersioningStatus'
type BucketVersioningStatus string

// List of BucketVersioningStatus
const (
	BUCKETVERSIONINGSTATUS_ENABLED BucketVersioningStatus = "Enabled"
	BUCKETVERSIONINGSTATUS_SUSPENDED BucketVersioningStatus = "Suspended"
)

// All allowed values of BucketVersioningStatus enum
var AllowedBucketVersioningStatusEnumValues = []BucketVersioningStatus{
	"Enabled",
	"Suspended",
}

func (v *BucketVersioningStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BucketVersioningStatus(value)
	for _, existing := range AllowedBucketVersioningStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BucketVersioningStatus", value)
}

// NewBucketVersioningStatusFromValue returns a pointer to a valid BucketVersioningStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBucketVersioningStatusFromValue(v string) (*BucketVersioningStatus, error) {
	ev := BucketVersioningStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BucketVersioningStatus: valid values are %v", v, AllowedBucketVersioningStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BucketVersioningStatus) IsValid() bool {
	for _, existing := range AllowedBucketVersioningStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BucketVersioningStatus value
func (v BucketVersioningStatus) Ptr() *BucketVersioningStatus {
	return &v
}

type NullableBucketVersioningStatus struct {
	value *BucketVersioningStatus
	isSet bool
}

func (v NullableBucketVersioningStatus) Get() *BucketVersioningStatus {
	return v.value
}

func (v *NullableBucketVersioningStatus) Set(val *BucketVersioningStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketVersioningStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketVersioningStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketVersioningStatus(val *BucketVersioningStatus) *NullableBucketVersioningStatus {
	return &NullableBucketVersioningStatus{value: val, isSet: true}
}

func (v NullableBucketVersioningStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketVersioningStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

