/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// Permission the model 'Permission'
type Permission string

// List of Permission
const (
	PERMISSION_FULL_CONTROL Permission = "FULL_CONTROL"
	PERMISSION_WRITE Permission = "WRITE"
	PERMISSION_WRITE_ACP Permission = "WRITE_ACP"
	PERMISSION_READ Permission = "READ"
	PERMISSION_READ_ACP Permission = "READ_ACP"
)

// All allowed values of Permission enum
var AllowedPermissionEnumValues = []Permission{
	"FULL_CONTROL",
	"WRITE",
	"WRITE_ACP",
	"READ",
	"READ_ACP",
}

func (v *Permission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Permission(value)
	for _, existing := range AllowedPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Permission", value)
}

// NewPermissionFromValue returns a pointer to a valid Permission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPermissionFromValue(v string) (*Permission, error) {
	ev := Permission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Permission: valid values are %v", v, AllowedPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Permission) IsValid() bool {
	for _, existing := range AllowedPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Permission value
func (v Permission) Ptr() *Permission {
	return &v
}

type NullablePermission struct {
	value *Permission
	isSet bool
}

func (v NullablePermission) Get() *Permission {
	return v.value
}

func (v *NullablePermission) Set(val *Permission) {
	v.value = val
	v.isSet = true
}

func (v NullablePermission) IsSet() bool {
	return v.isSet
}

func (v *NullablePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermission(val *Permission) *NullablePermission {
	return &NullablePermission{value: val, isSet: true}
}

func (v NullablePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

