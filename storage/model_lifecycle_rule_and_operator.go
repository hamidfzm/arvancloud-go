/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the LifecycleRuleAndOperator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleRuleAndOperator{}

// LifecycleRuleAndOperator This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
type LifecycleRuleAndOperator struct {
	Prefix *string `json:"Prefix,omitempty"`
	Tags *Array `json:"Tags,omitempty"`
}

// NewLifecycleRuleAndOperator instantiates a new LifecycleRuleAndOperator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleRuleAndOperator() *LifecycleRuleAndOperator {
	this := LifecycleRuleAndOperator{}
	return &this
}

// NewLifecycleRuleAndOperatorWithDefaults instantiates a new LifecycleRuleAndOperator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleRuleAndOperatorWithDefaults() *LifecycleRuleAndOperator {
	this := LifecycleRuleAndOperator{}
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *LifecycleRuleAndOperator) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRuleAndOperator) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *LifecycleRuleAndOperator) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *LifecycleRuleAndOperator) SetPrefix(v string) {
	o.Prefix = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *LifecycleRuleAndOperator) GetTags() Array {
	if o == nil || IsNil(o.Tags) {
		var ret Array
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRuleAndOperator) GetTagsOk() (*Array, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *LifecycleRuleAndOperator) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given Array and assigns it to the Tags field.
func (o *LifecycleRuleAndOperator) SetTags(v Array) {
	o.Tags = &v
}

func (o LifecycleRuleAndOperator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleRuleAndOperator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !IsNil(o.Tags) {
		toSerialize["Tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableLifecycleRuleAndOperator struct {
	value *LifecycleRuleAndOperator
	isSet bool
}

func (v NullableLifecycleRuleAndOperator) Get() *LifecycleRuleAndOperator {
	return v.value
}

func (v *NullableLifecycleRuleAndOperator) Set(val *LifecycleRuleAndOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleRuleAndOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleRuleAndOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleRuleAndOperator(val *LifecycleRuleAndOperator) *NullableLifecycleRuleAndOperator {
	return &NullableLifecycleRuleAndOperator{value: val, isSet: true}
}

func (v NullableLifecycleRuleAndOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleRuleAndOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


