/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ObjectLockRetentionMode the model 'ObjectLockRetentionMode'
type ObjectLockRetentionMode string

// List of ObjectLockRetentionMode
const (
	OBJECTLOCKRETENTIONMODE_GOVERNANCE ObjectLockRetentionMode = "GOVERNANCE"
	OBJECTLOCKRETENTIONMODE_COMPLIANCE ObjectLockRetentionMode = "COMPLIANCE"
)

// All allowed values of ObjectLockRetentionMode enum
var AllowedObjectLockRetentionModeEnumValues = []ObjectLockRetentionMode{
	"GOVERNANCE",
	"COMPLIANCE",
}

func (v *ObjectLockRetentionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectLockRetentionMode(value)
	for _, existing := range AllowedObjectLockRetentionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectLockRetentionMode", value)
}

// NewObjectLockRetentionModeFromValue returns a pointer to a valid ObjectLockRetentionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectLockRetentionModeFromValue(v string) (*ObjectLockRetentionMode, error) {
	ev := ObjectLockRetentionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectLockRetentionMode: valid values are %v", v, AllowedObjectLockRetentionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectLockRetentionMode) IsValid() bool {
	for _, existing := range AllowedObjectLockRetentionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectLockRetentionMode value
func (v ObjectLockRetentionMode) Ptr() *ObjectLockRetentionMode {
	return &v
}

type NullableObjectLockRetentionMode struct {
	value *ObjectLockRetentionMode
	isSet bool
}

func (v NullableObjectLockRetentionMode) Get() *ObjectLockRetentionMode {
	return v.value
}

func (v *NullableObjectLockRetentionMode) Set(val *ObjectLockRetentionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectLockRetentionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectLockRetentionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectLockRetentionMode(val *ObjectLockRetentionMode) *NullableObjectLockRetentionMode {
	return &NullableObjectLockRetentionMode{value: val, isSet: true}
}

func (v NullableObjectLockRetentionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectLockRetentionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

