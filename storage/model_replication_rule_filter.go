/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ReplicationRuleFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationRuleFilter{}

// ReplicationRuleFilter A filter that identifies the subset of objects to which the replication rule applies. A <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or an <code>And</code> child element.
type ReplicationRuleFilter struct {
	Prefix *string `json:"Prefix,omitempty"`
	Tag *ReplicationRuleFilterTag `json:"Tag,omitempty"`
	And *ReplicationRuleFilterAnd `json:"And,omitempty"`
}

// NewReplicationRuleFilter instantiates a new ReplicationRuleFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationRuleFilter() *ReplicationRuleFilter {
	this := ReplicationRuleFilter{}
	return &this
}

// NewReplicationRuleFilterWithDefaults instantiates a new ReplicationRuleFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationRuleFilterWithDefaults() *ReplicationRuleFilter {
	this := ReplicationRuleFilter{}
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ReplicationRuleFilter) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationRuleFilter) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ReplicationRuleFilter) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ReplicationRuleFilter) SetPrefix(v string) {
	o.Prefix = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ReplicationRuleFilter) GetTag() ReplicationRuleFilterTag {
	if o == nil || IsNil(o.Tag) {
		var ret ReplicationRuleFilterTag
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationRuleFilter) GetTagOk() (*ReplicationRuleFilterTag, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ReplicationRuleFilter) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given ReplicationRuleFilterTag and assigns it to the Tag field.
func (o *ReplicationRuleFilter) SetTag(v ReplicationRuleFilterTag) {
	o.Tag = &v
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *ReplicationRuleFilter) GetAnd() ReplicationRuleFilterAnd {
	if o == nil || IsNil(o.And) {
		var ret ReplicationRuleFilterAnd
		return ret
	}
	return *o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationRuleFilter) GetAndOk() (*ReplicationRuleFilterAnd, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *ReplicationRuleFilter) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given ReplicationRuleFilterAnd and assigns it to the And field.
func (o *ReplicationRuleFilter) SetAnd(v ReplicationRuleFilterAnd) {
	o.And = &v
}

func (o ReplicationRuleFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationRuleFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !IsNil(o.Tag) {
		toSerialize["Tag"] = o.Tag
	}
	if !IsNil(o.And) {
		toSerialize["And"] = o.And
	}
	return toSerialize, nil
}

type NullableReplicationRuleFilter struct {
	value *ReplicationRuleFilter
	isSet bool
}

func (v NullableReplicationRuleFilter) Get() *ReplicationRuleFilter {
	return v.value
}

func (v *NullableReplicationRuleFilter) Set(val *ReplicationRuleFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationRuleFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationRuleFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationRuleFilter(val *ReplicationRuleFilter) *NullableReplicationRuleFilter {
	return &NullableReplicationRuleFilter{value: val, isSet: true}
}

func (v NullableReplicationRuleFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationRuleFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


