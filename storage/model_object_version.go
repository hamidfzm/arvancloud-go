/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"time"
)

// checks if the ObjectVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectVersion{}

// ObjectVersion The version of an object.
type ObjectVersion struct {
	ETag *string `json:"ETag,omitempty"`
	Size *int32 `json:"Size,omitempty"`
	StorageClass *ObjectVersionStorageClass `json:"StorageClass,omitempty"`
	Key *string `json:"Key,omitempty"`
	VersionId *string `json:"VersionId,omitempty"`
	IsLatest *bool `json:"IsLatest,omitempty"`
	LastModified *time.Time `json:"LastModified,omitempty"`
	Owner *Owner `json:"Owner,omitempty"`
}

// NewObjectVersion instantiates a new ObjectVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectVersion() *ObjectVersion {
	this := ObjectVersion{}
	return &this
}

// NewObjectVersionWithDefaults instantiates a new ObjectVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectVersionWithDefaults() *ObjectVersion {
	this := ObjectVersion{}
	return &this
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *ObjectVersion) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *ObjectVersion) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *ObjectVersion) SetETag(v string) {
	o.ETag = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ObjectVersion) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ObjectVersion) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ObjectVersion) SetSize(v int32) {
	o.Size = &v
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *ObjectVersion) GetStorageClass() ObjectVersionStorageClass {
	if o == nil || IsNil(o.StorageClass) {
		var ret ObjectVersionStorageClass
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetStorageClassOk() (*ObjectVersionStorageClass, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *ObjectVersion) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given ObjectVersionStorageClass and assigns it to the StorageClass field.
func (o *ObjectVersion) SetStorageClass(v ObjectVersionStorageClass) {
	o.StorageClass = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ObjectVersion) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ObjectVersion) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ObjectVersion) SetKey(v string) {
	o.Key = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *ObjectVersion) GetVersionId() string {
	if o == nil || IsNil(o.VersionId) {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *ObjectVersion) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *ObjectVersion) SetVersionId(v string) {
	o.VersionId = &v
}

// GetIsLatest returns the IsLatest field value if set, zero value otherwise.
func (o *ObjectVersion) GetIsLatest() bool {
	if o == nil || IsNil(o.IsLatest) {
		var ret bool
		return ret
	}
	return *o.IsLatest
}

// GetIsLatestOk returns a tuple with the IsLatest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetIsLatestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLatest) {
		return nil, false
	}
	return o.IsLatest, true
}

// HasIsLatest returns a boolean if a field has been set.
func (o *ObjectVersion) HasIsLatest() bool {
	if o != nil && !IsNil(o.IsLatest) {
		return true
	}

	return false
}

// SetIsLatest gets a reference to the given bool and assigns it to the IsLatest field.
func (o *ObjectVersion) SetIsLatest(v bool) {
	o.IsLatest = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *ObjectVersion) GetLastModified() time.Time {
	if o == nil || IsNil(o.LastModified) {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *ObjectVersion) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *ObjectVersion) SetLastModified(v time.Time) {
	o.LastModified = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ObjectVersion) GetOwner() Owner {
	if o == nil || IsNil(o.Owner) {
		var ret Owner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectVersion) GetOwnerOk() (*Owner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ObjectVersion) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Owner and assigns it to the Owner field.
func (o *ObjectVersion) SetOwner(v Owner) {
	o.Owner = &v
}

func (o ObjectVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ETag) {
		toSerialize["ETag"] = o.ETag
	}
	if !IsNil(o.Size) {
		toSerialize["Size"] = o.Size
	}
	if !IsNil(o.StorageClass) {
		toSerialize["StorageClass"] = o.StorageClass
	}
	if !IsNil(o.Key) {
		toSerialize["Key"] = o.Key
	}
	if !IsNil(o.VersionId) {
		toSerialize["VersionId"] = o.VersionId
	}
	if !IsNil(o.IsLatest) {
		toSerialize["IsLatest"] = o.IsLatest
	}
	if !IsNil(o.LastModified) {
		toSerialize["LastModified"] = o.LastModified
	}
	if !IsNil(o.Owner) {
		toSerialize["Owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullableObjectVersion struct {
	value *ObjectVersion
	isSet bool
}

func (v NullableObjectVersion) Get() *ObjectVersion {
	return v.value
}

func (v *NullableObjectVersion) Set(val *ObjectVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectVersion(val *ObjectVersion) *NullableObjectVersion {
	return &NullableObjectVersion{value: val, isSet: true}
}

func (v NullableObjectVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


