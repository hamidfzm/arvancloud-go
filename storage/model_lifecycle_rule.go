/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the LifecycleRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleRule{}

// LifecycleRule A lifecycle rule for individual objects in an ArvanCloud S3 bucket.
type LifecycleRule struct {
	Expiration *LifecycleRuleExpiration `json:"Expiration,omitempty"`
	ID *string `json:"ID,omitempty"`
	Prefix *string `json:"Prefix,omitempty"`
	Filter *LifecycleRuleFilter `json:"Filter,omitempty"`
	Status ExpirationStatus `json:"Status"`
	Transitions *Array `json:"Transitions,omitempty"`
	NoncurrentVersionTransitions *Array `json:"NoncurrentVersionTransitions,omitempty"`
	NoncurrentVersionExpiration *NoncurrentVersionExpiration `json:"NoncurrentVersionExpiration,omitempty"`
	AbortIncompleteMultipartUpload *AbortIncompleteMultipartUpload `json:"AbortIncompleteMultipartUpload,omitempty"`
}

// NewLifecycleRule instantiates a new LifecycleRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleRule(status ExpirationStatus) *LifecycleRule {
	this := LifecycleRule{}
	this.Status = status
	return &this
}

// NewLifecycleRuleWithDefaults instantiates a new LifecycleRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleRuleWithDefaults() *LifecycleRule {
	this := LifecycleRule{}
	return &this
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *LifecycleRule) GetExpiration() LifecycleRuleExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret LifecycleRuleExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetExpirationOk() (*LifecycleRuleExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *LifecycleRule) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given LifecycleRuleExpiration and assigns it to the Expiration field.
func (o *LifecycleRule) SetExpiration(v LifecycleRuleExpiration) {
	o.Expiration = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *LifecycleRule) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *LifecycleRule) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *LifecycleRule) SetID(v string) {
	o.ID = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *LifecycleRule) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *LifecycleRule) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *LifecycleRule) SetPrefix(v string) {
	o.Prefix = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *LifecycleRule) GetFilter() LifecycleRuleFilter {
	if o == nil || IsNil(o.Filter) {
		var ret LifecycleRuleFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetFilterOk() (*LifecycleRuleFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *LifecycleRule) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given LifecycleRuleFilter and assigns it to the Filter field.
func (o *LifecycleRule) SetFilter(v LifecycleRuleFilter) {
	o.Filter = &v
}

// GetStatus returns the Status field value
func (o *LifecycleRule) GetStatus() ExpirationStatus {
	if o == nil {
		var ret ExpirationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetStatusOk() (*ExpirationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *LifecycleRule) SetStatus(v ExpirationStatus) {
	o.Status = v
}

// GetTransitions returns the Transitions field value if set, zero value otherwise.
func (o *LifecycleRule) GetTransitions() Array {
	if o == nil || IsNil(o.Transitions) {
		var ret Array
		return ret
	}
	return *o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetTransitionsOk() (*Array, bool) {
	if o == nil || IsNil(o.Transitions) {
		return nil, false
	}
	return o.Transitions, true
}

// HasTransitions returns a boolean if a field has been set.
func (o *LifecycleRule) HasTransitions() bool {
	if o != nil && !IsNil(o.Transitions) {
		return true
	}

	return false
}

// SetTransitions gets a reference to the given Array and assigns it to the Transitions field.
func (o *LifecycleRule) SetTransitions(v Array) {
	o.Transitions = &v
}

// GetNoncurrentVersionTransitions returns the NoncurrentVersionTransitions field value if set, zero value otherwise.
func (o *LifecycleRule) GetNoncurrentVersionTransitions() Array {
	if o == nil || IsNil(o.NoncurrentVersionTransitions) {
		var ret Array
		return ret
	}
	return *o.NoncurrentVersionTransitions
}

// GetNoncurrentVersionTransitionsOk returns a tuple with the NoncurrentVersionTransitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetNoncurrentVersionTransitionsOk() (*Array, bool) {
	if o == nil || IsNil(o.NoncurrentVersionTransitions) {
		return nil, false
	}
	return o.NoncurrentVersionTransitions, true
}

// HasNoncurrentVersionTransitions returns a boolean if a field has been set.
func (o *LifecycleRule) HasNoncurrentVersionTransitions() bool {
	if o != nil && !IsNil(o.NoncurrentVersionTransitions) {
		return true
	}

	return false
}

// SetNoncurrentVersionTransitions gets a reference to the given Array and assigns it to the NoncurrentVersionTransitions field.
func (o *LifecycleRule) SetNoncurrentVersionTransitions(v Array) {
	o.NoncurrentVersionTransitions = &v
}

// GetNoncurrentVersionExpiration returns the NoncurrentVersionExpiration field value if set, zero value otherwise.
func (o *LifecycleRule) GetNoncurrentVersionExpiration() NoncurrentVersionExpiration {
	if o == nil || IsNil(o.NoncurrentVersionExpiration) {
		var ret NoncurrentVersionExpiration
		return ret
	}
	return *o.NoncurrentVersionExpiration
}

// GetNoncurrentVersionExpirationOk returns a tuple with the NoncurrentVersionExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetNoncurrentVersionExpirationOk() (*NoncurrentVersionExpiration, bool) {
	if o == nil || IsNil(o.NoncurrentVersionExpiration) {
		return nil, false
	}
	return o.NoncurrentVersionExpiration, true
}

// HasNoncurrentVersionExpiration returns a boolean if a field has been set.
func (o *LifecycleRule) HasNoncurrentVersionExpiration() bool {
	if o != nil && !IsNil(o.NoncurrentVersionExpiration) {
		return true
	}

	return false
}

// SetNoncurrentVersionExpiration gets a reference to the given NoncurrentVersionExpiration and assigns it to the NoncurrentVersionExpiration field.
func (o *LifecycleRule) SetNoncurrentVersionExpiration(v NoncurrentVersionExpiration) {
	o.NoncurrentVersionExpiration = &v
}

// GetAbortIncompleteMultipartUpload returns the AbortIncompleteMultipartUpload field value if set, zero value otherwise.
func (o *LifecycleRule) GetAbortIncompleteMultipartUpload() AbortIncompleteMultipartUpload {
	if o == nil || IsNil(o.AbortIncompleteMultipartUpload) {
		var ret AbortIncompleteMultipartUpload
		return ret
	}
	return *o.AbortIncompleteMultipartUpload
}

// GetAbortIncompleteMultipartUploadOk returns a tuple with the AbortIncompleteMultipartUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetAbortIncompleteMultipartUploadOk() (*AbortIncompleteMultipartUpload, bool) {
	if o == nil || IsNil(o.AbortIncompleteMultipartUpload) {
		return nil, false
	}
	return o.AbortIncompleteMultipartUpload, true
}

// HasAbortIncompleteMultipartUpload returns a boolean if a field has been set.
func (o *LifecycleRule) HasAbortIncompleteMultipartUpload() bool {
	if o != nil && !IsNil(o.AbortIncompleteMultipartUpload) {
		return true
	}

	return false
}

// SetAbortIncompleteMultipartUpload gets a reference to the given AbortIncompleteMultipartUpload and assigns it to the AbortIncompleteMultipartUpload field.
func (o *LifecycleRule) SetAbortIncompleteMultipartUpload(v AbortIncompleteMultipartUpload) {
	o.AbortIncompleteMultipartUpload = &v
}

func (o LifecycleRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expiration) {
		toSerialize["Expiration"] = o.Expiration
	}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !IsNil(o.Filter) {
		toSerialize["Filter"] = o.Filter
	}
	toSerialize["Status"] = o.Status
	if !IsNil(o.Transitions) {
		toSerialize["Transitions"] = o.Transitions
	}
	if !IsNil(o.NoncurrentVersionTransitions) {
		toSerialize["NoncurrentVersionTransitions"] = o.NoncurrentVersionTransitions
	}
	if !IsNil(o.NoncurrentVersionExpiration) {
		toSerialize["NoncurrentVersionExpiration"] = o.NoncurrentVersionExpiration
	}
	if !IsNil(o.AbortIncompleteMultipartUpload) {
		toSerialize["AbortIncompleteMultipartUpload"] = o.AbortIncompleteMultipartUpload
	}
	return toSerialize, nil
}

type NullableLifecycleRule struct {
	value *LifecycleRule
	isSet bool
}

func (v NullableLifecycleRule) Get() *LifecycleRule {
	return v.value
}

func (v *NullableLifecycleRule) Set(val *LifecycleRule) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleRule) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleRule(val *LifecycleRule) *NullableLifecycleRule {
	return &NullableLifecycleRule{value: val, isSet: true}
}

func (v NullableLifecycleRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


