/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the InputSerializationCSV type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputSerializationCSV{}

// InputSerializationCSV struct for InputSerializationCSV
type InputSerializationCSV struct {
	FileHeaderInfo *FileHeaderInfo `json:"FileHeaderInfo,omitempty"`
	Comments *string `json:"Comments,omitempty"`
	QuoteEscapeCharacter *string `json:"QuoteEscapeCharacter,omitempty"`
	RecordDelimiter *string `json:"RecordDelimiter,omitempty"`
	FieldDelimiter *string `json:"FieldDelimiter,omitempty"`
	QuoteCharacter *string `json:"QuoteCharacter,omitempty"`
	AllowQuotedRecordDelimiter *bool `json:"AllowQuotedRecordDelimiter,omitempty"`
}

// NewInputSerializationCSV instantiates a new InputSerializationCSV object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputSerializationCSV() *InputSerializationCSV {
	this := InputSerializationCSV{}
	return &this
}

// NewInputSerializationCSVWithDefaults instantiates a new InputSerializationCSV object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputSerializationCSVWithDefaults() *InputSerializationCSV {
	this := InputSerializationCSV{}
	return &this
}

// GetFileHeaderInfo returns the FileHeaderInfo field value if set, zero value otherwise.
func (o *InputSerializationCSV) GetFileHeaderInfo() FileHeaderInfo {
	if o == nil || IsNil(o.FileHeaderInfo) {
		var ret FileHeaderInfo
		return ret
	}
	return *o.FileHeaderInfo
}

// GetFileHeaderInfoOk returns a tuple with the FileHeaderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerializationCSV) GetFileHeaderInfoOk() (*FileHeaderInfo, bool) {
	if o == nil || IsNil(o.FileHeaderInfo) {
		return nil, false
	}
	return o.FileHeaderInfo, true
}

// HasFileHeaderInfo returns a boolean if a field has been set.
func (o *InputSerializationCSV) HasFileHeaderInfo() bool {
	if o != nil && !IsNil(o.FileHeaderInfo) {
		return true
	}

	return false
}

// SetFileHeaderInfo gets a reference to the given FileHeaderInfo and assigns it to the FileHeaderInfo field.
func (o *InputSerializationCSV) SetFileHeaderInfo(v FileHeaderInfo) {
	o.FileHeaderInfo = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *InputSerializationCSV) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerializationCSV) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *InputSerializationCSV) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *InputSerializationCSV) SetComments(v string) {
	o.Comments = &v
}

// GetQuoteEscapeCharacter returns the QuoteEscapeCharacter field value if set, zero value otherwise.
func (o *InputSerializationCSV) GetQuoteEscapeCharacter() string {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteEscapeCharacter
}

// GetQuoteEscapeCharacterOk returns a tuple with the QuoteEscapeCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerializationCSV) GetQuoteEscapeCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		return nil, false
	}
	return o.QuoteEscapeCharacter, true
}

// HasQuoteEscapeCharacter returns a boolean if a field has been set.
func (o *InputSerializationCSV) HasQuoteEscapeCharacter() bool {
	if o != nil && !IsNil(o.QuoteEscapeCharacter) {
		return true
	}

	return false
}

// SetQuoteEscapeCharacter gets a reference to the given string and assigns it to the QuoteEscapeCharacter field.
func (o *InputSerializationCSV) SetQuoteEscapeCharacter(v string) {
	o.QuoteEscapeCharacter = &v
}

// GetRecordDelimiter returns the RecordDelimiter field value if set, zero value otherwise.
func (o *InputSerializationCSV) GetRecordDelimiter() string {
	if o == nil || IsNil(o.RecordDelimiter) {
		var ret string
		return ret
	}
	return *o.RecordDelimiter
}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerializationCSV) GetRecordDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.RecordDelimiter) {
		return nil, false
	}
	return o.RecordDelimiter, true
}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *InputSerializationCSV) HasRecordDelimiter() bool {
	if o != nil && !IsNil(o.RecordDelimiter) {
		return true
	}

	return false
}

// SetRecordDelimiter gets a reference to the given string and assigns it to the RecordDelimiter field.
func (o *InputSerializationCSV) SetRecordDelimiter(v string) {
	o.RecordDelimiter = &v
}

// GetFieldDelimiter returns the FieldDelimiter field value if set, zero value otherwise.
func (o *InputSerializationCSV) GetFieldDelimiter() string {
	if o == nil || IsNil(o.FieldDelimiter) {
		var ret string
		return ret
	}
	return *o.FieldDelimiter
}

// GetFieldDelimiterOk returns a tuple with the FieldDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerializationCSV) GetFieldDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.FieldDelimiter) {
		return nil, false
	}
	return o.FieldDelimiter, true
}

// HasFieldDelimiter returns a boolean if a field has been set.
func (o *InputSerializationCSV) HasFieldDelimiter() bool {
	if o != nil && !IsNil(o.FieldDelimiter) {
		return true
	}

	return false
}

// SetFieldDelimiter gets a reference to the given string and assigns it to the FieldDelimiter field.
func (o *InputSerializationCSV) SetFieldDelimiter(v string) {
	o.FieldDelimiter = &v
}

// GetQuoteCharacter returns the QuoteCharacter field value if set, zero value otherwise.
func (o *InputSerializationCSV) GetQuoteCharacter() string {
	if o == nil || IsNil(o.QuoteCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteCharacter
}

// GetQuoteCharacterOk returns a tuple with the QuoteCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerializationCSV) GetQuoteCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteCharacter) {
		return nil, false
	}
	return o.QuoteCharacter, true
}

// HasQuoteCharacter returns a boolean if a field has been set.
func (o *InputSerializationCSV) HasQuoteCharacter() bool {
	if o != nil && !IsNil(o.QuoteCharacter) {
		return true
	}

	return false
}

// SetQuoteCharacter gets a reference to the given string and assigns it to the QuoteCharacter field.
func (o *InputSerializationCSV) SetQuoteCharacter(v string) {
	o.QuoteCharacter = &v
}

// GetAllowQuotedRecordDelimiter returns the AllowQuotedRecordDelimiter field value if set, zero value otherwise.
func (o *InputSerializationCSV) GetAllowQuotedRecordDelimiter() bool {
	if o == nil || IsNil(o.AllowQuotedRecordDelimiter) {
		var ret bool
		return ret
	}
	return *o.AllowQuotedRecordDelimiter
}

// GetAllowQuotedRecordDelimiterOk returns a tuple with the AllowQuotedRecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerializationCSV) GetAllowQuotedRecordDelimiterOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowQuotedRecordDelimiter) {
		return nil, false
	}
	return o.AllowQuotedRecordDelimiter, true
}

// HasAllowQuotedRecordDelimiter returns a boolean if a field has been set.
func (o *InputSerializationCSV) HasAllowQuotedRecordDelimiter() bool {
	if o != nil && !IsNil(o.AllowQuotedRecordDelimiter) {
		return true
	}

	return false
}

// SetAllowQuotedRecordDelimiter gets a reference to the given bool and assigns it to the AllowQuotedRecordDelimiter field.
func (o *InputSerializationCSV) SetAllowQuotedRecordDelimiter(v bool) {
	o.AllowQuotedRecordDelimiter = &v
}

func (o InputSerializationCSV) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputSerializationCSV) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileHeaderInfo) {
		toSerialize["FileHeaderInfo"] = o.FileHeaderInfo
	}
	if !IsNil(o.Comments) {
		toSerialize["Comments"] = o.Comments
	}
	if !IsNil(o.QuoteEscapeCharacter) {
		toSerialize["QuoteEscapeCharacter"] = o.QuoteEscapeCharacter
	}
	if !IsNil(o.RecordDelimiter) {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}
	if !IsNil(o.FieldDelimiter) {
		toSerialize["FieldDelimiter"] = o.FieldDelimiter
	}
	if !IsNil(o.QuoteCharacter) {
		toSerialize["QuoteCharacter"] = o.QuoteCharacter
	}
	if !IsNil(o.AllowQuotedRecordDelimiter) {
		toSerialize["AllowQuotedRecordDelimiter"] = o.AllowQuotedRecordDelimiter
	}
	return toSerialize, nil
}

type NullableInputSerializationCSV struct {
	value *InputSerializationCSV
	isSet bool
}

func (v NullableInputSerializationCSV) Get() *InputSerializationCSV {
	return v.value
}

func (v *NullableInputSerializationCSV) Set(val *InputSerializationCSV) {
	v.value = val
	v.isSet = true
}

func (v NullableInputSerializationCSV) IsSet() bool {
	return v.isSet
}

func (v *NullableInputSerializationCSV) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputSerializationCSV(val *InputSerializationCSV) *NullableInputSerializationCSV {
	return &NullableInputSerializationCSV{value: val, isSet: true}
}

func (v NullableInputSerializationCSV) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputSerializationCSV) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


