/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the MultipartUploadInitiator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipartUploadInitiator{}

// MultipartUploadInitiator struct for MultipartUploadInitiator
type MultipartUploadInitiator struct {
	ID *string `json:"ID,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
}

// NewMultipartUploadInitiator instantiates a new MultipartUploadInitiator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipartUploadInitiator() *MultipartUploadInitiator {
	this := MultipartUploadInitiator{}
	return &this
}

// NewMultipartUploadInitiatorWithDefaults instantiates a new MultipartUploadInitiator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipartUploadInitiatorWithDefaults() *MultipartUploadInitiator {
	this := MultipartUploadInitiator{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *MultipartUploadInitiator) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUploadInitiator) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *MultipartUploadInitiator) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *MultipartUploadInitiator) SetID(v string) {
	o.ID = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MultipartUploadInitiator) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUploadInitiator) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MultipartUploadInitiator) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MultipartUploadInitiator) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o MultipartUploadInitiator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipartUploadInitiator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	return toSerialize, nil
}

type NullableMultipartUploadInitiator struct {
	value *MultipartUploadInitiator
	isSet bool
}

func (v NullableMultipartUploadInitiator) Get() *MultipartUploadInitiator {
	return v.value
}

func (v *NullableMultipartUploadInitiator) Set(val *MultipartUploadInitiator) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipartUploadInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipartUploadInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipartUploadInitiator(val *MultipartUploadInitiator) *NullableMultipartUploadInitiator {
	return &NullableMultipartUploadInitiator{value: val, isSet: true}
}

func (v NullableMultipartUploadInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipartUploadInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


