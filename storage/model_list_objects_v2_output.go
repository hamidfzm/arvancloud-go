/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ListObjectsV2Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListObjectsV2Output{}

// ListObjectsV2Output struct for ListObjectsV2Output
type ListObjectsV2Output struct {
	IsTruncated *bool `json:"IsTruncated,omitempty"`
	Contents *Array `json:"Contents,omitempty"`
	Name *string `json:"Name,omitempty"`
	Prefix *string `json:"Prefix,omitempty"`
	Delimiter *string `json:"Delimiter,omitempty"`
	MaxKeys *int32 `json:"MaxKeys,omitempty"`
	CommonPrefixes *Array `json:"CommonPrefixes,omitempty"`
	EncodingType *EncodingType `json:"EncodingType,omitempty"`
	KeyCount *int32 `json:"KeyCount,omitempty"`
	ContinuationToken *string `json:"ContinuationToken,omitempty"`
	NextContinuationToken *string `json:"NextContinuationToken,omitempty"`
	StartAfter *string `json:"StartAfter,omitempty"`
}

// NewListObjectsV2Output instantiates a new ListObjectsV2Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListObjectsV2Output() *ListObjectsV2Output {
	this := ListObjectsV2Output{}
	return &this
}

// NewListObjectsV2OutputWithDefaults instantiates a new ListObjectsV2Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListObjectsV2OutputWithDefaults() *ListObjectsV2Output {
	this := ListObjectsV2Output{}
	return &this
}

// GetIsTruncated returns the IsTruncated field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetIsTruncated() bool {
	if o == nil || IsNil(o.IsTruncated) {
		var ret bool
		return ret
	}
	return *o.IsTruncated
}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetIsTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTruncated) {
		return nil, false
	}
	return o.IsTruncated, true
}

// HasIsTruncated returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasIsTruncated() bool {
	if o != nil && !IsNil(o.IsTruncated) {
		return true
	}

	return false
}

// SetIsTruncated gets a reference to the given bool and assigns it to the IsTruncated field.
func (o *ListObjectsV2Output) SetIsTruncated(v bool) {
	o.IsTruncated = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetContents() Array {
	if o == nil || IsNil(o.Contents) {
		var ret Array
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetContentsOk() (*Array, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given Array and assigns it to the Contents field.
func (o *ListObjectsV2Output) SetContents(v Array) {
	o.Contents = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListObjectsV2Output) SetName(v string) {
	o.Name = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ListObjectsV2Output) SetPrefix(v string) {
	o.Prefix = &v
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *ListObjectsV2Output) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetMaxKeys returns the MaxKeys field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetMaxKeys() int32 {
	if o == nil || IsNil(o.MaxKeys) {
		var ret int32
		return ret
	}
	return *o.MaxKeys
}

// GetMaxKeysOk returns a tuple with the MaxKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetMaxKeysOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxKeys) {
		return nil, false
	}
	return o.MaxKeys, true
}

// HasMaxKeys returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasMaxKeys() bool {
	if o != nil && !IsNil(o.MaxKeys) {
		return true
	}

	return false
}

// SetMaxKeys gets a reference to the given int32 and assigns it to the MaxKeys field.
func (o *ListObjectsV2Output) SetMaxKeys(v int32) {
	o.MaxKeys = &v
}

// GetCommonPrefixes returns the CommonPrefixes field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetCommonPrefixes() Array {
	if o == nil || IsNil(o.CommonPrefixes) {
		var ret Array
		return ret
	}
	return *o.CommonPrefixes
}

// GetCommonPrefixesOk returns a tuple with the CommonPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetCommonPrefixesOk() (*Array, bool) {
	if o == nil || IsNil(o.CommonPrefixes) {
		return nil, false
	}
	return o.CommonPrefixes, true
}

// HasCommonPrefixes returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasCommonPrefixes() bool {
	if o != nil && !IsNil(o.CommonPrefixes) {
		return true
	}

	return false
}

// SetCommonPrefixes gets a reference to the given Array and assigns it to the CommonPrefixes field.
func (o *ListObjectsV2Output) SetCommonPrefixes(v Array) {
	o.CommonPrefixes = &v
}

// GetEncodingType returns the EncodingType field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetEncodingType() EncodingType {
	if o == nil || IsNil(o.EncodingType) {
		var ret EncodingType
		return ret
	}
	return *o.EncodingType
}

// GetEncodingTypeOk returns a tuple with the EncodingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetEncodingTypeOk() (*EncodingType, bool) {
	if o == nil || IsNil(o.EncodingType) {
		return nil, false
	}
	return o.EncodingType, true
}

// HasEncodingType returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasEncodingType() bool {
	if o != nil && !IsNil(o.EncodingType) {
		return true
	}

	return false
}

// SetEncodingType gets a reference to the given EncodingType and assigns it to the EncodingType field.
func (o *ListObjectsV2Output) SetEncodingType(v EncodingType) {
	o.EncodingType = &v
}

// GetKeyCount returns the KeyCount field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetKeyCount() int32 {
	if o == nil || IsNil(o.KeyCount) {
		var ret int32
		return ret
	}
	return *o.KeyCount
}

// GetKeyCountOk returns a tuple with the KeyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetKeyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyCount) {
		return nil, false
	}
	return o.KeyCount, true
}

// HasKeyCount returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasKeyCount() bool {
	if o != nil && !IsNil(o.KeyCount) {
		return true
	}

	return false
}

// SetKeyCount gets a reference to the given int32 and assigns it to the KeyCount field.
func (o *ListObjectsV2Output) SetKeyCount(v int32) {
	o.KeyCount = &v
}

// GetContinuationToken returns the ContinuationToken field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetContinuationToken() string {
	if o == nil || IsNil(o.ContinuationToken) {
		var ret string
		return ret
	}
	return *o.ContinuationToken
}

// GetContinuationTokenOk returns a tuple with the ContinuationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetContinuationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuationToken) {
		return nil, false
	}
	return o.ContinuationToken, true
}

// HasContinuationToken returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasContinuationToken() bool {
	if o != nil && !IsNil(o.ContinuationToken) {
		return true
	}

	return false
}

// SetContinuationToken gets a reference to the given string and assigns it to the ContinuationToken field.
func (o *ListObjectsV2Output) SetContinuationToken(v string) {
	o.ContinuationToken = &v
}

// GetNextContinuationToken returns the NextContinuationToken field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetNextContinuationToken() string {
	if o == nil || IsNil(o.NextContinuationToken) {
		var ret string
		return ret
	}
	return *o.NextContinuationToken
}

// GetNextContinuationTokenOk returns a tuple with the NextContinuationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetNextContinuationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextContinuationToken) {
		return nil, false
	}
	return o.NextContinuationToken, true
}

// HasNextContinuationToken returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasNextContinuationToken() bool {
	if o != nil && !IsNil(o.NextContinuationToken) {
		return true
	}

	return false
}

// SetNextContinuationToken gets a reference to the given string and assigns it to the NextContinuationToken field.
func (o *ListObjectsV2Output) SetNextContinuationToken(v string) {
	o.NextContinuationToken = &v
}

// GetStartAfter returns the StartAfter field value if set, zero value otherwise.
func (o *ListObjectsV2Output) GetStartAfter() string {
	if o == nil || IsNil(o.StartAfter) {
		var ret string
		return ret
	}
	return *o.StartAfter
}

// GetStartAfterOk returns a tuple with the StartAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsV2Output) GetStartAfterOk() (*string, bool) {
	if o == nil || IsNil(o.StartAfter) {
		return nil, false
	}
	return o.StartAfter, true
}

// HasStartAfter returns a boolean if a field has been set.
func (o *ListObjectsV2Output) HasStartAfter() bool {
	if o != nil && !IsNil(o.StartAfter) {
		return true
	}

	return false
}

// SetStartAfter gets a reference to the given string and assigns it to the StartAfter field.
func (o *ListObjectsV2Output) SetStartAfter(v string) {
	o.StartAfter = &v
}

func (o ListObjectsV2Output) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListObjectsV2Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsTruncated) {
		toSerialize["IsTruncated"] = o.IsTruncated
	}
	if !IsNil(o.Contents) {
		toSerialize["Contents"] = o.Contents
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !IsNil(o.Delimiter) {
		toSerialize["Delimiter"] = o.Delimiter
	}
	if !IsNil(o.MaxKeys) {
		toSerialize["MaxKeys"] = o.MaxKeys
	}
	if !IsNil(o.CommonPrefixes) {
		toSerialize["CommonPrefixes"] = o.CommonPrefixes
	}
	if !IsNil(o.EncodingType) {
		toSerialize["EncodingType"] = o.EncodingType
	}
	if !IsNil(o.KeyCount) {
		toSerialize["KeyCount"] = o.KeyCount
	}
	if !IsNil(o.ContinuationToken) {
		toSerialize["ContinuationToken"] = o.ContinuationToken
	}
	if !IsNil(o.NextContinuationToken) {
		toSerialize["NextContinuationToken"] = o.NextContinuationToken
	}
	if !IsNil(o.StartAfter) {
		toSerialize["StartAfter"] = o.StartAfter
	}
	return toSerialize, nil
}

type NullableListObjectsV2Output struct {
	value *ListObjectsV2Output
	isSet bool
}

func (v NullableListObjectsV2Output) Get() *ListObjectsV2Output {
	return v.value
}

func (v *NullableListObjectsV2Output) Set(val *ListObjectsV2Output) {
	v.value = val
	v.isSet = true
}

func (v NullableListObjectsV2Output) IsSet() bool {
	return v.isSet
}

func (v *NullableListObjectsV2Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListObjectsV2Output(val *ListObjectsV2Output) *NullableListObjectsV2Output {
	return &NullableListObjectsV2Output{value: val, isSet: true}
}

func (v NullableListObjectsV2Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListObjectsV2Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


