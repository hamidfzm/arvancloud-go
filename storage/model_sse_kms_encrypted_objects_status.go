/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// SseKmsEncryptedObjectsStatus the model 'SseKmsEncryptedObjectsStatus'
type SseKmsEncryptedObjectsStatus string

// List of SseKmsEncryptedObjectsStatus
const (
	SSEKMSENCRYPTEDOBJECTSSTATUS_ENABLED SseKmsEncryptedObjectsStatus = "Enabled"
	SSEKMSENCRYPTEDOBJECTSSTATUS_DISABLED SseKmsEncryptedObjectsStatus = "Disabled"
)

// All allowed values of SseKmsEncryptedObjectsStatus enum
var AllowedSseKmsEncryptedObjectsStatusEnumValues = []SseKmsEncryptedObjectsStatus{
	"Enabled",
	"Disabled",
}

func (v *SseKmsEncryptedObjectsStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SseKmsEncryptedObjectsStatus(value)
	for _, existing := range AllowedSseKmsEncryptedObjectsStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SseKmsEncryptedObjectsStatus", value)
}

// NewSseKmsEncryptedObjectsStatusFromValue returns a pointer to a valid SseKmsEncryptedObjectsStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSseKmsEncryptedObjectsStatusFromValue(v string) (*SseKmsEncryptedObjectsStatus, error) {
	ev := SseKmsEncryptedObjectsStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SseKmsEncryptedObjectsStatus: valid values are %v", v, AllowedSseKmsEncryptedObjectsStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SseKmsEncryptedObjectsStatus) IsValid() bool {
	for _, existing := range AllowedSseKmsEncryptedObjectsStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SseKmsEncryptedObjectsStatus value
func (v SseKmsEncryptedObjectsStatus) Ptr() *SseKmsEncryptedObjectsStatus {
	return &v
}

type NullableSseKmsEncryptedObjectsStatus struct {
	value *SseKmsEncryptedObjectsStatus
	isSet bool
}

func (v NullableSseKmsEncryptedObjectsStatus) Get() *SseKmsEncryptedObjectsStatus {
	return v.value
}

func (v *NullableSseKmsEncryptedObjectsStatus) Set(val *SseKmsEncryptedObjectsStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSseKmsEncryptedObjectsStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSseKmsEncryptedObjectsStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSseKmsEncryptedObjectsStatus(val *SseKmsEncryptedObjectsStatus) *NullableSseKmsEncryptedObjectsStatus {
	return &NullableSseKmsEncryptedObjectsStatus{value: val, isSet: true}
}

func (v NullableSseKmsEncryptedObjectsStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSseKmsEncryptedObjectsStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

