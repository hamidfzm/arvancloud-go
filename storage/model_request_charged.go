/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// RequestCharged If present, indicates that the requester was successfully charged for the request.
type RequestCharged string

// List of RequestCharged
const (
	REQUESTCHARGED_REQUESTER RequestCharged = "requester"
)

// All allowed values of RequestCharged enum
var AllowedRequestChargedEnumValues = []RequestCharged{
	"requester",
}

func (v *RequestCharged) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestCharged(value)
	for _, existing := range AllowedRequestChargedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestCharged", value)
}

// NewRequestChargedFromValue returns a pointer to a valid RequestCharged
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestChargedFromValue(v string) (*RequestCharged, error) {
	ev := RequestCharged(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestCharged: valid values are %v", v, AllowedRequestChargedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestCharged) IsValid() bool {
	for _, existing := range AllowedRequestChargedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestCharged value
func (v RequestCharged) Ptr() *RequestCharged {
	return &v
}

type NullableRequestCharged struct {
	value *RequestCharged
	isSet bool
}

func (v NullableRequestCharged) Get() *RequestCharged {
	return v.value
}

func (v *NullableRequestCharged) Set(val *RequestCharged) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestCharged) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestCharged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestCharged(val *RequestCharged) *NullableRequestCharged {
	return &NullableRequestCharged{value: val, isSet: true}
}

func (v NullableRequestCharged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestCharged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

