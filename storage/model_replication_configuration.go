/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ReplicationConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationConfiguration{}

// ReplicationConfiguration A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
type ReplicationConfiguration struct {
	Role Role `json:"Role"`
	Rules ReplicationRules `json:"Rules"`
}

// NewReplicationConfiguration instantiates a new ReplicationConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationConfiguration(role Role, rules ReplicationRules) *ReplicationConfiguration {
	this := ReplicationConfiguration{}
	this.Role = role
	this.Rules = rules
	return &this
}

// NewReplicationConfigurationWithDefaults instantiates a new ReplicationConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationConfigurationWithDefaults() *ReplicationConfiguration {
	this := ReplicationConfiguration{}
	return &this
}

// GetRole returns the Role field value
func (o *ReplicationConfiguration) GetRole() Role {
	if o == nil {
		var ret Role
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ReplicationConfiguration) GetRoleOk() (*Role, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ReplicationConfiguration) SetRole(v Role) {
	o.Role = v
}

// GetRules returns the Rules field value
func (o *ReplicationConfiguration) GetRules() ReplicationRules {
	if o == nil {
		var ret ReplicationRules
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *ReplicationConfiguration) GetRulesOk() (*ReplicationRules, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rules, true
}

// SetRules sets field value
func (o *ReplicationConfiguration) SetRules(v ReplicationRules) {
	o.Rules = v
}

func (o ReplicationConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Role"] = o.Role
	toSerialize["Rules"] = o.Rules
	return toSerialize, nil
}

type NullableReplicationConfiguration struct {
	value *ReplicationConfiguration
	isSet bool
}

func (v NullableReplicationConfiguration) Get() *ReplicationConfiguration {
	return v.value
}

func (v *NullableReplicationConfiguration) Set(val *ReplicationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationConfiguration(val *ReplicationConfiguration) *NullableReplicationConfiguration {
	return &NullableReplicationConfiguration{value: val, isSet: true}
}

func (v NullableReplicationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


