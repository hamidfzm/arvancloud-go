/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"time"
)

// checks if the ObjectLockRetention type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectLockRetention{}

// ObjectLockRetention A Retention configuration for an object.
type ObjectLockRetention struct {
	Mode *ObjectLockRetentionMode `json:"Mode,omitempty"`
	RetainUntilDate *time.Time `json:"RetainUntilDate,omitempty"`
}

// NewObjectLockRetention instantiates a new ObjectLockRetention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectLockRetention() *ObjectLockRetention {
	this := ObjectLockRetention{}
	return &this
}

// NewObjectLockRetentionWithDefaults instantiates a new ObjectLockRetention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectLockRetentionWithDefaults() *ObjectLockRetention {
	this := ObjectLockRetention{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ObjectLockRetention) GetMode() ObjectLockRetentionMode {
	if o == nil || IsNil(o.Mode) {
		var ret ObjectLockRetentionMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectLockRetention) GetModeOk() (*ObjectLockRetentionMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ObjectLockRetention) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given ObjectLockRetentionMode and assigns it to the Mode field.
func (o *ObjectLockRetention) SetMode(v ObjectLockRetentionMode) {
	o.Mode = &v
}

// GetRetainUntilDate returns the RetainUntilDate field value if set, zero value otherwise.
func (o *ObjectLockRetention) GetRetainUntilDate() time.Time {
	if o == nil || IsNil(o.RetainUntilDate) {
		var ret time.Time
		return ret
	}
	return *o.RetainUntilDate
}

// GetRetainUntilDateOk returns a tuple with the RetainUntilDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectLockRetention) GetRetainUntilDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RetainUntilDate) {
		return nil, false
	}
	return o.RetainUntilDate, true
}

// HasRetainUntilDate returns a boolean if a field has been set.
func (o *ObjectLockRetention) HasRetainUntilDate() bool {
	if o != nil && !IsNil(o.RetainUntilDate) {
		return true
	}

	return false
}

// SetRetainUntilDate gets a reference to the given time.Time and assigns it to the RetainUntilDate field.
func (o *ObjectLockRetention) SetRetainUntilDate(v time.Time) {
	o.RetainUntilDate = &v
}

func (o ObjectLockRetention) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectLockRetention) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.RetainUntilDate) {
		toSerialize["RetainUntilDate"] = o.RetainUntilDate
	}
	return toSerialize, nil
}

type NullableObjectLockRetention struct {
	value *ObjectLockRetention
	isSet bool
}

func (v NullableObjectLockRetention) Get() *ObjectLockRetention {
	return v.value
}

func (v *NullableObjectLockRetention) Set(val *ObjectLockRetention) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectLockRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectLockRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectLockRetention(val *ObjectLockRetention) *NullableObjectLockRetention {
	return &NullableObjectLockRetention{value: val, isSet: true}
}

func (v NullableObjectLockRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectLockRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


