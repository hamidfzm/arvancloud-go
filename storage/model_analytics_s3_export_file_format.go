/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// AnalyticsS3ExportFileFormat the model 'AnalyticsS3ExportFileFormat'
type AnalyticsS3ExportFileFormat string

// List of AnalyticsS3ExportFileFormat
const (
	ANALYTICSS3EXPORTFILEFORMAT_CSV AnalyticsS3ExportFileFormat = "CSV"
)

// All allowed values of AnalyticsS3ExportFileFormat enum
var AllowedAnalyticsS3ExportFileFormatEnumValues = []AnalyticsS3ExportFileFormat{
	"CSV",
}

func (v *AnalyticsS3ExportFileFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsS3ExportFileFormat(value)
	for _, existing := range AllowedAnalyticsS3ExportFileFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsS3ExportFileFormat", value)
}

// NewAnalyticsS3ExportFileFormatFromValue returns a pointer to a valid AnalyticsS3ExportFileFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsS3ExportFileFormatFromValue(v string) (*AnalyticsS3ExportFileFormat, error) {
	ev := AnalyticsS3ExportFileFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsS3ExportFileFormat: valid values are %v", v, AllowedAnalyticsS3ExportFileFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsS3ExportFileFormat) IsValid() bool {
	for _, existing := range AllowedAnalyticsS3ExportFileFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsS3ExportFileFormat value
func (v AnalyticsS3ExportFileFormat) Ptr() *AnalyticsS3ExportFileFormat {
	return &v
}

type NullableAnalyticsS3ExportFileFormat struct {
	value *AnalyticsS3ExportFileFormat
	isSet bool
}

func (v NullableAnalyticsS3ExportFileFormat) Get() *AnalyticsS3ExportFileFormat {
	return v.value
}

func (v *NullableAnalyticsS3ExportFileFormat) Set(val *AnalyticsS3ExportFileFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsS3ExportFileFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsS3ExportFileFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsS3ExportFileFormat(val *AnalyticsS3ExportFileFormat) *NullableAnalyticsS3ExportFileFormat {
	return &NullableAnalyticsS3ExportFileFormat{value: val, isSet: true}
}

func (v NullableAnalyticsS3ExportFileFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsS3ExportFileFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

