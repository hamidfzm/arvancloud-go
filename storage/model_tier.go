/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// Tier the model 'Tier'
type Tier string

// List of Tier
const (
	TIER_STANDARD Tier = "Standard"
	TIER_BULK Tier = "Bulk"
	TIER_EXPEDITED Tier = "Expedited"
)

// All allowed values of Tier enum
var AllowedTierEnumValues = []Tier{
	"Standard",
	"Bulk",
	"Expedited",
}

func (v *Tier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Tier(value)
	for _, existing := range AllowedTierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Tier", value)
}

// NewTierFromValue returns a pointer to a valid Tier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTierFromValue(v string) (*Tier, error) {
	ev := Tier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Tier: valid values are %v", v, AllowedTierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Tier) IsValid() bool {
	for _, existing := range AllowedTierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Tier value
func (v Tier) Ptr() *Tier {
	return &v
}

type NullableTier struct {
	value *Tier
	isSet bool
}

func (v NullableTier) Get() *Tier {
	return v.value
}

func (v *NullableTier) Set(val *Tier) {
	v.value = val
	v.isSet = true
}

func (v NullableTier) IsSet() bool {
	return v.isSet
}

func (v *NullableTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTier(val *Tier) *NullableTier {
	return &NullableTier{value: val, isSet: true}
}

func (v NullableTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

