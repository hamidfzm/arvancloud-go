/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ListObjectsOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListObjectsOutput{}

// ListObjectsOutput struct for ListObjectsOutput
type ListObjectsOutput struct {
	IsTruncated *bool `json:"IsTruncated,omitempty"`
	Marker *string `json:"Marker,omitempty"`
	NextMarker *string `json:"NextMarker,omitempty"`
	Contents *Array `json:"Contents,omitempty"`
	Name *string `json:"Name,omitempty"`
	Prefix *string `json:"Prefix,omitempty"`
	Delimiter *string `json:"Delimiter,omitempty"`
	MaxKeys *int32 `json:"MaxKeys,omitempty"`
	CommonPrefixes *Array `json:"CommonPrefixes,omitempty"`
	EncodingType *EncodingType `json:"EncodingType,omitempty"`
}

// NewListObjectsOutput instantiates a new ListObjectsOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListObjectsOutput() *ListObjectsOutput {
	this := ListObjectsOutput{}
	return &this
}

// NewListObjectsOutputWithDefaults instantiates a new ListObjectsOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListObjectsOutputWithDefaults() *ListObjectsOutput {
	this := ListObjectsOutput{}
	return &this
}

// GetIsTruncated returns the IsTruncated field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetIsTruncated() bool {
	if o == nil || IsNil(o.IsTruncated) {
		var ret bool
		return ret
	}
	return *o.IsTruncated
}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetIsTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTruncated) {
		return nil, false
	}
	return o.IsTruncated, true
}

// HasIsTruncated returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasIsTruncated() bool {
	if o != nil && !IsNil(o.IsTruncated) {
		return true
	}

	return false
}

// SetIsTruncated gets a reference to the given bool and assigns it to the IsTruncated field.
func (o *ListObjectsOutput) SetIsTruncated(v bool) {
	o.IsTruncated = &v
}

// GetMarker returns the Marker field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetMarker() string {
	if o == nil || IsNil(o.Marker) {
		var ret string
		return ret
	}
	return *o.Marker
}

// GetMarkerOk returns a tuple with the Marker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetMarkerOk() (*string, bool) {
	if o == nil || IsNil(o.Marker) {
		return nil, false
	}
	return o.Marker, true
}

// HasMarker returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasMarker() bool {
	if o != nil && !IsNil(o.Marker) {
		return true
	}

	return false
}

// SetMarker gets a reference to the given string and assigns it to the Marker field.
func (o *ListObjectsOutput) SetMarker(v string) {
	o.Marker = &v
}

// GetNextMarker returns the NextMarker field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetNextMarker() string {
	if o == nil || IsNil(o.NextMarker) {
		var ret string
		return ret
	}
	return *o.NextMarker
}

// GetNextMarkerOk returns a tuple with the NextMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetNextMarkerOk() (*string, bool) {
	if o == nil || IsNil(o.NextMarker) {
		return nil, false
	}
	return o.NextMarker, true
}

// HasNextMarker returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasNextMarker() bool {
	if o != nil && !IsNil(o.NextMarker) {
		return true
	}

	return false
}

// SetNextMarker gets a reference to the given string and assigns it to the NextMarker field.
func (o *ListObjectsOutput) SetNextMarker(v string) {
	o.NextMarker = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetContents() Array {
	if o == nil || IsNil(o.Contents) {
		var ret Array
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetContentsOk() (*Array, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given Array and assigns it to the Contents field.
func (o *ListObjectsOutput) SetContents(v Array) {
	o.Contents = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListObjectsOutput) SetName(v string) {
	o.Name = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ListObjectsOutput) SetPrefix(v string) {
	o.Prefix = &v
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *ListObjectsOutput) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetMaxKeys returns the MaxKeys field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetMaxKeys() int32 {
	if o == nil || IsNil(o.MaxKeys) {
		var ret int32
		return ret
	}
	return *o.MaxKeys
}

// GetMaxKeysOk returns a tuple with the MaxKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetMaxKeysOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxKeys) {
		return nil, false
	}
	return o.MaxKeys, true
}

// HasMaxKeys returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasMaxKeys() bool {
	if o != nil && !IsNil(o.MaxKeys) {
		return true
	}

	return false
}

// SetMaxKeys gets a reference to the given int32 and assigns it to the MaxKeys field.
func (o *ListObjectsOutput) SetMaxKeys(v int32) {
	o.MaxKeys = &v
}

// GetCommonPrefixes returns the CommonPrefixes field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetCommonPrefixes() Array {
	if o == nil || IsNil(o.CommonPrefixes) {
		var ret Array
		return ret
	}
	return *o.CommonPrefixes
}

// GetCommonPrefixesOk returns a tuple with the CommonPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetCommonPrefixesOk() (*Array, bool) {
	if o == nil || IsNil(o.CommonPrefixes) {
		return nil, false
	}
	return o.CommonPrefixes, true
}

// HasCommonPrefixes returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasCommonPrefixes() bool {
	if o != nil && !IsNil(o.CommonPrefixes) {
		return true
	}

	return false
}

// SetCommonPrefixes gets a reference to the given Array and assigns it to the CommonPrefixes field.
func (o *ListObjectsOutput) SetCommonPrefixes(v Array) {
	o.CommonPrefixes = &v
}

// GetEncodingType returns the EncodingType field value if set, zero value otherwise.
func (o *ListObjectsOutput) GetEncodingType() EncodingType {
	if o == nil || IsNil(o.EncodingType) {
		var ret EncodingType
		return ret
	}
	return *o.EncodingType
}

// GetEncodingTypeOk returns a tuple with the EncodingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectsOutput) GetEncodingTypeOk() (*EncodingType, bool) {
	if o == nil || IsNil(o.EncodingType) {
		return nil, false
	}
	return o.EncodingType, true
}

// HasEncodingType returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasEncodingType() bool {
	if o != nil && !IsNil(o.EncodingType) {
		return true
	}

	return false
}

// SetEncodingType gets a reference to the given EncodingType and assigns it to the EncodingType field.
func (o *ListObjectsOutput) SetEncodingType(v EncodingType) {
	o.EncodingType = &v
}

func (o ListObjectsOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListObjectsOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsTruncated) {
		toSerialize["IsTruncated"] = o.IsTruncated
	}
	if !IsNil(o.Marker) {
		toSerialize["Marker"] = o.Marker
	}
	if !IsNil(o.NextMarker) {
		toSerialize["NextMarker"] = o.NextMarker
	}
	if !IsNil(o.Contents) {
		toSerialize["Contents"] = o.Contents
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !IsNil(o.Delimiter) {
		toSerialize["Delimiter"] = o.Delimiter
	}
	if !IsNil(o.MaxKeys) {
		toSerialize["MaxKeys"] = o.MaxKeys
	}
	if !IsNil(o.CommonPrefixes) {
		toSerialize["CommonPrefixes"] = o.CommonPrefixes
	}
	if !IsNil(o.EncodingType) {
		toSerialize["EncodingType"] = o.EncodingType
	}
	return toSerialize, nil
}

type NullableListObjectsOutput struct {
	value *ListObjectsOutput
	isSet bool
}

func (v NullableListObjectsOutput) Get() *ListObjectsOutput {
	return v.value
}

func (v *NullableListObjectsOutput) Set(val *ListObjectsOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableListObjectsOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableListObjectsOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListObjectsOutput(val *ListObjectsOutput) *NullableListObjectsOutput {
	return &NullableListObjectsOutput{value: val, isSet: true}
}

func (v NullableListObjectsOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListObjectsOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


