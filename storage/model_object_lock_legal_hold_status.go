/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ObjectLockLegalHoldStatus the model 'ObjectLockLegalHoldStatus'
type ObjectLockLegalHoldStatus string

// List of ObjectLockLegalHoldStatus
const (
	OBJECTLOCKLEGALHOLDSTATUS_ON ObjectLockLegalHoldStatus = "ON"
	OBJECTLOCKLEGALHOLDSTATUS_OFF ObjectLockLegalHoldStatus = "OFF"
)

// All allowed values of ObjectLockLegalHoldStatus enum
var AllowedObjectLockLegalHoldStatusEnumValues = []ObjectLockLegalHoldStatus{
	"ON",
	"OFF",
}

func (v *ObjectLockLegalHoldStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectLockLegalHoldStatus(value)
	for _, existing := range AllowedObjectLockLegalHoldStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectLockLegalHoldStatus", value)
}

// NewObjectLockLegalHoldStatusFromValue returns a pointer to a valid ObjectLockLegalHoldStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectLockLegalHoldStatusFromValue(v string) (*ObjectLockLegalHoldStatus, error) {
	ev := ObjectLockLegalHoldStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectLockLegalHoldStatus: valid values are %v", v, AllowedObjectLockLegalHoldStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectLockLegalHoldStatus) IsValid() bool {
	for _, existing := range AllowedObjectLockLegalHoldStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectLockLegalHoldStatus value
func (v ObjectLockLegalHoldStatus) Ptr() *ObjectLockLegalHoldStatus {
	return &v
}

type NullableObjectLockLegalHoldStatus struct {
	value *ObjectLockLegalHoldStatus
	isSet bool
}

func (v NullableObjectLockLegalHoldStatus) Get() *ObjectLockLegalHoldStatus {
	return v.value
}

func (v *NullableObjectLockLegalHoldStatus) Set(val *ObjectLockLegalHoldStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectLockLegalHoldStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectLockLegalHoldStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectLockLegalHoldStatus(val *ObjectLockLegalHoldStatus) *NullableObjectLockLegalHoldStatus {
	return &NullableObjectLockLegalHoldStatus{value: val, isSet: true}
}

func (v NullableObjectLockLegalHoldStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectLockLegalHoldStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

