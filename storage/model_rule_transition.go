/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"time"
)

// checks if the RuleTransition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleTransition{}

// RuleTransition struct for RuleTransition
type RuleTransition struct {
	Date *time.Time `json:"Date,omitempty"`
	Days *int32 `json:"Days,omitempty"`
	StorageClass *TransitionStorageClass `json:"StorageClass,omitempty"`
}

// NewRuleTransition instantiates a new RuleTransition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleTransition() *RuleTransition {
	this := RuleTransition{}
	return &this
}

// NewRuleTransitionWithDefaults instantiates a new RuleTransition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleTransitionWithDefaults() *RuleTransition {
	this := RuleTransition{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *RuleTransition) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleTransition) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *RuleTransition) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *RuleTransition) SetDate(v time.Time) {
	o.Date = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *RuleTransition) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleTransition) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *RuleTransition) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *RuleTransition) SetDays(v int32) {
	o.Days = &v
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *RuleTransition) GetStorageClass() TransitionStorageClass {
	if o == nil || IsNil(o.StorageClass) {
		var ret TransitionStorageClass
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleTransition) GetStorageClassOk() (*TransitionStorageClass, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *RuleTransition) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given TransitionStorageClass and assigns it to the StorageClass field.
func (o *RuleTransition) SetStorageClass(v TransitionStorageClass) {
	o.StorageClass = &v
}

func (o RuleTransition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleTransition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.Days) {
		toSerialize["Days"] = o.Days
	}
	if !IsNil(o.StorageClass) {
		toSerialize["StorageClass"] = o.StorageClass
	}
	return toSerialize, nil
}

type NullableRuleTransition struct {
	value *RuleTransition
	isSet bool
}

func (v NullableRuleTransition) Get() *RuleTransition {
	return v.value
}

func (v *NullableRuleTransition) Set(val *RuleTransition) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleTransition(val *RuleTransition) *NullableRuleTransition {
	return &NullableRuleTransition{value: val, isSet: true}
}

func (v NullableRuleTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


