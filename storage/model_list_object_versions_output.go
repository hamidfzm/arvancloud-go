/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ListObjectVersionsOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListObjectVersionsOutput{}

// ListObjectVersionsOutput struct for ListObjectVersionsOutput
type ListObjectVersionsOutput struct {
	IsTruncated *bool `json:"IsTruncated,omitempty"`
	KeyMarker *string `json:"KeyMarker,omitempty"`
	VersionIdMarker *string `json:"VersionIdMarker,omitempty"`
	NextKeyMarker *string `json:"NextKeyMarker,omitempty"`
	NextVersionIdMarker *string `json:"NextVersionIdMarker,omitempty"`
	Versions *Array `json:"Versions,omitempty"`
	DeleteMarkers *Array `json:"DeleteMarkers,omitempty"`
	Name *string `json:"Name,omitempty"`
	Prefix *string `json:"Prefix,omitempty"`
	Delimiter *string `json:"Delimiter,omitempty"`
	MaxKeys *int32 `json:"MaxKeys,omitempty"`
	CommonPrefixes *Array `json:"CommonPrefixes,omitempty"`
	EncodingType *EncodingType `json:"EncodingType,omitempty"`
}

// NewListObjectVersionsOutput instantiates a new ListObjectVersionsOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListObjectVersionsOutput() *ListObjectVersionsOutput {
	this := ListObjectVersionsOutput{}
	return &this
}

// NewListObjectVersionsOutputWithDefaults instantiates a new ListObjectVersionsOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListObjectVersionsOutputWithDefaults() *ListObjectVersionsOutput {
	this := ListObjectVersionsOutput{}
	return &this
}

// GetIsTruncated returns the IsTruncated field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetIsTruncated() bool {
	if o == nil || IsNil(o.IsTruncated) {
		var ret bool
		return ret
	}
	return *o.IsTruncated
}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetIsTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTruncated) {
		return nil, false
	}
	return o.IsTruncated, true
}

// HasIsTruncated returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasIsTruncated() bool {
	if o != nil && !IsNil(o.IsTruncated) {
		return true
	}

	return false
}

// SetIsTruncated gets a reference to the given bool and assigns it to the IsTruncated field.
func (o *ListObjectVersionsOutput) SetIsTruncated(v bool) {
	o.IsTruncated = &v
}

// GetKeyMarker returns the KeyMarker field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetKeyMarker() string {
	if o == nil || IsNil(o.KeyMarker) {
		var ret string
		return ret
	}
	return *o.KeyMarker
}

// GetKeyMarkerOk returns a tuple with the KeyMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetKeyMarkerOk() (*string, bool) {
	if o == nil || IsNil(o.KeyMarker) {
		return nil, false
	}
	return o.KeyMarker, true
}

// HasKeyMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasKeyMarker() bool {
	if o != nil && !IsNil(o.KeyMarker) {
		return true
	}

	return false
}

// SetKeyMarker gets a reference to the given string and assigns it to the KeyMarker field.
func (o *ListObjectVersionsOutput) SetKeyMarker(v string) {
	o.KeyMarker = &v
}

// GetVersionIdMarker returns the VersionIdMarker field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetVersionIdMarker() string {
	if o == nil || IsNil(o.VersionIdMarker) {
		var ret string
		return ret
	}
	return *o.VersionIdMarker
}

// GetVersionIdMarkerOk returns a tuple with the VersionIdMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetVersionIdMarkerOk() (*string, bool) {
	if o == nil || IsNil(o.VersionIdMarker) {
		return nil, false
	}
	return o.VersionIdMarker, true
}

// HasVersionIdMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasVersionIdMarker() bool {
	if o != nil && !IsNil(o.VersionIdMarker) {
		return true
	}

	return false
}

// SetVersionIdMarker gets a reference to the given string and assigns it to the VersionIdMarker field.
func (o *ListObjectVersionsOutput) SetVersionIdMarker(v string) {
	o.VersionIdMarker = &v
}

// GetNextKeyMarker returns the NextKeyMarker field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetNextKeyMarker() string {
	if o == nil || IsNil(o.NextKeyMarker) {
		var ret string
		return ret
	}
	return *o.NextKeyMarker
}

// GetNextKeyMarkerOk returns a tuple with the NextKeyMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetNextKeyMarkerOk() (*string, bool) {
	if o == nil || IsNil(o.NextKeyMarker) {
		return nil, false
	}
	return o.NextKeyMarker, true
}

// HasNextKeyMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasNextKeyMarker() bool {
	if o != nil && !IsNil(o.NextKeyMarker) {
		return true
	}

	return false
}

// SetNextKeyMarker gets a reference to the given string and assigns it to the NextKeyMarker field.
func (o *ListObjectVersionsOutput) SetNextKeyMarker(v string) {
	o.NextKeyMarker = &v
}

// GetNextVersionIdMarker returns the NextVersionIdMarker field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetNextVersionIdMarker() string {
	if o == nil || IsNil(o.NextVersionIdMarker) {
		var ret string
		return ret
	}
	return *o.NextVersionIdMarker
}

// GetNextVersionIdMarkerOk returns a tuple with the NextVersionIdMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetNextVersionIdMarkerOk() (*string, bool) {
	if o == nil || IsNil(o.NextVersionIdMarker) {
		return nil, false
	}
	return o.NextVersionIdMarker, true
}

// HasNextVersionIdMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasNextVersionIdMarker() bool {
	if o != nil && !IsNil(o.NextVersionIdMarker) {
		return true
	}

	return false
}

// SetNextVersionIdMarker gets a reference to the given string and assigns it to the NextVersionIdMarker field.
func (o *ListObjectVersionsOutput) SetNextVersionIdMarker(v string) {
	o.NextVersionIdMarker = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetVersions() Array {
	if o == nil || IsNil(o.Versions) {
		var ret Array
		return ret
	}
	return *o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetVersionsOk() (*Array, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given Array and assigns it to the Versions field.
func (o *ListObjectVersionsOutput) SetVersions(v Array) {
	o.Versions = &v
}

// GetDeleteMarkers returns the DeleteMarkers field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetDeleteMarkers() Array {
	if o == nil || IsNil(o.DeleteMarkers) {
		var ret Array
		return ret
	}
	return *o.DeleteMarkers
}

// GetDeleteMarkersOk returns a tuple with the DeleteMarkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetDeleteMarkersOk() (*Array, bool) {
	if o == nil || IsNil(o.DeleteMarkers) {
		return nil, false
	}
	return o.DeleteMarkers, true
}

// HasDeleteMarkers returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasDeleteMarkers() bool {
	if o != nil && !IsNil(o.DeleteMarkers) {
		return true
	}

	return false
}

// SetDeleteMarkers gets a reference to the given Array and assigns it to the DeleteMarkers field.
func (o *ListObjectVersionsOutput) SetDeleteMarkers(v Array) {
	o.DeleteMarkers = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListObjectVersionsOutput) SetName(v string) {
	o.Name = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ListObjectVersionsOutput) SetPrefix(v string) {
	o.Prefix = &v
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *ListObjectVersionsOutput) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetMaxKeys returns the MaxKeys field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetMaxKeys() int32 {
	if o == nil || IsNil(o.MaxKeys) {
		var ret int32
		return ret
	}
	return *o.MaxKeys
}

// GetMaxKeysOk returns a tuple with the MaxKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetMaxKeysOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxKeys) {
		return nil, false
	}
	return o.MaxKeys, true
}

// HasMaxKeys returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasMaxKeys() bool {
	if o != nil && !IsNil(o.MaxKeys) {
		return true
	}

	return false
}

// SetMaxKeys gets a reference to the given int32 and assigns it to the MaxKeys field.
func (o *ListObjectVersionsOutput) SetMaxKeys(v int32) {
	o.MaxKeys = &v
}

// GetCommonPrefixes returns the CommonPrefixes field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetCommonPrefixes() Array {
	if o == nil || IsNil(o.CommonPrefixes) {
		var ret Array
		return ret
	}
	return *o.CommonPrefixes
}

// GetCommonPrefixesOk returns a tuple with the CommonPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetCommonPrefixesOk() (*Array, bool) {
	if o == nil || IsNil(o.CommonPrefixes) {
		return nil, false
	}
	return o.CommonPrefixes, true
}

// HasCommonPrefixes returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasCommonPrefixes() bool {
	if o != nil && !IsNil(o.CommonPrefixes) {
		return true
	}

	return false
}

// SetCommonPrefixes gets a reference to the given Array and assigns it to the CommonPrefixes field.
func (o *ListObjectVersionsOutput) SetCommonPrefixes(v Array) {
	o.CommonPrefixes = &v
}

// GetEncodingType returns the EncodingType field value if set, zero value otherwise.
func (o *ListObjectVersionsOutput) GetEncodingType() EncodingType {
	if o == nil || IsNil(o.EncodingType) {
		var ret EncodingType
		return ret
	}
	return *o.EncodingType
}

// GetEncodingTypeOk returns a tuple with the EncodingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObjectVersionsOutput) GetEncodingTypeOk() (*EncodingType, bool) {
	if o == nil || IsNil(o.EncodingType) {
		return nil, false
	}
	return o.EncodingType, true
}

// HasEncodingType returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasEncodingType() bool {
	if o != nil && !IsNil(o.EncodingType) {
		return true
	}

	return false
}

// SetEncodingType gets a reference to the given EncodingType and assigns it to the EncodingType field.
func (o *ListObjectVersionsOutput) SetEncodingType(v EncodingType) {
	o.EncodingType = &v
}

func (o ListObjectVersionsOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListObjectVersionsOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsTruncated) {
		toSerialize["IsTruncated"] = o.IsTruncated
	}
	if !IsNil(o.KeyMarker) {
		toSerialize["KeyMarker"] = o.KeyMarker
	}
	if !IsNil(o.VersionIdMarker) {
		toSerialize["VersionIdMarker"] = o.VersionIdMarker
	}
	if !IsNil(o.NextKeyMarker) {
		toSerialize["NextKeyMarker"] = o.NextKeyMarker
	}
	if !IsNil(o.NextVersionIdMarker) {
		toSerialize["NextVersionIdMarker"] = o.NextVersionIdMarker
	}
	if !IsNil(o.Versions) {
		toSerialize["Versions"] = o.Versions
	}
	if !IsNil(o.DeleteMarkers) {
		toSerialize["DeleteMarkers"] = o.DeleteMarkers
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !IsNil(o.Delimiter) {
		toSerialize["Delimiter"] = o.Delimiter
	}
	if !IsNil(o.MaxKeys) {
		toSerialize["MaxKeys"] = o.MaxKeys
	}
	if !IsNil(o.CommonPrefixes) {
		toSerialize["CommonPrefixes"] = o.CommonPrefixes
	}
	if !IsNil(o.EncodingType) {
		toSerialize["EncodingType"] = o.EncodingType
	}
	return toSerialize, nil
}

type NullableListObjectVersionsOutput struct {
	value *ListObjectVersionsOutput
	isSet bool
}

func (v NullableListObjectVersionsOutput) Get() *ListObjectVersionsOutput {
	return v.value
}

func (v *NullableListObjectVersionsOutput) Set(val *ListObjectVersionsOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableListObjectVersionsOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableListObjectVersionsOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListObjectVersionsOutput(val *ListObjectVersionsOutput) *NullableListObjectVersionsOutput {
	return &NullableListObjectVersionsOutput{value: val, isSet: true}
}

func (v NullableListObjectVersionsOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListObjectVersionsOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


