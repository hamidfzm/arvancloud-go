/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ObjectStorageClass the model 'ObjectStorageClass'
type ObjectStorageClass string

// List of ObjectStorageClass
const (
	OBJECTSTORAGECLASS_STANDARD ObjectStorageClass = "STANDARD"
	OBJECTSTORAGECLASS_REDUCED_REDUNDANCY ObjectStorageClass = "REDUCED_REDUNDANCY"
	OBJECTSTORAGECLASS_GLACIER ObjectStorageClass = "GLACIER"
	OBJECTSTORAGECLASS_STANDARD_IA ObjectStorageClass = "STANDARD_IA"
	OBJECTSTORAGECLASS_ONEZONE_IA ObjectStorageClass = "ONEZONE_IA"
	OBJECTSTORAGECLASS_INTELLIGENT_TIERING ObjectStorageClass = "INTELLIGENT_TIERING"
	OBJECTSTORAGECLASS_DEEP_ARCHIVE ObjectStorageClass = "DEEP_ARCHIVE"
)

// All allowed values of ObjectStorageClass enum
var AllowedObjectStorageClassEnumValues = []ObjectStorageClass{
	"STANDARD",
	"REDUCED_REDUNDANCY",
	"GLACIER",
	"STANDARD_IA",
	"ONEZONE_IA",
	"INTELLIGENT_TIERING",
	"DEEP_ARCHIVE",
}

func (v *ObjectStorageClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectStorageClass(value)
	for _, existing := range AllowedObjectStorageClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectStorageClass", value)
}

// NewObjectStorageClassFromValue returns a pointer to a valid ObjectStorageClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectStorageClassFromValue(v string) (*ObjectStorageClass, error) {
	ev := ObjectStorageClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectStorageClass: valid values are %v", v, AllowedObjectStorageClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectStorageClass) IsValid() bool {
	for _, existing := range AllowedObjectStorageClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectStorageClass value
func (v ObjectStorageClass) Ptr() *ObjectStorageClass {
	return &v
}

type NullableObjectStorageClass struct {
	value *ObjectStorageClass
	isSet bool
}

func (v NullableObjectStorageClass) Get() *ObjectStorageClass {
	return v.value
}

func (v *NullableObjectStorageClass) Set(val *ObjectStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageClass(val *ObjectStorageClass) *NullableObjectStorageClass {
	return &NullableObjectStorageClass{value: val, isSet: true}
}

func (v NullableObjectStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

