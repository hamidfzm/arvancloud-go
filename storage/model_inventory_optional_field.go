/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// InventoryOptionalField the model 'InventoryOptionalField'
type InventoryOptionalField string

// List of InventoryOptionalField
const (
	INVENTORYOPTIONALFIELD_SIZE InventoryOptionalField = "Size"
	INVENTORYOPTIONALFIELD_LAST_MODIFIED_DATE InventoryOptionalField = "LastModifiedDate"
	INVENTORYOPTIONALFIELD_STORAGE_CLASS InventoryOptionalField = "StorageClass"
	INVENTORYOPTIONALFIELD_E_TAG InventoryOptionalField = "ETag"
	INVENTORYOPTIONALFIELD_IS_MULTIPART_UPLOADED InventoryOptionalField = "IsMultipartUploaded"
	INVENTORYOPTIONALFIELD_REPLICATION_STATUS InventoryOptionalField = "ReplicationStatus"
	INVENTORYOPTIONALFIELD_ENCRYPTION_STATUS InventoryOptionalField = "EncryptionStatus"
	INVENTORYOPTIONALFIELD_OBJECT_LOCK_RETAIN_UNTIL_DATE InventoryOptionalField = "ObjectLockRetainUntilDate"
	INVENTORYOPTIONALFIELD_OBJECT_LOCK_MODE InventoryOptionalField = "ObjectLockMode"
	INVENTORYOPTIONALFIELD_OBJECT_LOCK_LEGAL_HOLD_STATUS InventoryOptionalField = "ObjectLockLegalHoldStatus"
	INVENTORYOPTIONALFIELD_INTELLIGENT_TIERING_ACCESS_TIER InventoryOptionalField = "IntelligentTieringAccessTier"
	INVENTORYOPTIONALFIELD_BUCKET_KEY_STATUS InventoryOptionalField = "BucketKeyStatus"
)

// All allowed values of InventoryOptionalField enum
var AllowedInventoryOptionalFieldEnumValues = []InventoryOptionalField{
	"Size",
	"LastModifiedDate",
	"StorageClass",
	"ETag",
	"IsMultipartUploaded",
	"ReplicationStatus",
	"EncryptionStatus",
	"ObjectLockRetainUntilDate",
	"ObjectLockMode",
	"ObjectLockLegalHoldStatus",
	"IntelligentTieringAccessTier",
	"BucketKeyStatus",
}

func (v *InventoryOptionalField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InventoryOptionalField(value)
	for _, existing := range AllowedInventoryOptionalFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InventoryOptionalField", value)
}

// NewInventoryOptionalFieldFromValue returns a pointer to a valid InventoryOptionalField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInventoryOptionalFieldFromValue(v string) (*InventoryOptionalField, error) {
	ev := InventoryOptionalField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InventoryOptionalField: valid values are %v", v, AllowedInventoryOptionalFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InventoryOptionalField) IsValid() bool {
	for _, existing := range AllowedInventoryOptionalFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InventoryOptionalField value
func (v InventoryOptionalField) Ptr() *InventoryOptionalField {
	return &v
}

type NullableInventoryOptionalField struct {
	value *InventoryOptionalField
	isSet bool
}

func (v NullableInventoryOptionalField) Get() *InventoryOptionalField {
	return v.value
}

func (v *NullableInventoryOptionalField) Set(val *InventoryOptionalField) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryOptionalField) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryOptionalField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryOptionalField(val *InventoryOptionalField) *NullableInventoryOptionalField {
	return &NullableInventoryOptionalField{value: val, isSet: true}
}

func (v NullableInventoryOptionalField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryOptionalField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

