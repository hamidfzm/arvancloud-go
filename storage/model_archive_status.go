/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ArchiveStatus the model 'ArchiveStatus'
type ArchiveStatus string

// List of ArchiveStatus
const (
	ARCHIVESTATUS_ARCHIVE_ACCESS ArchiveStatus = "ARCHIVE_ACCESS"
	ARCHIVESTATUS_DEEP_ARCHIVE_ACCESS ArchiveStatus = "DEEP_ARCHIVE_ACCESS"
)

// All allowed values of ArchiveStatus enum
var AllowedArchiveStatusEnumValues = []ArchiveStatus{
	"ARCHIVE_ACCESS",
	"DEEP_ARCHIVE_ACCESS",
}

func (v *ArchiveStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ArchiveStatus(value)
	for _, existing := range AllowedArchiveStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ArchiveStatus", value)
}

// NewArchiveStatusFromValue returns a pointer to a valid ArchiveStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewArchiveStatusFromValue(v string) (*ArchiveStatus, error) {
	ev := ArchiveStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ArchiveStatus: valid values are %v", v, AllowedArchiveStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ArchiveStatus) IsValid() bool {
	for _, existing := range AllowedArchiveStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ArchiveStatus value
func (v ArchiveStatus) Ptr() *ArchiveStatus {
	return &v
}

type NullableArchiveStatus struct {
	value *ArchiveStatus
	isSet bool
}

func (v NullableArchiveStatus) Get() *ArchiveStatus {
	return v.value
}

func (v *NullableArchiveStatus) Set(val *ArchiveStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveStatus(val *ArchiveStatus) *NullableArchiveStatus {
	return &NullableArchiveStatus{value: val, isSet: true}
}

func (v NullableArchiveStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

