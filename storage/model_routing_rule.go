/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the RoutingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingRule{}

// RoutingRule Specifies the redirect behavior and when a redirect is applied.
type RoutingRule struct {
	Condition *RoutingRuleCondition `json:"Condition,omitempty"`
	Redirect RoutingRuleRedirect `json:"Redirect"`
}

// NewRoutingRule instantiates a new RoutingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingRule(redirect RoutingRuleRedirect) *RoutingRule {
	this := RoutingRule{}
	this.Redirect = redirect
	return &this
}

// NewRoutingRuleWithDefaults instantiates a new RoutingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingRuleWithDefaults() *RoutingRule {
	this := RoutingRule{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *RoutingRule) GetCondition() RoutingRuleCondition {
	if o == nil || IsNil(o.Condition) {
		var ret RoutingRuleCondition
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetConditionOk() (*RoutingRuleCondition, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *RoutingRule) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given RoutingRuleCondition and assigns it to the Condition field.
func (o *RoutingRule) SetCondition(v RoutingRuleCondition) {
	o.Condition = &v
}

// GetRedirect returns the Redirect field value
func (o *RoutingRule) GetRedirect() RoutingRuleRedirect {
	if o == nil {
		var ret RoutingRuleRedirect
		return ret
	}

	return o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetRedirectOk() (*RoutingRuleRedirect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Redirect, true
}

// SetRedirect sets field value
func (o *RoutingRule) SetRedirect(v RoutingRuleRedirect) {
	o.Redirect = v
}

func (o RoutingRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Condition) {
		toSerialize["Condition"] = o.Condition
	}
	toSerialize["Redirect"] = o.Redirect
	return toSerialize, nil
}

type NullableRoutingRule struct {
	value *RoutingRule
	isSet bool
}

func (v NullableRoutingRule) Get() *RoutingRule {
	return v.value
}

func (v *NullableRoutingRule) Set(val *RoutingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRule(val *RoutingRule) *NullableRoutingRule {
	return &NullableRoutingRule{value: val, isSet: true}
}

func (v NullableRoutingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


