/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the CreateMultipartUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMultipartUploadRequest{}

// CreateMultipartUploadRequest struct for CreateMultipartUploadRequest
type CreateMultipartUploadRequest struct {
	// A map of metadata to store with the object in S3.
	XAmzMeta *map[string]string `json:"x-amz-meta-,omitempty"`
}

// NewCreateMultipartUploadRequest instantiates a new CreateMultipartUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMultipartUploadRequest() *CreateMultipartUploadRequest {
	this := CreateMultipartUploadRequest{}
	return &this
}

// NewCreateMultipartUploadRequestWithDefaults instantiates a new CreateMultipartUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMultipartUploadRequestWithDefaults() *CreateMultipartUploadRequest {
	this := CreateMultipartUploadRequest{}
	return &this
}

// GetXAmzMeta returns the XAmzMeta field value if set, zero value otherwise.
func (o *CreateMultipartUploadRequest) GetXAmzMeta() map[string]string {
	if o == nil || IsNil(o.XAmzMeta) {
		var ret map[string]string
		return ret
	}
	return *o.XAmzMeta
}

// GetXAmzMetaOk returns a tuple with the XAmzMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMultipartUploadRequest) GetXAmzMetaOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.XAmzMeta) {
		return nil, false
	}
	return o.XAmzMeta, true
}

// HasXAmzMeta returns a boolean if a field has been set.
func (o *CreateMultipartUploadRequest) HasXAmzMeta() bool {
	if o != nil && !IsNil(o.XAmzMeta) {
		return true
	}

	return false
}

// SetXAmzMeta gets a reference to the given map[string]string and assigns it to the XAmzMeta field.
func (o *CreateMultipartUploadRequest) SetXAmzMeta(v map[string]string) {
	o.XAmzMeta = &v
}

func (o CreateMultipartUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMultipartUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.XAmzMeta) {
		toSerialize["x-amz-meta-"] = o.XAmzMeta
	}
	return toSerialize, nil
}

type NullableCreateMultipartUploadRequest struct {
	value *CreateMultipartUploadRequest
	isSet bool
}

func (v NullableCreateMultipartUploadRequest) Get() *CreateMultipartUploadRequest {
	return v.value
}

func (v *NullableCreateMultipartUploadRequest) Set(val *CreateMultipartUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMultipartUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMultipartUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMultipartUploadRequest(val *CreateMultipartUploadRequest) *NullableCreateMultipartUploadRequest {
	return &NullableCreateMultipartUploadRequest{value: val, isSet: true}
}

func (v NullableCreateMultipartUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMultipartUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


