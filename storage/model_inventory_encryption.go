/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the InventoryEncryption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryEncryption{}

// InventoryEncryption Contains the type of server-side encryption used to encrypt the inventory results.
type InventoryEncryption struct {
	SSES3 *interface{} `json:"SSES3,omitempty"`
	SSEKMS *InventoryEncryptionSSEKMS `json:"SSEKMS,omitempty"`
}

// NewInventoryEncryption instantiates a new InventoryEncryption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryEncryption() *InventoryEncryption {
	this := InventoryEncryption{}
	return &this
}

// NewInventoryEncryptionWithDefaults instantiates a new InventoryEncryption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryEncryptionWithDefaults() *InventoryEncryption {
	this := InventoryEncryption{}
	return &this
}

// GetSSES3 returns the SSES3 field value if set, zero value otherwise.
func (o *InventoryEncryption) GetSSES3() interface{} {
	if o == nil || IsNil(o.SSES3) {
		var ret interface{}
		return ret
	}
	return *o.SSES3
}

// GetSSES3Ok returns a tuple with the SSES3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryEncryption) GetSSES3Ok() (*interface{}, bool) {
	if o == nil || IsNil(o.SSES3) {
		return nil, false
	}
	return o.SSES3, true
}

// HasSSES3 returns a boolean if a field has been set.
func (o *InventoryEncryption) HasSSES3() bool {
	if o != nil && !IsNil(o.SSES3) {
		return true
	}

	return false
}

// SetSSES3 gets a reference to the given interface{} and assigns it to the SSES3 field.
func (o *InventoryEncryption) SetSSES3(v interface{}) {
	o.SSES3 = &v
}

// GetSSEKMS returns the SSEKMS field value if set, zero value otherwise.
func (o *InventoryEncryption) GetSSEKMS() InventoryEncryptionSSEKMS {
	if o == nil || IsNil(o.SSEKMS) {
		var ret InventoryEncryptionSSEKMS
		return ret
	}
	return *o.SSEKMS
}

// GetSSEKMSOk returns a tuple with the SSEKMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryEncryption) GetSSEKMSOk() (*InventoryEncryptionSSEKMS, bool) {
	if o == nil || IsNil(o.SSEKMS) {
		return nil, false
	}
	return o.SSEKMS, true
}

// HasSSEKMS returns a boolean if a field has been set.
func (o *InventoryEncryption) HasSSEKMS() bool {
	if o != nil && !IsNil(o.SSEKMS) {
		return true
	}

	return false
}

// SetSSEKMS gets a reference to the given InventoryEncryptionSSEKMS and assigns it to the SSEKMS field.
func (o *InventoryEncryption) SetSSEKMS(v InventoryEncryptionSSEKMS) {
	o.SSEKMS = &v
}

func (o InventoryEncryption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryEncryption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SSES3) {
		toSerialize["SSES3"] = o.SSES3
	}
	if !IsNil(o.SSEKMS) {
		toSerialize["SSEKMS"] = o.SSEKMS
	}
	return toSerialize, nil
}

type NullableInventoryEncryption struct {
	value *InventoryEncryption
	isSet bool
}

func (v NullableInventoryEncryption) Get() *InventoryEncryption {
	return v.value
}

func (v *NullableInventoryEncryption) Set(val *InventoryEncryption) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryEncryption(val *InventoryEncryption) *NullableInventoryEncryption {
	return &NullableInventoryEncryption{value: val, isSet: true}
}

func (v NullableInventoryEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


