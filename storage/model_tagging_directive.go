/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// TaggingDirective the model 'TaggingDirective'
type TaggingDirective string

// List of TaggingDirective
const (
	TAGGINGDIRECTIVE_COPY TaggingDirective = "COPY"
	TAGGINGDIRECTIVE_REPLACE TaggingDirective = "REPLACE"
)

// All allowed values of TaggingDirective enum
var AllowedTaggingDirectiveEnumValues = []TaggingDirective{
	"COPY",
	"REPLACE",
}

func (v *TaggingDirective) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaggingDirective(value)
	for _, existing := range AllowedTaggingDirectiveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaggingDirective", value)
}

// NewTaggingDirectiveFromValue returns a pointer to a valid TaggingDirective
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaggingDirectiveFromValue(v string) (*TaggingDirective, error) {
	ev := TaggingDirective(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaggingDirective: valid values are %v", v, AllowedTaggingDirectiveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaggingDirective) IsValid() bool {
	for _, existing := range AllowedTaggingDirectiveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaggingDirective value
func (v TaggingDirective) Ptr() *TaggingDirective {
	return &v
}

type NullableTaggingDirective struct {
	value *TaggingDirective
	isSet bool
}

func (v NullableTaggingDirective) Get() *TaggingDirective {
	return v.value
}

func (v *NullableTaggingDirective) Set(val *TaggingDirective) {
	v.value = val
	v.isSet = true
}

func (v NullableTaggingDirective) IsSet() bool {
	return v.isSet
}

func (v *NullableTaggingDirective) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaggingDirective(val *TaggingDirective) *NullableTaggingDirective {
	return &NullableTaggingDirective{value: val, isSet: true}
}

func (v NullableTaggingDirective) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaggingDirective) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

