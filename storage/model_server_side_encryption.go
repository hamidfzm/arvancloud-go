/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ServerSideEncryption the model 'ServerSideEncryption'
type ServerSideEncryption string

// List of ServerSideEncryption
const (
	SERVERSIDEENCRYPTION_AES256 ServerSideEncryption = "AES256"
	SERVERSIDEENCRYPTION_AWSKMS ServerSideEncryption = "aws:kms"
)

// All allowed values of ServerSideEncryption enum
var AllowedServerSideEncryptionEnumValues = []ServerSideEncryption{
	"AES256",
	"aws:kms",
}

func (v *ServerSideEncryption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerSideEncryption(value)
	for _, existing := range AllowedServerSideEncryptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerSideEncryption", value)
}

// NewServerSideEncryptionFromValue returns a pointer to a valid ServerSideEncryption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerSideEncryptionFromValue(v string) (*ServerSideEncryption, error) {
	ev := ServerSideEncryption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerSideEncryption: valid values are %v", v, AllowedServerSideEncryptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerSideEncryption) IsValid() bool {
	for _, existing := range AllowedServerSideEncryptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerSideEncryption value
func (v ServerSideEncryption) Ptr() *ServerSideEncryption {
	return &v
}

type NullableServerSideEncryption struct {
	value *ServerSideEncryption
	isSet bool
}

func (v NullableServerSideEncryption) Get() *ServerSideEncryption {
	return v.value
}

func (v *NullableServerSideEncryption) Set(val *ServerSideEncryption) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSideEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSideEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSideEncryption(val *ServerSideEncryption) *NullableServerSideEncryption {
	return &NullableServerSideEncryption{value: val, isSet: true}
}

func (v NullableServerSideEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSideEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

