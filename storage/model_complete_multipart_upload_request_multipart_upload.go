/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the CompleteMultipartUploadRequestMultipartUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteMultipartUploadRequestMultipartUpload{}

// CompleteMultipartUploadRequestMultipartUpload struct for CompleteMultipartUploadRequestMultipartUpload
type CompleteMultipartUploadRequestMultipartUpload struct {
	Parts *Array `json:"Parts,omitempty"`
}

// NewCompleteMultipartUploadRequestMultipartUpload instantiates a new CompleteMultipartUploadRequestMultipartUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteMultipartUploadRequestMultipartUpload() *CompleteMultipartUploadRequestMultipartUpload {
	this := CompleteMultipartUploadRequestMultipartUpload{}
	return &this
}

// NewCompleteMultipartUploadRequestMultipartUploadWithDefaults instantiates a new CompleteMultipartUploadRequestMultipartUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteMultipartUploadRequestMultipartUploadWithDefaults() *CompleteMultipartUploadRequestMultipartUpload {
	this := CompleteMultipartUploadRequestMultipartUpload{}
	return &this
}

// GetParts returns the Parts field value if set, zero value otherwise.
func (o *CompleteMultipartUploadRequestMultipartUpload) GetParts() Array {
	if o == nil || IsNil(o.Parts) {
		var ret Array
		return ret
	}
	return *o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteMultipartUploadRequestMultipartUpload) GetPartsOk() (*Array, bool) {
	if o == nil || IsNil(o.Parts) {
		return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *CompleteMultipartUploadRequestMultipartUpload) HasParts() bool {
	if o != nil && !IsNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given Array and assigns it to the Parts field.
func (o *CompleteMultipartUploadRequestMultipartUpload) SetParts(v Array) {
	o.Parts = &v
}

func (o CompleteMultipartUploadRequestMultipartUpload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteMultipartUploadRequestMultipartUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parts) {
		toSerialize["Parts"] = o.Parts
	}
	return toSerialize, nil
}

type NullableCompleteMultipartUploadRequestMultipartUpload struct {
	value *CompleteMultipartUploadRequestMultipartUpload
	isSet bool
}

func (v NullableCompleteMultipartUploadRequestMultipartUpload) Get() *CompleteMultipartUploadRequestMultipartUpload {
	return v.value
}

func (v *NullableCompleteMultipartUploadRequestMultipartUpload) Set(val *CompleteMultipartUploadRequestMultipartUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteMultipartUploadRequestMultipartUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteMultipartUploadRequestMultipartUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteMultipartUploadRequestMultipartUpload(val *CompleteMultipartUploadRequestMultipartUpload) *NullableCompleteMultipartUploadRequestMultipartUpload {
	return &NullableCompleteMultipartUploadRequestMultipartUpload{value: val, isSet: true}
}

func (v NullableCompleteMultipartUploadRequestMultipartUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteMultipartUploadRequestMultipartUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


