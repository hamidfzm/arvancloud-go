/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// EncodingType Requests ArvanCloud S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that ArvanCloud S3 encode the keys in the response.
type EncodingType string

// List of EncodingType
const (
	ENCODINGTYPE_URL EncodingType = "url"
)

// All allowed values of EncodingType enum
var AllowedEncodingTypeEnumValues = []EncodingType{
	"url",
}

func (v *EncodingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EncodingType(value)
	for _, existing := range AllowedEncodingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EncodingType", value)
}

// NewEncodingTypeFromValue returns a pointer to a valid EncodingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncodingTypeFromValue(v string) (*EncodingType, error) {
	ev := EncodingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EncodingType: valid values are %v", v, AllowedEncodingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncodingType) IsValid() bool {
	for _, existing := range AllowedEncodingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncodingType value
func (v EncodingType) Ptr() *EncodingType {
	return &v
}

type NullableEncodingType struct {
	value *EncodingType
	isSet bool
}

func (v NullableEncodingType) Get() *EncodingType {
	return v.value
}

func (v *NullableEncodingType) Set(val *EncodingType) {
	v.value = val
	v.isSet = true
}

func (v NullableEncodingType) IsSet() bool {
	return v.isSet
}

func (v *NullableEncodingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncodingType(val *EncodingType) *NullableEncodingType {
	return &NullableEncodingType{value: val, isSet: true}
}

func (v NullableEncodingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncodingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

