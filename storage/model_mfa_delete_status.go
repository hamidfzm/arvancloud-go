/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// MFADeleteStatus the model 'MFADeleteStatus'
type MFADeleteStatus string

// List of MFADeleteStatus
const (
	MFADELETESTATUS_ENABLED MFADeleteStatus = "Enabled"
	MFADELETESTATUS_DISABLED MFADeleteStatus = "Disabled"
)

// All allowed values of MFADeleteStatus enum
var AllowedMFADeleteStatusEnumValues = []MFADeleteStatus{
	"Enabled",
	"Disabled",
}

func (v *MFADeleteStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MFADeleteStatus(value)
	for _, existing := range AllowedMFADeleteStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MFADeleteStatus", value)
}

// NewMFADeleteStatusFromValue returns a pointer to a valid MFADeleteStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMFADeleteStatusFromValue(v string) (*MFADeleteStatus, error) {
	ev := MFADeleteStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MFADeleteStatus: valid values are %v", v, AllowedMFADeleteStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MFADeleteStatus) IsValid() bool {
	for _, existing := range AllowedMFADeleteStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MFADeleteStatus value
func (v MFADeleteStatus) Ptr() *MFADeleteStatus {
	return &v
}

type NullableMFADeleteStatus struct {
	value *MFADeleteStatus
	isSet bool
}

func (v NullableMFADeleteStatus) Get() *MFADeleteStatus {
	return v.value
}

func (v *NullableMFADeleteStatus) Set(val *MFADeleteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMFADeleteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMFADeleteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFADeleteStatus(val *MFADeleteStatus) *NullableMFADeleteStatus {
	return &NullableMFADeleteStatus{value: val, isSet: true}
}

func (v NullableMFADeleteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFADeleteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

