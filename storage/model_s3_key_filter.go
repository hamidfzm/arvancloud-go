/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the S3KeyFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3KeyFilter{}

// S3KeyFilter A container for object key name prefix and suffix filtering rules.
type S3KeyFilter struct {
	FilterRules *Array `json:"FilterRules,omitempty"`
}

// NewS3KeyFilter instantiates a new S3KeyFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3KeyFilter() *S3KeyFilter {
	this := S3KeyFilter{}
	return &this
}

// NewS3KeyFilterWithDefaults instantiates a new S3KeyFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3KeyFilterWithDefaults() *S3KeyFilter {
	this := S3KeyFilter{}
	return &this
}

// GetFilterRules returns the FilterRules field value if set, zero value otherwise.
func (o *S3KeyFilter) GetFilterRules() Array {
	if o == nil || IsNil(o.FilterRules) {
		var ret Array
		return ret
	}
	return *o.FilterRules
}

// GetFilterRulesOk returns a tuple with the FilterRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3KeyFilter) GetFilterRulesOk() (*Array, bool) {
	if o == nil || IsNil(o.FilterRules) {
		return nil, false
	}
	return o.FilterRules, true
}

// HasFilterRules returns a boolean if a field has been set.
func (o *S3KeyFilter) HasFilterRules() bool {
	if o != nil && !IsNil(o.FilterRules) {
		return true
	}

	return false
}

// SetFilterRules gets a reference to the given Array and assigns it to the FilterRules field.
func (o *S3KeyFilter) SetFilterRules(v Array) {
	o.FilterRules = &v
}

func (o S3KeyFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3KeyFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterRules) {
		toSerialize["FilterRules"] = o.FilterRules
	}
	return toSerialize, nil
}

type NullableS3KeyFilter struct {
	value *S3KeyFilter
	isSet bool
}

func (v NullableS3KeyFilter) Get() *S3KeyFilter {
	return v.value
}

func (v *NullableS3KeyFilter) Set(val *S3KeyFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableS3KeyFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableS3KeyFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3KeyFilter(val *S3KeyFilter) *NullableS3KeyFilter {
	return &NullableS3KeyFilter{value: val, isSet: true}
}

func (v NullableS3KeyFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3KeyFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


