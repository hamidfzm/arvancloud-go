/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// CompressionType the model 'CompressionType'
type CompressionType string

// List of CompressionType
const (
	COMPRESSIONTYPE_NONE CompressionType = "NONE"
	COMPRESSIONTYPE_GZIP CompressionType = "GZIP"
	COMPRESSIONTYPE_BZIP2 CompressionType = "BZIP2"
)

// All allowed values of CompressionType enum
var AllowedCompressionTypeEnumValues = []CompressionType{
	"NONE",
	"GZIP",
	"BZIP2",
}

func (v *CompressionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompressionType(value)
	for _, existing := range AllowedCompressionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompressionType", value)
}

// NewCompressionTypeFromValue returns a pointer to a valid CompressionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompressionTypeFromValue(v string) (*CompressionType, error) {
	ev := CompressionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompressionType: valid values are %v", v, AllowedCompressionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompressionType) IsValid() bool {
	for _, existing := range AllowedCompressionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompressionType value
func (v CompressionType) Ptr() *CompressionType {
	return &v
}

type NullableCompressionType struct {
	value *CompressionType
	isSet bool
}

func (v NullableCompressionType) Get() *CompressionType {
	return v.value
}

func (v *NullableCompressionType) Set(val *CompressionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompressionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompressionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompressionType(val *CompressionType) *NullableCompressionType {
	return &NullableCompressionType{value: val, isSet: true}
}

func (v NullableCompressionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompressionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

