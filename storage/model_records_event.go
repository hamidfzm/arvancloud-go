/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the RecordsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordsEvent{}

// RecordsEvent The container for the records event.
type RecordsEvent struct {
	Payload *string `json:"Payload,omitempty"`
}

// NewRecordsEvent instantiates a new RecordsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordsEvent() *RecordsEvent {
	this := RecordsEvent{}
	return &this
}

// NewRecordsEventWithDefaults instantiates a new RecordsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordsEventWithDefaults() *RecordsEvent {
	this := RecordsEvent{}
	return &this
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *RecordsEvent) GetPayload() string {
	if o == nil || IsNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsEvent) GetPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *RecordsEvent) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *RecordsEvent) SetPayload(v string) {
	o.Payload = &v
}

func (o RecordsEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Payload) {
		toSerialize["Payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableRecordsEvent struct {
	value *RecordsEvent
	isSet bool
}

func (v NullableRecordsEvent) Get() *RecordsEvent {
	return v.value
}

func (v *NullableRecordsEvent) Set(val *RecordsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordsEvent(val *RecordsEvent) *NullableRecordsEvent {
	return &NullableRecordsEvent{value: val, isSet: true}
}

func (v NullableRecordsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


