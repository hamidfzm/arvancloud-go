/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ObjectCannedACL the model 'ObjectCannedACL'
type ObjectCannedACL string

// List of ObjectCannedACL
const (
	OBJECTCANNEDACL_PRIVATE ObjectCannedACL = "private"
	OBJECTCANNEDACL_PUBLIC_READ ObjectCannedACL = "public-read"
	OBJECTCANNEDACL_PUBLIC_READ_WRITE ObjectCannedACL = "public-read-write"
	OBJECTCANNEDACL_AUTHENTICATED_READ ObjectCannedACL = "authenticated-read"
	OBJECTCANNEDACL_AWS_EXEC_READ ObjectCannedACL = "aws-exec-read"
	OBJECTCANNEDACL_BUCKET_OWNER_READ ObjectCannedACL = "bucket-owner-read"
	OBJECTCANNEDACL_BUCKET_OWNER_FULL_CONTROL ObjectCannedACL = "bucket-owner-full-control"
)

// All allowed values of ObjectCannedACL enum
var AllowedObjectCannedACLEnumValues = []ObjectCannedACL{
	"private",
	"public-read",
	"public-read-write",
	"authenticated-read",
	"aws-exec-read",
	"bucket-owner-read",
	"bucket-owner-full-control",
}

func (v *ObjectCannedACL) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectCannedACL(value)
	for _, existing := range AllowedObjectCannedACLEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectCannedACL", value)
}

// NewObjectCannedACLFromValue returns a pointer to a valid ObjectCannedACL
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectCannedACLFromValue(v string) (*ObjectCannedACL, error) {
	ev := ObjectCannedACL(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectCannedACL: valid values are %v", v, AllowedObjectCannedACLEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectCannedACL) IsValid() bool {
	for _, existing := range AllowedObjectCannedACLEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectCannedACL value
func (v ObjectCannedACL) Ptr() *ObjectCannedACL {
	return &v
}

type NullableObjectCannedACL struct {
	value *ObjectCannedACL
	isSet bool
}

func (v NullableObjectCannedACL) Get() *ObjectCannedACL {
	return v.value
}

func (v *NullableObjectCannedACL) Set(val *ObjectCannedACL) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectCannedACL) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectCannedACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectCannedACL(val *ObjectCannedACL) *NullableObjectCannedACL {
	return &NullableObjectCannedACL{value: val, isSet: true}
}

func (v NullableObjectCannedACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectCannedACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

