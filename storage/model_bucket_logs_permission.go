/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// BucketLogsPermission the model 'BucketLogsPermission'
type BucketLogsPermission string

// List of BucketLogsPermission
const (
	BUCKETLOGSPERMISSION_FULL_CONTROL BucketLogsPermission = "FULL_CONTROL"
	BUCKETLOGSPERMISSION_READ BucketLogsPermission = "READ"
	BUCKETLOGSPERMISSION_WRITE BucketLogsPermission = "WRITE"
)

// All allowed values of BucketLogsPermission enum
var AllowedBucketLogsPermissionEnumValues = []BucketLogsPermission{
	"FULL_CONTROL",
	"READ",
	"WRITE",
}

func (v *BucketLogsPermission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BucketLogsPermission(value)
	for _, existing := range AllowedBucketLogsPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BucketLogsPermission", value)
}

// NewBucketLogsPermissionFromValue returns a pointer to a valid BucketLogsPermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBucketLogsPermissionFromValue(v string) (*BucketLogsPermission, error) {
	ev := BucketLogsPermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BucketLogsPermission: valid values are %v", v, AllowedBucketLogsPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BucketLogsPermission) IsValid() bool {
	for _, existing := range AllowedBucketLogsPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BucketLogsPermission value
func (v BucketLogsPermission) Ptr() *BucketLogsPermission {
	return &v
}

type NullableBucketLogsPermission struct {
	value *BucketLogsPermission
	isSet bool
}

func (v NullableBucketLogsPermission) Get() *BucketLogsPermission {
	return v.value
}

func (v *NullableBucketLogsPermission) Set(val *BucketLogsPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketLogsPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketLogsPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketLogsPermission(val *BucketLogsPermission) *NullableBucketLogsPermission {
	return &NullableBucketLogsPermission{value: val, isSet: true}
}

func (v NullableBucketLogsPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketLogsPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

