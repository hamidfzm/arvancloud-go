/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the Delete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Delete{}

// Delete Container for the objects to delete.
type Delete struct {
	Objects Array `json:"Objects"`
	Quiet *bool `json:"Quiet,omitempty"`
}

// NewDelete instantiates a new Delete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelete(objects Array) *Delete {
	this := Delete{}
	this.Objects = objects
	return &this
}

// NewDeleteWithDefaults instantiates a new Delete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteWithDefaults() *Delete {
	this := Delete{}
	return &this
}

// GetObjects returns the Objects field value
func (o *Delete) GetObjects() Array {
	if o == nil {
		var ret Array
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *Delete) GetObjectsOk() (*Array, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Objects, true
}

// SetObjects sets field value
func (o *Delete) SetObjects(v Array) {
	o.Objects = v
}

// GetQuiet returns the Quiet field value if set, zero value otherwise.
func (o *Delete) GetQuiet() bool {
	if o == nil || IsNil(o.Quiet) {
		var ret bool
		return ret
	}
	return *o.Quiet
}

// GetQuietOk returns a tuple with the Quiet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delete) GetQuietOk() (*bool, bool) {
	if o == nil || IsNil(o.Quiet) {
		return nil, false
	}
	return o.Quiet, true
}

// HasQuiet returns a boolean if a field has been set.
func (o *Delete) HasQuiet() bool {
	if o != nil && !IsNil(o.Quiet) {
		return true
	}

	return false
}

// SetQuiet gets a reference to the given bool and assigns it to the Quiet field.
func (o *Delete) SetQuiet(v bool) {
	o.Quiet = &v
}

func (o Delete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Delete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Objects"] = o.Objects
	if !IsNil(o.Quiet) {
		toSerialize["Quiet"] = o.Quiet
	}
	return toSerialize, nil
}

type NullableDelete struct {
	value *Delete
	isSet bool
}

func (v NullableDelete) Get() *Delete {
	return v.value
}

func (v *NullableDelete) Set(val *Delete) {
	v.value = val
	v.isSet = true
}

func (v NullableDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelete(val *Delete) *NullableDelete {
	return &NullableDelete{value: val, isSet: true}
}

func (v NullableDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


