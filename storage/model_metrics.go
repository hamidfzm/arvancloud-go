/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the Metrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metrics{}

// Metrics  A container specifying replication metrics-related settings enabling replication metrics and events.
type Metrics struct {
	Status MetricsStatus `json:"Status"`
	EventThreshold *MetricsEventThreshold `json:"EventThreshold,omitempty"`
}

// NewMetrics instantiates a new Metrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetrics(status MetricsStatus) *Metrics {
	this := Metrics{}
	this.Status = status
	return &this
}

// NewMetricsWithDefaults instantiates a new Metrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsWithDefaults() *Metrics {
	this := Metrics{}
	return &this
}

// GetStatus returns the Status field value
func (o *Metrics) GetStatus() MetricsStatus {
	if o == nil {
		var ret MetricsStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Metrics) GetStatusOk() (*MetricsStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Metrics) SetStatus(v MetricsStatus) {
	o.Status = v
}

// GetEventThreshold returns the EventThreshold field value if set, zero value otherwise.
func (o *Metrics) GetEventThreshold() MetricsEventThreshold {
	if o == nil || IsNil(o.EventThreshold) {
		var ret MetricsEventThreshold
		return ret
	}
	return *o.EventThreshold
}

// GetEventThresholdOk returns a tuple with the EventThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metrics) GetEventThresholdOk() (*MetricsEventThreshold, bool) {
	if o == nil || IsNil(o.EventThreshold) {
		return nil, false
	}
	return o.EventThreshold, true
}

// HasEventThreshold returns a boolean if a field has been set.
func (o *Metrics) HasEventThreshold() bool {
	if o != nil && !IsNil(o.EventThreshold) {
		return true
	}

	return false
}

// SetEventThreshold gets a reference to the given MetricsEventThreshold and assigns it to the EventThreshold field.
func (o *Metrics) SetEventThreshold(v MetricsEventThreshold) {
	o.EventThreshold = &v
}

func (o Metrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Status"] = o.Status
	if !IsNil(o.EventThreshold) {
		toSerialize["EventThreshold"] = o.EventThreshold
	}
	return toSerialize, nil
}

type NullableMetrics struct {
	value *Metrics
	isSet bool
}

func (v NullableMetrics) Get() *Metrics {
	return v.value
}

func (v *NullableMetrics) Set(val *Metrics) {
	v.value = val
	v.isSet = true
}

func (v NullableMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetrics(val *Metrics) *NullableMetrics {
	return &NullableMetrics{value: val, isSet: true}
}

func (v NullableMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


