/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// QuoteFields the model 'QuoteFields'
type QuoteFields string

// List of QuoteFields
const (
	QUOTEFIELDS_ALWAYS QuoteFields = "ALWAYS"
	QUOTEFIELDS_ASNEEDED QuoteFields = "ASNEEDED"
)

// All allowed values of QuoteFields enum
var AllowedQuoteFieldsEnumValues = []QuoteFields{
	"ALWAYS",
	"ASNEEDED",
}

func (v *QuoteFields) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QuoteFields(value)
	for _, existing := range AllowedQuoteFieldsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QuoteFields", value)
}

// NewQuoteFieldsFromValue returns a pointer to a valid QuoteFields
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQuoteFieldsFromValue(v string) (*QuoteFields, error) {
	ev := QuoteFields(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QuoteFields: valid values are %v", v, AllowedQuoteFieldsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QuoteFields) IsValid() bool {
	for _, existing := range AllowedQuoteFieldsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QuoteFields value
func (v QuoteFields) Ptr() *QuoteFields {
	return &v
}

type NullableQuoteFields struct {
	value *QuoteFields
	isSet bool
}

func (v NullableQuoteFields) Get() *QuoteFields {
	return v.value
}

func (v *NullableQuoteFields) Set(val *QuoteFields) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteFields) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteFields(val *QuoteFields) *NullableQuoteFields {
	return &NullableQuoteFields{value: val, isSet: true}
}

func (v NullableQuoteFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

