/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the NoncurrentVersionTransition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoncurrentVersionTransition{}

// NoncurrentVersionTransition Container for the transition rule that describes when noncurrent objects transition to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that ArvanCloud S3 transition noncurrent object versions to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class at a specific period in the object's lifetime.
type NoncurrentVersionTransition struct {
	NoncurrentDays *int32 `json:"NoncurrentDays,omitempty"`
	StorageClass *TransitionStorageClass `json:"StorageClass,omitempty"`
}

// NewNoncurrentVersionTransition instantiates a new NoncurrentVersionTransition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoncurrentVersionTransition() *NoncurrentVersionTransition {
	this := NoncurrentVersionTransition{}
	return &this
}

// NewNoncurrentVersionTransitionWithDefaults instantiates a new NoncurrentVersionTransition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoncurrentVersionTransitionWithDefaults() *NoncurrentVersionTransition {
	this := NoncurrentVersionTransition{}
	return &this
}

// GetNoncurrentDays returns the NoncurrentDays field value if set, zero value otherwise.
func (o *NoncurrentVersionTransition) GetNoncurrentDays() int32 {
	if o == nil || IsNil(o.NoncurrentDays) {
		var ret int32
		return ret
	}
	return *o.NoncurrentDays
}

// GetNoncurrentDaysOk returns a tuple with the NoncurrentDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoncurrentVersionTransition) GetNoncurrentDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.NoncurrentDays) {
		return nil, false
	}
	return o.NoncurrentDays, true
}

// HasNoncurrentDays returns a boolean if a field has been set.
func (o *NoncurrentVersionTransition) HasNoncurrentDays() bool {
	if o != nil && !IsNil(o.NoncurrentDays) {
		return true
	}

	return false
}

// SetNoncurrentDays gets a reference to the given int32 and assigns it to the NoncurrentDays field.
func (o *NoncurrentVersionTransition) SetNoncurrentDays(v int32) {
	o.NoncurrentDays = &v
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *NoncurrentVersionTransition) GetStorageClass() TransitionStorageClass {
	if o == nil || IsNil(o.StorageClass) {
		var ret TransitionStorageClass
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoncurrentVersionTransition) GetStorageClassOk() (*TransitionStorageClass, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *NoncurrentVersionTransition) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given TransitionStorageClass and assigns it to the StorageClass field.
func (o *NoncurrentVersionTransition) SetStorageClass(v TransitionStorageClass) {
	o.StorageClass = &v
}

func (o NoncurrentVersionTransition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoncurrentVersionTransition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NoncurrentDays) {
		toSerialize["NoncurrentDays"] = o.NoncurrentDays
	}
	if !IsNil(o.StorageClass) {
		toSerialize["StorageClass"] = o.StorageClass
	}
	return toSerialize, nil
}

type NullableNoncurrentVersionTransition struct {
	value *NoncurrentVersionTransition
	isSet bool
}

func (v NullableNoncurrentVersionTransition) Get() *NoncurrentVersionTransition {
	return v.value
}

func (v *NullableNoncurrentVersionTransition) Set(val *NoncurrentVersionTransition) {
	v.value = val
	v.isSet = true
}

func (v NullableNoncurrentVersionTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableNoncurrentVersionTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoncurrentVersionTransition(val *NoncurrentVersionTransition) *NullableNoncurrentVersionTransition {
	return &NullableNoncurrentVersionTransition{value: val, isSet: true}
}

func (v NullableNoncurrentVersionTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoncurrentVersionTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


