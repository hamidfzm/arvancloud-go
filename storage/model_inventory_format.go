/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// InventoryFormat the model 'InventoryFormat'
type InventoryFormat string

// List of InventoryFormat
const (
	INVENTORYFORMAT_CSV InventoryFormat = "CSV"
	INVENTORYFORMAT_ORC InventoryFormat = "ORC"
	INVENTORYFORMAT_PARQUET InventoryFormat = "Parquet"
)

// All allowed values of InventoryFormat enum
var AllowedInventoryFormatEnumValues = []InventoryFormat{
	"CSV",
	"ORC",
	"Parquet",
}

func (v *InventoryFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InventoryFormat(value)
	for _, existing := range AllowedInventoryFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InventoryFormat", value)
}

// NewInventoryFormatFromValue returns a pointer to a valid InventoryFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInventoryFormatFromValue(v string) (*InventoryFormat, error) {
	ev := InventoryFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InventoryFormat: valid values are %v", v, AllowedInventoryFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InventoryFormat) IsValid() bool {
	for _, existing := range AllowedInventoryFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InventoryFormat value
func (v InventoryFormat) Ptr() *InventoryFormat {
	return &v
}

type NullableInventoryFormat struct {
	value *InventoryFormat
	isSet bool
}

func (v NullableInventoryFormat) Get() *InventoryFormat {
	return v.value
}

func (v *NullableInventoryFormat) Set(val *InventoryFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryFormat(val *InventoryFormat) *NullableInventoryFormat {
	return &NullableInventoryFormat{value: val, isSet: true}
}

func (v NullableInventoryFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

