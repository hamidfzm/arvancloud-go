/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the AbortIncompleteMultipartUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbortIncompleteMultipartUpload{}

// AbortIncompleteMultipartUpload Specifies the days since the initiation of an incomplete multipart upload that ArvanCloud S3 will wait before permanently removing all parts of the upload. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\"> Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the <i>S3 User Guide</i>.
type AbortIncompleteMultipartUpload struct {
	DaysAfterInitiation *int32 `json:"DaysAfterInitiation,omitempty"`
}

// NewAbortIncompleteMultipartUpload instantiates a new AbortIncompleteMultipartUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbortIncompleteMultipartUpload() *AbortIncompleteMultipartUpload {
	this := AbortIncompleteMultipartUpload{}
	return &this
}

// NewAbortIncompleteMultipartUploadWithDefaults instantiates a new AbortIncompleteMultipartUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbortIncompleteMultipartUploadWithDefaults() *AbortIncompleteMultipartUpload {
	this := AbortIncompleteMultipartUpload{}
	return &this
}

// GetDaysAfterInitiation returns the DaysAfterInitiation field value if set, zero value otherwise.
func (o *AbortIncompleteMultipartUpload) GetDaysAfterInitiation() int32 {
	if o == nil || IsNil(o.DaysAfterInitiation) {
		var ret int32
		return ret
	}
	return *o.DaysAfterInitiation
}

// GetDaysAfterInitiationOk returns a tuple with the DaysAfterInitiation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbortIncompleteMultipartUpload) GetDaysAfterInitiationOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysAfterInitiation) {
		return nil, false
	}
	return o.DaysAfterInitiation, true
}

// HasDaysAfterInitiation returns a boolean if a field has been set.
func (o *AbortIncompleteMultipartUpload) HasDaysAfterInitiation() bool {
	if o != nil && !IsNil(o.DaysAfterInitiation) {
		return true
	}

	return false
}

// SetDaysAfterInitiation gets a reference to the given int32 and assigns it to the DaysAfterInitiation field.
func (o *AbortIncompleteMultipartUpload) SetDaysAfterInitiation(v int32) {
	o.DaysAfterInitiation = &v
}

func (o AbortIncompleteMultipartUpload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbortIncompleteMultipartUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaysAfterInitiation) {
		toSerialize["DaysAfterInitiation"] = o.DaysAfterInitiation
	}
	return toSerialize, nil
}

type NullableAbortIncompleteMultipartUpload struct {
	value *AbortIncompleteMultipartUpload
	isSet bool
}

func (v NullableAbortIncompleteMultipartUpload) Get() *AbortIncompleteMultipartUpload {
	return v.value
}

func (v *NullableAbortIncompleteMultipartUpload) Set(val *AbortIncompleteMultipartUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableAbortIncompleteMultipartUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableAbortIncompleteMultipartUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbortIncompleteMultipartUpload(val *AbortIncompleteMultipartUpload) *NullableAbortIncompleteMultipartUpload {
	return &NullableAbortIncompleteMultipartUpload{value: val, isSet: true}
}

func (v NullableAbortIncompleteMultipartUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbortIncompleteMultipartUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


