/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// BucketLocationConstraint the model 'BucketLocationConstraint'
type BucketLocationConstraint string

// List of BucketLocationConstraint
const (
	BUCKETLOCATIONCONSTRAINT_THR_AT1 BucketLocationConstraint = "ir-thr-at1"
	BUCKETLOCATIONCONSTRAINT_TBZ_SH1 BucketLocationConstraint = "ir-tbz-sh1"
)

// All allowed values of BucketLocationConstraint enum
var AllowedBucketLocationConstraintEnumValues = []BucketLocationConstraint{
	"ir-thr-at1",
	"ir-tbz-sh1",
}

func (v *BucketLocationConstraint) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BucketLocationConstraint(value)
	for _, existing := range AllowedBucketLocationConstraintEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BucketLocationConstraint", value)
}

// NewBucketLocationConstraintFromValue returns a pointer to a valid BucketLocationConstraint
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBucketLocationConstraintFromValue(v string) (*BucketLocationConstraint, error) {
	ev := BucketLocationConstraint(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BucketLocationConstraint: valid values are %v", v, AllowedBucketLocationConstraintEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BucketLocationConstraint) IsValid() bool {
	for _, existing := range AllowedBucketLocationConstraintEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BucketLocationConstraint value
func (v BucketLocationConstraint) Ptr() *BucketLocationConstraint {
	return &v
}

type NullableBucketLocationConstraint struct {
	value *BucketLocationConstraint
	isSet bool
}

func (v NullableBucketLocationConstraint) Get() *BucketLocationConstraint {
	return v.value
}

func (v *NullableBucketLocationConstraint) Set(val *BucketLocationConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketLocationConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketLocationConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketLocationConstraint(val *BucketLocationConstraint) *NullableBucketLocationConstraint {
	return &NullableBucketLocationConstraint{value: val, isSet: true}
}

func (v NullableBucketLocationConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketLocationConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

