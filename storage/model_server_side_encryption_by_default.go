/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ServerSideEncryptionByDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerSideEncryptionByDefault{}

// ServerSideEncryptionByDefault Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html\">PUT Bucket encryption</a> in the <i>ArvanCloud S3 API Reference</i>.
type ServerSideEncryptionByDefault struct {
	SSEAlgorithm ServerSideEncryption `json:"SSEAlgorithm"`
	KMSMasterKeyID *string `json:"KMSMasterKeyID,omitempty"`
}

// NewServerSideEncryptionByDefault instantiates a new ServerSideEncryptionByDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSideEncryptionByDefault(sSEAlgorithm ServerSideEncryption) *ServerSideEncryptionByDefault {
	this := ServerSideEncryptionByDefault{}
	this.SSEAlgorithm = sSEAlgorithm
	return &this
}

// NewServerSideEncryptionByDefaultWithDefaults instantiates a new ServerSideEncryptionByDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSideEncryptionByDefaultWithDefaults() *ServerSideEncryptionByDefault {
	this := ServerSideEncryptionByDefault{}
	return &this
}

// GetSSEAlgorithm returns the SSEAlgorithm field value
func (o *ServerSideEncryptionByDefault) GetSSEAlgorithm() ServerSideEncryption {
	if o == nil {
		var ret ServerSideEncryption
		return ret
	}

	return o.SSEAlgorithm
}

// GetSSEAlgorithmOk returns a tuple with the SSEAlgorithm field value
// and a boolean to check if the value has been set.
func (o *ServerSideEncryptionByDefault) GetSSEAlgorithmOk() (*ServerSideEncryption, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SSEAlgorithm, true
}

// SetSSEAlgorithm sets field value
func (o *ServerSideEncryptionByDefault) SetSSEAlgorithm(v ServerSideEncryption) {
	o.SSEAlgorithm = v
}

// GetKMSMasterKeyID returns the KMSMasterKeyID field value if set, zero value otherwise.
func (o *ServerSideEncryptionByDefault) GetKMSMasterKeyID() string {
	if o == nil || IsNil(o.KMSMasterKeyID) {
		var ret string
		return ret
	}
	return *o.KMSMasterKeyID
}

// GetKMSMasterKeyIDOk returns a tuple with the KMSMasterKeyID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSideEncryptionByDefault) GetKMSMasterKeyIDOk() (*string, bool) {
	if o == nil || IsNil(o.KMSMasterKeyID) {
		return nil, false
	}
	return o.KMSMasterKeyID, true
}

// HasKMSMasterKeyID returns a boolean if a field has been set.
func (o *ServerSideEncryptionByDefault) HasKMSMasterKeyID() bool {
	if o != nil && !IsNil(o.KMSMasterKeyID) {
		return true
	}

	return false
}

// SetKMSMasterKeyID gets a reference to the given string and assigns it to the KMSMasterKeyID field.
func (o *ServerSideEncryptionByDefault) SetKMSMasterKeyID(v string) {
	o.KMSMasterKeyID = &v
}

func (o ServerSideEncryptionByDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerSideEncryptionByDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["SSEAlgorithm"] = o.SSEAlgorithm
	if !IsNil(o.KMSMasterKeyID) {
		toSerialize["KMSMasterKeyID"] = o.KMSMasterKeyID
	}
	return toSerialize, nil
}

type NullableServerSideEncryptionByDefault struct {
	value *ServerSideEncryptionByDefault
	isSet bool
}

func (v NullableServerSideEncryptionByDefault) Get() *ServerSideEncryptionByDefault {
	return v.value
}

func (v *NullableServerSideEncryptionByDefault) Set(val *ServerSideEncryptionByDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSideEncryptionByDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSideEncryptionByDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSideEncryptionByDefault(val *ServerSideEncryptionByDefault) *NullableServerSideEncryptionByDefault {
	return &NullableServerSideEncryptionByDefault{value: val, isSet: true}
}

func (v NullableServerSideEncryptionByDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSideEncryptionByDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


