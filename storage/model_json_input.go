/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the JSONInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONInput{}

// JSONInput Specifies JSON as object's input serialization format.
type JSONInput struct {
	Type *JSONType `json:"Type,omitempty"`
}

// NewJSONInput instantiates a new JSONInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONInput() *JSONInput {
	this := JSONInput{}
	return &this
}

// NewJSONInputWithDefaults instantiates a new JSONInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONInputWithDefaults() *JSONInput {
	this := JSONInput{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JSONInput) GetType() JSONType {
	if o == nil || IsNil(o.Type) {
		var ret JSONType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONInput) GetTypeOk() (*JSONType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JSONInput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given JSONType and assigns it to the Type field.
func (o *JSONInput) SetType(v JSONType) {
	o.Type = &v
}

func (o JSONInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	return toSerialize, nil
}

type NullableJSONInput struct {
	value *JSONInput
	isSet bool
}

func (v NullableJSONInput) Get() *JSONInput {
	return v.value
}

func (v *NullableJSONInput) Set(val *JSONInput) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONInput) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONInput(val *JSONInput) *NullableJSONInput {
	return &NullableJSONInput{value: val, isSet: true}
}

func (v NullableJSONInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


