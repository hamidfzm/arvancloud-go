/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the LifecycleRuleFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleRuleFilter{}

// LifecycleRuleFilter struct for LifecycleRuleFilter
type LifecycleRuleFilter struct {
	Prefix *string `json:"Prefix,omitempty"`
	Tag *LifecycleRuleFilterTag `json:"Tag,omitempty"`
	And *LifecycleRuleAndOperator `json:"And,omitempty"`
}

// NewLifecycleRuleFilter instantiates a new LifecycleRuleFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleRuleFilter() *LifecycleRuleFilter {
	this := LifecycleRuleFilter{}
	return &this
}

// NewLifecycleRuleFilterWithDefaults instantiates a new LifecycleRuleFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleRuleFilterWithDefaults() *LifecycleRuleFilter {
	this := LifecycleRuleFilter{}
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *LifecycleRuleFilter) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRuleFilter) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *LifecycleRuleFilter) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *LifecycleRuleFilter) SetPrefix(v string) {
	o.Prefix = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *LifecycleRuleFilter) GetTag() LifecycleRuleFilterTag {
	if o == nil || IsNil(o.Tag) {
		var ret LifecycleRuleFilterTag
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRuleFilter) GetTagOk() (*LifecycleRuleFilterTag, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *LifecycleRuleFilter) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given LifecycleRuleFilterTag and assigns it to the Tag field.
func (o *LifecycleRuleFilter) SetTag(v LifecycleRuleFilterTag) {
	o.Tag = &v
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *LifecycleRuleFilter) GetAnd() LifecycleRuleAndOperator {
	if o == nil || IsNil(o.And) {
		var ret LifecycleRuleAndOperator
		return ret
	}
	return *o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRuleFilter) GetAndOk() (*LifecycleRuleAndOperator, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *LifecycleRuleFilter) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given LifecycleRuleAndOperator and assigns it to the And field.
func (o *LifecycleRuleFilter) SetAnd(v LifecycleRuleAndOperator) {
	o.And = &v
}

func (o LifecycleRuleFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleRuleFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !IsNil(o.Tag) {
		toSerialize["Tag"] = o.Tag
	}
	if !IsNil(o.And) {
		toSerialize["And"] = o.And
	}
	return toSerialize, nil
}

type NullableLifecycleRuleFilter struct {
	value *LifecycleRuleFilter
	isSet bool
}

func (v NullableLifecycleRuleFilter) Get() *LifecycleRuleFilter {
	return v.value
}

func (v *NullableLifecycleRuleFilter) Set(val *LifecycleRuleFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleRuleFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleRuleFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleRuleFilter(val *LifecycleRuleFilter) *NullableLifecycleRuleFilter {
	return &NullableLifecycleRuleFilter{value: val, isSet: true}
}

func (v NullableLifecycleRuleFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleRuleFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


