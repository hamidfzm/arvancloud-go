/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ReplicationTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationTime{}

// ReplicationTime  A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a <code>Metrics</code> block. 
type ReplicationTime struct {
	Status ReplicationTimeStatus `json:"Status"`
	Time ReplicationTimeTime `json:"Time"`
}

// NewReplicationTime instantiates a new ReplicationTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationTime(status ReplicationTimeStatus, time ReplicationTimeTime) *ReplicationTime {
	this := ReplicationTime{}
	this.Status = status
	this.Time = time
	return &this
}

// NewReplicationTimeWithDefaults instantiates a new ReplicationTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationTimeWithDefaults() *ReplicationTime {
	this := ReplicationTime{}
	return &this
}

// GetStatus returns the Status field value
func (o *ReplicationTime) GetStatus() ReplicationTimeStatus {
	if o == nil {
		var ret ReplicationTimeStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ReplicationTime) GetStatusOk() (*ReplicationTimeStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ReplicationTime) SetStatus(v ReplicationTimeStatus) {
	o.Status = v
}

// GetTime returns the Time field value
func (o *ReplicationTime) GetTime() ReplicationTimeTime {
	if o == nil {
		var ret ReplicationTimeTime
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *ReplicationTime) GetTimeOk() (*ReplicationTimeTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *ReplicationTime) SetTime(v ReplicationTimeTime) {
	o.Time = v
}

func (o ReplicationTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Status"] = o.Status
	toSerialize["Time"] = o.Time
	return toSerialize, nil
}

type NullableReplicationTime struct {
	value *ReplicationTime
	isSet bool
}

func (v NullableReplicationTime) Get() *ReplicationTime {
	return v.value
}

func (v *NullableReplicationTime) Set(val *ReplicationTime) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationTime) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationTime(val *ReplicationTime) *NullableReplicationTime {
	return &NullableReplicationTime{value: val, isSet: true}
}

func (v NullableReplicationTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


