/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the NoncurrentVersionExpiration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoncurrentVersionExpiration{}

// NoncurrentVersionExpiration Specifies when noncurrent object versions expire. Upon expiration, ArvanCloud S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that ArvanCloud S3 delete noncurrent object versions at a specific period in the object's lifetime.
type NoncurrentVersionExpiration struct {
	NoncurrentDays *int32 `json:"NoncurrentDays,omitempty"`
}

// NewNoncurrentVersionExpiration instantiates a new NoncurrentVersionExpiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoncurrentVersionExpiration() *NoncurrentVersionExpiration {
	this := NoncurrentVersionExpiration{}
	return &this
}

// NewNoncurrentVersionExpirationWithDefaults instantiates a new NoncurrentVersionExpiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoncurrentVersionExpirationWithDefaults() *NoncurrentVersionExpiration {
	this := NoncurrentVersionExpiration{}
	return &this
}

// GetNoncurrentDays returns the NoncurrentDays field value if set, zero value otherwise.
func (o *NoncurrentVersionExpiration) GetNoncurrentDays() int32 {
	if o == nil || IsNil(o.NoncurrentDays) {
		var ret int32
		return ret
	}
	return *o.NoncurrentDays
}

// GetNoncurrentDaysOk returns a tuple with the NoncurrentDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoncurrentVersionExpiration) GetNoncurrentDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.NoncurrentDays) {
		return nil, false
	}
	return o.NoncurrentDays, true
}

// HasNoncurrentDays returns a boolean if a field has been set.
func (o *NoncurrentVersionExpiration) HasNoncurrentDays() bool {
	if o != nil && !IsNil(o.NoncurrentDays) {
		return true
	}

	return false
}

// SetNoncurrentDays gets a reference to the given int32 and assigns it to the NoncurrentDays field.
func (o *NoncurrentVersionExpiration) SetNoncurrentDays(v int32) {
	o.NoncurrentDays = &v
}

func (o NoncurrentVersionExpiration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoncurrentVersionExpiration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NoncurrentDays) {
		toSerialize["NoncurrentDays"] = o.NoncurrentDays
	}
	return toSerialize, nil
}

type NullableNoncurrentVersionExpiration struct {
	value *NoncurrentVersionExpiration
	isSet bool
}

func (v NullableNoncurrentVersionExpiration) Get() *NoncurrentVersionExpiration {
	return v.value
}

func (v *NullableNoncurrentVersionExpiration) Set(val *NoncurrentVersionExpiration) {
	v.value = val
	v.isSet = true
}

func (v NullableNoncurrentVersionExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableNoncurrentVersionExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoncurrentVersionExpiration(val *NoncurrentVersionExpiration) *NullableNoncurrentVersionExpiration {
	return &NullableNoncurrentVersionExpiration{value: val, isSet: true}
}

func (v NullableNoncurrentVersionExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoncurrentVersionExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


