/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ObjectIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectIdentifier{}

// ObjectIdentifier Object Identifier is unique value to identify objects.
type ObjectIdentifier struct {
	Key string `json:"Key"`
	VersionId *string `json:"VersionId,omitempty"`
}

// NewObjectIdentifier instantiates a new ObjectIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectIdentifier(key string) *ObjectIdentifier {
	this := ObjectIdentifier{}
	this.Key = key
	return &this
}

// NewObjectIdentifierWithDefaults instantiates a new ObjectIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectIdentifierWithDefaults() *ObjectIdentifier {
	this := ObjectIdentifier{}
	return &this
}

// GetKey returns the Key field value
func (o *ObjectIdentifier) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ObjectIdentifier) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ObjectIdentifier) SetKey(v string) {
	o.Key = v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *ObjectIdentifier) GetVersionId() string {
	if o == nil || IsNil(o.VersionId) {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectIdentifier) GetVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *ObjectIdentifier) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *ObjectIdentifier) SetVersionId(v string) {
	o.VersionId = &v
}

func (o ObjectIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Key"] = o.Key
	if !IsNil(o.VersionId) {
		toSerialize["VersionId"] = o.VersionId
	}
	return toSerialize, nil
}

type NullableObjectIdentifier struct {
	value *ObjectIdentifier
	isSet bool
}

func (v NullableObjectIdentifier) Get() *ObjectIdentifier {
	return v.value
}

func (v *NullableObjectIdentifier) Set(val *ObjectIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectIdentifier(val *ObjectIdentifier) *NullableObjectIdentifier {
	return &NullableObjectIdentifier{value: val, isSet: true}
}

func (v NullableObjectIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


