/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"time"
)

// checks if the LifecycleExpiration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleExpiration{}

// LifecycleExpiration Container for the expiration for the lifecycle of the object.
type LifecycleExpiration struct {
	Date *time.Time `json:"Date,omitempty"`
	Days *int32 `json:"Days,omitempty"`
	ExpiredObjectDeleteMarker *bool `json:"ExpiredObjectDeleteMarker,omitempty"`
}

// NewLifecycleExpiration instantiates a new LifecycleExpiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleExpiration() *LifecycleExpiration {
	this := LifecycleExpiration{}
	return &this
}

// NewLifecycleExpirationWithDefaults instantiates a new LifecycleExpiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleExpirationWithDefaults() *LifecycleExpiration {
	this := LifecycleExpiration{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *LifecycleExpiration) SetDate(v time.Time) {
	o.Date = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *LifecycleExpiration) SetDays(v int32) {
	o.Days = &v
}

// GetExpiredObjectDeleteMarker returns the ExpiredObjectDeleteMarker field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetExpiredObjectDeleteMarker() bool {
	if o == nil || IsNil(o.ExpiredObjectDeleteMarker) {
		var ret bool
		return ret
	}
	return *o.ExpiredObjectDeleteMarker
}

// GetExpiredObjectDeleteMarkerOk returns a tuple with the ExpiredObjectDeleteMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetExpiredObjectDeleteMarkerOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpiredObjectDeleteMarker) {
		return nil, false
	}
	return o.ExpiredObjectDeleteMarker, true
}

// HasExpiredObjectDeleteMarker returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasExpiredObjectDeleteMarker() bool {
	if o != nil && !IsNil(o.ExpiredObjectDeleteMarker) {
		return true
	}

	return false
}

// SetExpiredObjectDeleteMarker gets a reference to the given bool and assigns it to the ExpiredObjectDeleteMarker field.
func (o *LifecycleExpiration) SetExpiredObjectDeleteMarker(v bool) {
	o.ExpiredObjectDeleteMarker = &v
}

func (o LifecycleExpiration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleExpiration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.Days) {
		toSerialize["Days"] = o.Days
	}
	if !IsNil(o.ExpiredObjectDeleteMarker) {
		toSerialize["ExpiredObjectDeleteMarker"] = o.ExpiredObjectDeleteMarker
	}
	return toSerialize, nil
}

type NullableLifecycleExpiration struct {
	value *LifecycleExpiration
	isSet bool
}

func (v NullableLifecycleExpiration) Get() *LifecycleExpiration {
	return v.value
}

func (v *NullableLifecycleExpiration) Set(val *LifecycleExpiration) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleExpiration(val *LifecycleExpiration) *NullableLifecycleExpiration {
	return &NullableLifecycleExpiration{value: val, isSet: true}
}

func (v NullableLifecycleExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


