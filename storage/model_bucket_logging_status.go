/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the BucketLoggingStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketLoggingStatus{}

// BucketLoggingStatus Container for logging status information.
type BucketLoggingStatus struct {
	LoggingEnabled *LoggingEnabled `json:"LoggingEnabled,omitempty"`
}

// NewBucketLoggingStatus instantiates a new BucketLoggingStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketLoggingStatus() *BucketLoggingStatus {
	this := BucketLoggingStatus{}
	return &this
}

// NewBucketLoggingStatusWithDefaults instantiates a new BucketLoggingStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketLoggingStatusWithDefaults() *BucketLoggingStatus {
	this := BucketLoggingStatus{}
	return &this
}

// GetLoggingEnabled returns the LoggingEnabled field value if set, zero value otherwise.
func (o *BucketLoggingStatus) GetLoggingEnabled() LoggingEnabled {
	if o == nil || IsNil(o.LoggingEnabled) {
		var ret LoggingEnabled
		return ret
	}
	return *o.LoggingEnabled
}

// GetLoggingEnabledOk returns a tuple with the LoggingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketLoggingStatus) GetLoggingEnabledOk() (*LoggingEnabled, bool) {
	if o == nil || IsNil(o.LoggingEnabled) {
		return nil, false
	}
	return o.LoggingEnabled, true
}

// HasLoggingEnabled returns a boolean if a field has been set.
func (o *BucketLoggingStatus) HasLoggingEnabled() bool {
	if o != nil && !IsNil(o.LoggingEnabled) {
		return true
	}

	return false
}

// SetLoggingEnabled gets a reference to the given LoggingEnabled and assigns it to the LoggingEnabled field.
func (o *BucketLoggingStatus) SetLoggingEnabled(v LoggingEnabled) {
	o.LoggingEnabled = &v
}

func (o BucketLoggingStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketLoggingStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoggingEnabled) {
		toSerialize["LoggingEnabled"] = o.LoggingEnabled
	}
	return toSerialize, nil
}

type NullableBucketLoggingStatus struct {
	value *BucketLoggingStatus
	isSet bool
}

func (v NullableBucketLoggingStatus) Get() *BucketLoggingStatus {
	return v.value
}

func (v *NullableBucketLoggingStatus) Set(val *BucketLoggingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketLoggingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketLoggingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketLoggingStatus(val *BucketLoggingStatus) *NullableBucketLoggingStatus {
	return &NullableBucketLoggingStatus{value: val, isSet: true}
}

func (v NullableBucketLoggingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketLoggingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


