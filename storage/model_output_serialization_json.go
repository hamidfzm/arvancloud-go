/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the OutputSerializationJSON type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputSerializationJSON{}

// OutputSerializationJSON struct for OutputSerializationJSON
type OutputSerializationJSON struct {
	RecordDelimiter *string `json:"RecordDelimiter,omitempty"`
}

// NewOutputSerializationJSON instantiates a new OutputSerializationJSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputSerializationJSON() *OutputSerializationJSON {
	this := OutputSerializationJSON{}
	return &this
}

// NewOutputSerializationJSONWithDefaults instantiates a new OutputSerializationJSON object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputSerializationJSONWithDefaults() *OutputSerializationJSON {
	this := OutputSerializationJSON{}
	return &this
}

// GetRecordDelimiter returns the RecordDelimiter field value if set, zero value otherwise.
func (o *OutputSerializationJSON) GetRecordDelimiter() string {
	if o == nil || IsNil(o.RecordDelimiter) {
		var ret string
		return ret
	}
	return *o.RecordDelimiter
}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputSerializationJSON) GetRecordDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.RecordDelimiter) {
		return nil, false
	}
	return o.RecordDelimiter, true
}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *OutputSerializationJSON) HasRecordDelimiter() bool {
	if o != nil && !IsNil(o.RecordDelimiter) {
		return true
	}

	return false
}

// SetRecordDelimiter gets a reference to the given string and assigns it to the RecordDelimiter field.
func (o *OutputSerializationJSON) SetRecordDelimiter(v string) {
	o.RecordDelimiter = &v
}

func (o OutputSerializationJSON) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputSerializationJSON) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordDelimiter) {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}
	return toSerialize, nil
}

type NullableOutputSerializationJSON struct {
	value *OutputSerializationJSON
	isSet bool
}

func (v NullableOutputSerializationJSON) Get() *OutputSerializationJSON {
	return v.value
}

func (v *NullableOutputSerializationJSON) Set(val *OutputSerializationJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputSerializationJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputSerializationJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputSerializationJSON(val *OutputSerializationJSON) *NullableOutputSerializationJSON {
	return &NullableOutputSerializationJSON{value: val, isSet: true}
}

func (v NullableOutputSerializationJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputSerializationJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


