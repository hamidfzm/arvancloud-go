/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// BucketCannedACL the model 'BucketCannedACL'
type BucketCannedACL string

// List of BucketCannedACL
const (
	BUCKETCANNEDACL_PRIVATE BucketCannedACL = "private"
	BUCKETCANNEDACL_PUBLIC_READ BucketCannedACL = "public-read"
	BUCKETCANNEDACL_PUBLIC_READ_WRITE BucketCannedACL = "public-read-write"
	BUCKETCANNEDACL_AUTHENTICATED_READ BucketCannedACL = "authenticated-read"
)

// All allowed values of BucketCannedACL enum
var AllowedBucketCannedACLEnumValues = []BucketCannedACL{
	"private",
	"public-read",
	"public-read-write",
	"authenticated-read",
}

func (v *BucketCannedACL) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BucketCannedACL(value)
	for _, existing := range AllowedBucketCannedACLEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BucketCannedACL", value)
}

// NewBucketCannedACLFromValue returns a pointer to a valid BucketCannedACL
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBucketCannedACLFromValue(v string) (*BucketCannedACL, error) {
	ev := BucketCannedACL(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BucketCannedACL: valid values are %v", v, AllowedBucketCannedACLEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BucketCannedACL) IsValid() bool {
	for _, existing := range AllowedBucketCannedACLEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BucketCannedACL value
func (v BucketCannedACL) Ptr() *BucketCannedACL {
	return &v
}

type NullableBucketCannedACL struct {
	value *BucketCannedACL
	isSet bool
}

func (v NullableBucketCannedACL) Get() *BucketCannedACL {
	return v.value
}

func (v *NullableBucketCannedACL) Set(val *BucketCannedACL) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketCannedACL) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketCannedACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketCannedACL(val *BucketCannedACL) *NullableBucketCannedACL {
	return &NullableBucketCannedACL{value: val, isSet: true}
}

func (v NullableBucketCannedACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketCannedACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

