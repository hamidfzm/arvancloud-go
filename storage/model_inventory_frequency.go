/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// InventoryFrequency the model 'InventoryFrequency'
type InventoryFrequency string

// List of InventoryFrequency
const (
	INVENTORYFREQUENCY_DAILY InventoryFrequency = "Daily"
	INVENTORYFREQUENCY_WEEKLY InventoryFrequency = "Weekly"
)

// All allowed values of InventoryFrequency enum
var AllowedInventoryFrequencyEnumValues = []InventoryFrequency{
	"Daily",
	"Weekly",
}

func (v *InventoryFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InventoryFrequency(value)
	for _, existing := range AllowedInventoryFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InventoryFrequency", value)
}

// NewInventoryFrequencyFromValue returns a pointer to a valid InventoryFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInventoryFrequencyFromValue(v string) (*InventoryFrequency, error) {
	ev := InventoryFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InventoryFrequency: valid values are %v", v, AllowedInventoryFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InventoryFrequency) IsValid() bool {
	for _, existing := range AllowedInventoryFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InventoryFrequency value
func (v InventoryFrequency) Ptr() *InventoryFrequency {
	return &v
}

type NullableInventoryFrequency struct {
	value *InventoryFrequency
	isSet bool
}

func (v NullableInventoryFrequency) Get() *InventoryFrequency {
	return v.value
}

func (v *NullableInventoryFrequency) Set(val *InventoryFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryFrequency(val *InventoryFrequency) *NullableInventoryFrequency {
	return &NullableInventoryFrequency{value: val, isSet: true}
}

func (v NullableInventoryFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

