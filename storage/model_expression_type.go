/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// ExpressionType the model 'ExpressionType'
type ExpressionType string

// List of ExpressionType
const (
	EXPRESSIONTYPE_SQL ExpressionType = "SQL"
)

// All allowed values of ExpressionType enum
var AllowedExpressionTypeEnumValues = []ExpressionType{
	"SQL",
}

func (v *ExpressionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpressionType(value)
	for _, existing := range AllowedExpressionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpressionType", value)
}

// NewExpressionTypeFromValue returns a pointer to a valid ExpressionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpressionTypeFromValue(v string) (*ExpressionType, error) {
	ev := ExpressionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpressionType: valid values are %v", v, AllowedExpressionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpressionType) IsValid() bool {
	for _, existing := range AllowedExpressionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpressionType value
func (v ExpressionType) Ptr() *ExpressionType {
	return &v
}

type NullableExpressionType struct {
	value *ExpressionType
	isSet bool
}

func (v NullableExpressionType) Get() *ExpressionType {
	return v.value
}

func (v *NullableExpressionType) Set(val *ExpressionType) {
	v.value = val
	v.isSet = true
}

func (v NullableExpressionType) IsSet() bool {
	return v.isSet
}

func (v *NullableExpressionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpressionType(val *ExpressionType) *NullableExpressionType {
	return &NullableExpressionType{value: val, isSet: true}
}

func (v NullableExpressionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpressionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

