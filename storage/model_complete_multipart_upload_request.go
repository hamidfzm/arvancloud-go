/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the CompleteMultipartUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteMultipartUploadRequest{}

// CompleteMultipartUploadRequest struct for CompleteMultipartUploadRequest
type CompleteMultipartUploadRequest struct {
	CompleteMultipartUpload *CompleteMultipartUploadRequestCompleteMultipartUpload `json:"CompleteMultipartUpload,omitempty"`
}

// NewCompleteMultipartUploadRequest instantiates a new CompleteMultipartUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteMultipartUploadRequest() *CompleteMultipartUploadRequest {
	this := CompleteMultipartUploadRequest{}
	return &this
}

// NewCompleteMultipartUploadRequestWithDefaults instantiates a new CompleteMultipartUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteMultipartUploadRequestWithDefaults() *CompleteMultipartUploadRequest {
	this := CompleteMultipartUploadRequest{}
	return &this
}

// GetCompleteMultipartUpload returns the CompleteMultipartUpload field value if set, zero value otherwise.
func (o *CompleteMultipartUploadRequest) GetCompleteMultipartUpload() CompleteMultipartUploadRequestCompleteMultipartUpload {
	if o == nil || IsNil(o.CompleteMultipartUpload) {
		var ret CompleteMultipartUploadRequestCompleteMultipartUpload
		return ret
	}
	return *o.CompleteMultipartUpload
}

// GetCompleteMultipartUploadOk returns a tuple with the CompleteMultipartUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteMultipartUploadRequest) GetCompleteMultipartUploadOk() (*CompleteMultipartUploadRequestCompleteMultipartUpload, bool) {
	if o == nil || IsNil(o.CompleteMultipartUpload) {
		return nil, false
	}
	return o.CompleteMultipartUpload, true
}

// HasCompleteMultipartUpload returns a boolean if a field has been set.
func (o *CompleteMultipartUploadRequest) HasCompleteMultipartUpload() bool {
	if o != nil && !IsNil(o.CompleteMultipartUpload) {
		return true
	}

	return false
}

// SetCompleteMultipartUpload gets a reference to the given CompleteMultipartUploadRequestCompleteMultipartUpload and assigns it to the CompleteMultipartUpload field.
func (o *CompleteMultipartUploadRequest) SetCompleteMultipartUpload(v CompleteMultipartUploadRequestCompleteMultipartUpload) {
	o.CompleteMultipartUpload = &v
}

func (o CompleteMultipartUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteMultipartUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompleteMultipartUpload) {
		toSerialize["CompleteMultipartUpload"] = o.CompleteMultipartUpload
	}
	return toSerialize, nil
}

type NullableCompleteMultipartUploadRequest struct {
	value *CompleteMultipartUploadRequest
	isSet bool
}

func (v NullableCompleteMultipartUploadRequest) Get() *CompleteMultipartUploadRequest {
	return v.value
}

func (v *NullableCompleteMultipartUploadRequest) Set(val *CompleteMultipartUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteMultipartUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteMultipartUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteMultipartUploadRequest(val *CompleteMultipartUploadRequest) *NullableCompleteMultipartUploadRequest {
	return &NullableCompleteMultipartUploadRequest{value: val, isSet: true}
}

func (v NullableCompleteMultipartUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteMultipartUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


