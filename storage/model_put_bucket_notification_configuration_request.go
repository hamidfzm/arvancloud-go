/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the PutBucketNotificationConfigurationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutBucketNotificationConfigurationRequest{}

// PutBucketNotificationConfigurationRequest struct for PutBucketNotificationConfigurationRequest
type PutBucketNotificationConfigurationRequest struct {
	NotificationConfiguration NotificationConfiguration `json:"NotificationConfiguration"`
}

// NewPutBucketNotificationConfigurationRequest instantiates a new PutBucketNotificationConfigurationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutBucketNotificationConfigurationRequest(notificationConfiguration NotificationConfiguration) *PutBucketNotificationConfigurationRequest {
	this := PutBucketNotificationConfigurationRequest{}
	this.NotificationConfiguration = notificationConfiguration
	return &this
}

// NewPutBucketNotificationConfigurationRequestWithDefaults instantiates a new PutBucketNotificationConfigurationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutBucketNotificationConfigurationRequestWithDefaults() *PutBucketNotificationConfigurationRequest {
	this := PutBucketNotificationConfigurationRequest{}
	return &this
}

// GetNotificationConfiguration returns the NotificationConfiguration field value
func (o *PutBucketNotificationConfigurationRequest) GetNotificationConfiguration() NotificationConfiguration {
	if o == nil {
		var ret NotificationConfiguration
		return ret
	}

	return o.NotificationConfiguration
}

// GetNotificationConfigurationOk returns a tuple with the NotificationConfiguration field value
// and a boolean to check if the value has been set.
func (o *PutBucketNotificationConfigurationRequest) GetNotificationConfigurationOk() (*NotificationConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationConfiguration, true
}

// SetNotificationConfiguration sets field value
func (o *PutBucketNotificationConfigurationRequest) SetNotificationConfiguration(v NotificationConfiguration) {
	o.NotificationConfiguration = v
}

func (o PutBucketNotificationConfigurationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutBucketNotificationConfigurationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["NotificationConfiguration"] = o.NotificationConfiguration
	return toSerialize, nil
}

type NullablePutBucketNotificationConfigurationRequest struct {
	value *PutBucketNotificationConfigurationRequest
	isSet bool
}

func (v NullablePutBucketNotificationConfigurationRequest) Get() *PutBucketNotificationConfigurationRequest {
	return v.value
}

func (v *NullablePutBucketNotificationConfigurationRequest) Set(val *PutBucketNotificationConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutBucketNotificationConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutBucketNotificationConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutBucketNotificationConfigurationRequest(val *PutBucketNotificationConfigurationRequest) *NullablePutBucketNotificationConfigurationRequest {
	return &NullablePutBucketNotificationConfigurationRequest{value: val, isSet: true}
}

func (v NullablePutBucketNotificationConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutBucketNotificationConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


