/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ObjectLockRuleDefaultRetention type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectLockRuleDefaultRetention{}

// ObjectLockRuleDefaultRetention struct for ObjectLockRuleDefaultRetention
type ObjectLockRuleDefaultRetention struct {
	Mode *ObjectLockRetentionMode `json:"Mode,omitempty"`
	Days *int32 `json:"Days,omitempty"`
	Years *int32 `json:"Years,omitempty"`
}

// NewObjectLockRuleDefaultRetention instantiates a new ObjectLockRuleDefaultRetention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectLockRuleDefaultRetention() *ObjectLockRuleDefaultRetention {
	this := ObjectLockRuleDefaultRetention{}
	return &this
}

// NewObjectLockRuleDefaultRetentionWithDefaults instantiates a new ObjectLockRuleDefaultRetention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectLockRuleDefaultRetentionWithDefaults() *ObjectLockRuleDefaultRetention {
	this := ObjectLockRuleDefaultRetention{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ObjectLockRuleDefaultRetention) GetMode() ObjectLockRetentionMode {
	if o == nil || IsNil(o.Mode) {
		var ret ObjectLockRetentionMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectLockRuleDefaultRetention) GetModeOk() (*ObjectLockRetentionMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ObjectLockRuleDefaultRetention) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given ObjectLockRetentionMode and assigns it to the Mode field.
func (o *ObjectLockRuleDefaultRetention) SetMode(v ObjectLockRetentionMode) {
	o.Mode = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *ObjectLockRuleDefaultRetention) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectLockRuleDefaultRetention) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *ObjectLockRuleDefaultRetention) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *ObjectLockRuleDefaultRetention) SetDays(v int32) {
	o.Days = &v
}

// GetYears returns the Years field value if set, zero value otherwise.
func (o *ObjectLockRuleDefaultRetention) GetYears() int32 {
	if o == nil || IsNil(o.Years) {
		var ret int32
		return ret
	}
	return *o.Years
}

// GetYearsOk returns a tuple with the Years field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectLockRuleDefaultRetention) GetYearsOk() (*int32, bool) {
	if o == nil || IsNil(o.Years) {
		return nil, false
	}
	return o.Years, true
}

// HasYears returns a boolean if a field has been set.
func (o *ObjectLockRuleDefaultRetention) HasYears() bool {
	if o != nil && !IsNil(o.Years) {
		return true
	}

	return false
}

// SetYears gets a reference to the given int32 and assigns it to the Years field.
func (o *ObjectLockRuleDefaultRetention) SetYears(v int32) {
	o.Years = &v
}

func (o ObjectLockRuleDefaultRetention) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectLockRuleDefaultRetention) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.Days) {
		toSerialize["Days"] = o.Days
	}
	if !IsNil(o.Years) {
		toSerialize["Years"] = o.Years
	}
	return toSerialize, nil
}

type NullableObjectLockRuleDefaultRetention struct {
	value *ObjectLockRuleDefaultRetention
	isSet bool
}

func (v NullableObjectLockRuleDefaultRetention) Get() *ObjectLockRuleDefaultRetention {
	return v.value
}

func (v *NullableObjectLockRuleDefaultRetention) Set(val *ObjectLockRuleDefaultRetention) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectLockRuleDefaultRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectLockRuleDefaultRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectLockRuleDefaultRetention(val *ObjectLockRuleDefaultRetention) *NullableObjectLockRuleDefaultRetention {
	return &NullableObjectLockRuleDefaultRetention{value: val, isSet: true}
}

func (v NullableObjectLockRuleDefaultRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectLockRuleDefaultRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


