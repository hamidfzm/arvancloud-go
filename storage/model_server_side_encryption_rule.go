/*
ArvanCloud S3 Services

<p/>

API version: 2006-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ServerSideEncryptionRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerSideEncryptionRule{}

// ServerSideEncryptionRule Specifies the default server-side encryption configuration.
type ServerSideEncryptionRule struct {
	ApplyServerSideEncryptionByDefault *ServerSideEncryptionRuleApplyServerSideEncryptionByDefault `json:"ApplyServerSideEncryptionByDefault,omitempty"`
	BucketKeyEnabled *bool `json:"BucketKeyEnabled,omitempty"`
}

// NewServerSideEncryptionRule instantiates a new ServerSideEncryptionRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSideEncryptionRule() *ServerSideEncryptionRule {
	this := ServerSideEncryptionRule{}
	return &this
}

// NewServerSideEncryptionRuleWithDefaults instantiates a new ServerSideEncryptionRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSideEncryptionRuleWithDefaults() *ServerSideEncryptionRule {
	this := ServerSideEncryptionRule{}
	return &this
}

// GetApplyServerSideEncryptionByDefault returns the ApplyServerSideEncryptionByDefault field value if set, zero value otherwise.
func (o *ServerSideEncryptionRule) GetApplyServerSideEncryptionByDefault() ServerSideEncryptionRuleApplyServerSideEncryptionByDefault {
	if o == nil || IsNil(o.ApplyServerSideEncryptionByDefault) {
		var ret ServerSideEncryptionRuleApplyServerSideEncryptionByDefault
		return ret
	}
	return *o.ApplyServerSideEncryptionByDefault
}

// GetApplyServerSideEncryptionByDefaultOk returns a tuple with the ApplyServerSideEncryptionByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSideEncryptionRule) GetApplyServerSideEncryptionByDefaultOk() (*ServerSideEncryptionRuleApplyServerSideEncryptionByDefault, bool) {
	if o == nil || IsNil(o.ApplyServerSideEncryptionByDefault) {
		return nil, false
	}
	return o.ApplyServerSideEncryptionByDefault, true
}

// HasApplyServerSideEncryptionByDefault returns a boolean if a field has been set.
func (o *ServerSideEncryptionRule) HasApplyServerSideEncryptionByDefault() bool {
	if o != nil && !IsNil(o.ApplyServerSideEncryptionByDefault) {
		return true
	}

	return false
}

// SetApplyServerSideEncryptionByDefault gets a reference to the given ServerSideEncryptionRuleApplyServerSideEncryptionByDefault and assigns it to the ApplyServerSideEncryptionByDefault field.
func (o *ServerSideEncryptionRule) SetApplyServerSideEncryptionByDefault(v ServerSideEncryptionRuleApplyServerSideEncryptionByDefault) {
	o.ApplyServerSideEncryptionByDefault = &v
}

// GetBucketKeyEnabled returns the BucketKeyEnabled field value if set, zero value otherwise.
func (o *ServerSideEncryptionRule) GetBucketKeyEnabled() bool {
	if o == nil || IsNil(o.BucketKeyEnabled) {
		var ret bool
		return ret
	}
	return *o.BucketKeyEnabled
}

// GetBucketKeyEnabledOk returns a tuple with the BucketKeyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSideEncryptionRule) GetBucketKeyEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BucketKeyEnabled) {
		return nil, false
	}
	return o.BucketKeyEnabled, true
}

// HasBucketKeyEnabled returns a boolean if a field has been set.
func (o *ServerSideEncryptionRule) HasBucketKeyEnabled() bool {
	if o != nil && !IsNil(o.BucketKeyEnabled) {
		return true
	}

	return false
}

// SetBucketKeyEnabled gets a reference to the given bool and assigns it to the BucketKeyEnabled field.
func (o *ServerSideEncryptionRule) SetBucketKeyEnabled(v bool) {
	o.BucketKeyEnabled = &v
}

func (o ServerSideEncryptionRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerSideEncryptionRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplyServerSideEncryptionByDefault) {
		toSerialize["ApplyServerSideEncryptionByDefault"] = o.ApplyServerSideEncryptionByDefault
	}
	if !IsNil(o.BucketKeyEnabled) {
		toSerialize["BucketKeyEnabled"] = o.BucketKeyEnabled
	}
	return toSerialize, nil
}

type NullableServerSideEncryptionRule struct {
	value *ServerSideEncryptionRule
	isSet bool
}

func (v NullableServerSideEncryptionRule) Get() *ServerSideEncryptionRule {
	return v.value
}

func (v *NullableServerSideEncryptionRule) Set(val *ServerSideEncryptionRule) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSideEncryptionRule) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSideEncryptionRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSideEncryptionRule(val *ServerSideEncryptionRule) *NullableServerSideEncryptionRule {
	return &NullableServerSideEncryptionRule{value: val, isSet: true}
}

func (v NullableServerSideEncryptionRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSideEncryptionRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


