/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the ChartCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartCollection{}

// ChartCollection struct for ChartCollection
type ChartCollection struct {
	Cpu *Chart `json:"cpu,omitempty"`
	Disk *Chart `json:"disk,omitempty"`
	Network *Chart `json:"network,omitempty"`
	Ram *Chart `json:"ram,omitempty"`
	Statistics []string `json:"statistics,omitempty"`
}

// NewChartCollection instantiates a new ChartCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartCollection() *ChartCollection {
	this := ChartCollection{}
	return &this
}

// NewChartCollectionWithDefaults instantiates a new ChartCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartCollectionWithDefaults() *ChartCollection {
	this := ChartCollection{}
	return &this
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *ChartCollection) GetCpu() Chart {
	if o == nil || IsNil(o.Cpu) {
		var ret Chart
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartCollection) GetCpuOk() (*Chart, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *ChartCollection) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given Chart and assigns it to the Cpu field.
func (o *ChartCollection) SetCpu(v Chart) {
	o.Cpu = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *ChartCollection) GetDisk() Chart {
	if o == nil || IsNil(o.Disk) {
		var ret Chart
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartCollection) GetDiskOk() (*Chart, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *ChartCollection) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given Chart and assigns it to the Disk field.
func (o *ChartCollection) SetDisk(v Chart) {
	o.Disk = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *ChartCollection) GetNetwork() Chart {
	if o == nil || IsNil(o.Network) {
		var ret Chart
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartCollection) GetNetworkOk() (*Chart, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *ChartCollection) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given Chart and assigns it to the Network field.
func (o *ChartCollection) SetNetwork(v Chart) {
	o.Network = &v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *ChartCollection) GetRam() Chart {
	if o == nil || IsNil(o.Ram) {
		var ret Chart
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartCollection) GetRamOk() (*Chart, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *ChartCollection) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given Chart and assigns it to the Ram field.
func (o *ChartCollection) SetRam(v Chart) {
	o.Ram = &v
}

// GetStatistics returns the Statistics field value if set, zero value otherwise.
func (o *ChartCollection) GetStatistics() []string {
	if o == nil || IsNil(o.Statistics) {
		var ret []string
		return ret
	}
	return o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartCollection) GetStatisticsOk() ([]string, bool) {
	if o == nil || IsNil(o.Statistics) {
		return nil, false
	}
	return o.Statistics, true
}

// HasStatistics returns a boolean if a field has been set.
func (o *ChartCollection) HasStatistics() bool {
	if o != nil && !IsNil(o.Statistics) {
		return true
	}

	return false
}

// SetStatistics gets a reference to the given []string and assigns it to the Statistics field.
func (o *ChartCollection) SetStatistics(v []string) {
	o.Statistics = v
}

func (o ChartCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if !IsNil(o.Statistics) {
		toSerialize["statistics"] = o.Statistics
	}
	return toSerialize, nil
}

type NullableChartCollection struct {
	value *ChartCollection
	isSet bool
}

func (v NullableChartCollection) Get() *ChartCollection {
	return v.value
}

func (v *NullableChartCollection) Set(val *ChartCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableChartCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableChartCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartCollection(val *ChartCollection) *NullableChartCollection {
	return &NullableChartCollection{value: val, isSet: true}
}

func (v NullableChartCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


