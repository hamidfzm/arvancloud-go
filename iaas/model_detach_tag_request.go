/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the DetachTagRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetachTagRequest{}

// DetachTagRequest struct for DetachTagRequest
type DetachTagRequest struct {
	InstanceId *string `json:"instance_id,omitempty"`
	// describes the type of resource, values: `server`, `network`, `image`, `volume`, `float_ip`, `security_group`
	InstanceType *string `json:"instance_type,omitempty"`
}

// NewDetachTagRequest instantiates a new DetachTagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetachTagRequest() *DetachTagRequest {
	this := DetachTagRequest{}
	return &this
}

// NewDetachTagRequestWithDefaults instantiates a new DetachTagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetachTagRequestWithDefaults() *DetachTagRequest {
	this := DetachTagRequest{}
	return &this
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *DetachTagRequest) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetachTagRequest) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *DetachTagRequest) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *DetachTagRequest) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *DetachTagRequest) GetInstanceType() string {
	if o == nil || IsNil(o.InstanceType) {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetachTagRequest) GetInstanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceType) {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *DetachTagRequest) HasInstanceType() bool {
	if o != nil && !IsNil(o.InstanceType) {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *DetachTagRequest) SetInstanceType(v string) {
	o.InstanceType = &v
}

func (o DetachTagRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetachTagRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstanceId) {
		toSerialize["instance_id"] = o.InstanceId
	}
	if !IsNil(o.InstanceType) {
		toSerialize["instance_type"] = o.InstanceType
	}
	return toSerialize, nil
}

type NullableDetachTagRequest struct {
	value *DetachTagRequest
	isSet bool
}

func (v NullableDetachTagRequest) Get() *DetachTagRequest {
	return v.value
}

func (v *NullableDetachTagRequest) Set(val *DetachTagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDetachTagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDetachTagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetachTagRequest(val *DetachTagRequest) *NullableDetachTagRequest {
	return &NullableDetachTagRequest{value: val, isSet: true}
}

func (v NullableDetachTagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetachTagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


