/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the PublicIP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicIP{}

// PublicIP struct for PublicIP
type PublicIP struct {
	IpAddress *string `json:"ip_address,omitempty"`
	SubnetId *string `json:"subnet_id,omitempty"`
}

// NewPublicIP instantiates a new PublicIP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicIP() *PublicIP {
	this := PublicIP{}
	return &this
}

// NewPublicIPWithDefaults instantiates a new PublicIP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicIPWithDefaults() *PublicIP {
	this := PublicIP{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *PublicIP) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicIP) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *PublicIP) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *PublicIP) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *PublicIP) GetSubnetId() string {
	if o == nil || IsNil(o.SubnetId) {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicIP) GetSubnetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetId) {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *PublicIP) HasSubnetId() bool {
	if o != nil && !IsNil(o.SubnetId) {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *PublicIP) SetSubnetId(v string) {
	o.SubnetId = &v
}

func (o PublicIP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicIP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.SubnetId) {
		toSerialize["subnet_id"] = o.SubnetId
	}
	return toSerialize, nil
}

type NullablePublicIP struct {
	value *PublicIP
	isSet bool
}

func (v NullablePublicIP) Get() *PublicIP {
	return v.value
}

func (v *NullablePublicIP) Set(val *PublicIP) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicIP) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicIP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicIP(val *PublicIP) *NullablePublicIP {
	return &NullablePublicIP{value: val, isSet: true}
}

func (v NullablePublicIP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicIP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


