/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the VolumeOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeOptions{}

// VolumeOptions struct for VolumeOptions
type VolumeOptions struct {
	IopsPerGig *IOPSAndThroughput `json:"iops_per_gig,omitempty"`
	IopsSecMax *MaxIOPSAndThroughput `json:"iops_sec_max,omitempty"`
	ThroughputKbPerGig *IOPSAndThroughput `json:"throughput_kb_per_gig,omitempty"`
	ThroughputSecMax *MaxIOPSAndThroughput `json:"throughput_sec_max,omitempty"`
	ThroughputSecMin *IOPSAndThroughput `json:"throughput_sec_min,omitempty"`
}

// NewVolumeOptions instantiates a new VolumeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeOptions() *VolumeOptions {
	this := VolumeOptions{}
	return &this
}

// NewVolumeOptionsWithDefaults instantiates a new VolumeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeOptionsWithDefaults() *VolumeOptions {
	this := VolumeOptions{}
	return &this
}

// GetIopsPerGig returns the IopsPerGig field value if set, zero value otherwise.
func (o *VolumeOptions) GetIopsPerGig() IOPSAndThroughput {
	if o == nil || IsNil(o.IopsPerGig) {
		var ret IOPSAndThroughput
		return ret
	}
	return *o.IopsPerGig
}

// GetIopsPerGigOk returns a tuple with the IopsPerGig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeOptions) GetIopsPerGigOk() (*IOPSAndThroughput, bool) {
	if o == nil || IsNil(o.IopsPerGig) {
		return nil, false
	}
	return o.IopsPerGig, true
}

// HasIopsPerGig returns a boolean if a field has been set.
func (o *VolumeOptions) HasIopsPerGig() bool {
	if o != nil && !IsNil(o.IopsPerGig) {
		return true
	}

	return false
}

// SetIopsPerGig gets a reference to the given IOPSAndThroughput and assigns it to the IopsPerGig field.
func (o *VolumeOptions) SetIopsPerGig(v IOPSAndThroughput) {
	o.IopsPerGig = &v
}

// GetIopsSecMax returns the IopsSecMax field value if set, zero value otherwise.
func (o *VolumeOptions) GetIopsSecMax() MaxIOPSAndThroughput {
	if o == nil || IsNil(o.IopsSecMax) {
		var ret MaxIOPSAndThroughput
		return ret
	}
	return *o.IopsSecMax
}

// GetIopsSecMaxOk returns a tuple with the IopsSecMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeOptions) GetIopsSecMaxOk() (*MaxIOPSAndThroughput, bool) {
	if o == nil || IsNil(o.IopsSecMax) {
		return nil, false
	}
	return o.IopsSecMax, true
}

// HasIopsSecMax returns a boolean if a field has been set.
func (o *VolumeOptions) HasIopsSecMax() bool {
	if o != nil && !IsNil(o.IopsSecMax) {
		return true
	}

	return false
}

// SetIopsSecMax gets a reference to the given MaxIOPSAndThroughput and assigns it to the IopsSecMax field.
func (o *VolumeOptions) SetIopsSecMax(v MaxIOPSAndThroughput) {
	o.IopsSecMax = &v
}

// GetThroughputKbPerGig returns the ThroughputKbPerGig field value if set, zero value otherwise.
func (o *VolumeOptions) GetThroughputKbPerGig() IOPSAndThroughput {
	if o == nil || IsNil(o.ThroughputKbPerGig) {
		var ret IOPSAndThroughput
		return ret
	}
	return *o.ThroughputKbPerGig
}

// GetThroughputKbPerGigOk returns a tuple with the ThroughputKbPerGig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeOptions) GetThroughputKbPerGigOk() (*IOPSAndThroughput, bool) {
	if o == nil || IsNil(o.ThroughputKbPerGig) {
		return nil, false
	}
	return o.ThroughputKbPerGig, true
}

// HasThroughputKbPerGig returns a boolean if a field has been set.
func (o *VolumeOptions) HasThroughputKbPerGig() bool {
	if o != nil && !IsNil(o.ThroughputKbPerGig) {
		return true
	}

	return false
}

// SetThroughputKbPerGig gets a reference to the given IOPSAndThroughput and assigns it to the ThroughputKbPerGig field.
func (o *VolumeOptions) SetThroughputKbPerGig(v IOPSAndThroughput) {
	o.ThroughputKbPerGig = &v
}

// GetThroughputSecMax returns the ThroughputSecMax field value if set, zero value otherwise.
func (o *VolumeOptions) GetThroughputSecMax() MaxIOPSAndThroughput {
	if o == nil || IsNil(o.ThroughputSecMax) {
		var ret MaxIOPSAndThroughput
		return ret
	}
	return *o.ThroughputSecMax
}

// GetThroughputSecMaxOk returns a tuple with the ThroughputSecMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeOptions) GetThroughputSecMaxOk() (*MaxIOPSAndThroughput, bool) {
	if o == nil || IsNil(o.ThroughputSecMax) {
		return nil, false
	}
	return o.ThroughputSecMax, true
}

// HasThroughputSecMax returns a boolean if a field has been set.
func (o *VolumeOptions) HasThroughputSecMax() bool {
	if o != nil && !IsNil(o.ThroughputSecMax) {
		return true
	}

	return false
}

// SetThroughputSecMax gets a reference to the given MaxIOPSAndThroughput and assigns it to the ThroughputSecMax field.
func (o *VolumeOptions) SetThroughputSecMax(v MaxIOPSAndThroughput) {
	o.ThroughputSecMax = &v
}

// GetThroughputSecMin returns the ThroughputSecMin field value if set, zero value otherwise.
func (o *VolumeOptions) GetThroughputSecMin() IOPSAndThroughput {
	if o == nil || IsNil(o.ThroughputSecMin) {
		var ret IOPSAndThroughput
		return ret
	}
	return *o.ThroughputSecMin
}

// GetThroughputSecMinOk returns a tuple with the ThroughputSecMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeOptions) GetThroughputSecMinOk() (*IOPSAndThroughput, bool) {
	if o == nil || IsNil(o.ThroughputSecMin) {
		return nil, false
	}
	return o.ThroughputSecMin, true
}

// HasThroughputSecMin returns a boolean if a field has been set.
func (o *VolumeOptions) HasThroughputSecMin() bool {
	if o != nil && !IsNil(o.ThroughputSecMin) {
		return true
	}

	return false
}

// SetThroughputSecMin gets a reference to the given IOPSAndThroughput and assigns it to the ThroughputSecMin field.
func (o *VolumeOptions) SetThroughputSecMin(v IOPSAndThroughput) {
	o.ThroughputSecMin = &v
}

func (o VolumeOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IopsPerGig) {
		toSerialize["iops_per_gig"] = o.IopsPerGig
	}
	if !IsNil(o.IopsSecMax) {
		toSerialize["iops_sec_max"] = o.IopsSecMax
	}
	if !IsNil(o.ThroughputKbPerGig) {
		toSerialize["throughput_kb_per_gig"] = o.ThroughputKbPerGig
	}
	if !IsNil(o.ThroughputSecMax) {
		toSerialize["throughput_sec_max"] = o.ThroughputSecMax
	}
	if !IsNil(o.ThroughputSecMin) {
		toSerialize["throughput_sec_min"] = o.ThroughputSecMin
	}
	return toSerialize, nil
}

type NullableVolumeOptions struct {
	value *VolumeOptions
	isSet bool
}

func (v NullableVolumeOptions) Get() *VolumeOptions {
	return v.value
}

func (v *NullableVolumeOptions) Set(val *VolumeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeOptions(val *VolumeOptions) *NullableVolumeOptions {
	return &NullableVolumeOptions{value: val, isSet: true}
}

func (v NullableVolumeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


