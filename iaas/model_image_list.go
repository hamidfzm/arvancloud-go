/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the ImageList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageList{}

// ImageList struct for ImageList
type ImageList struct {
	Display *bool `json:"display,omitempty"`
	Images []ImgDistributionItem `json:"images,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewImageList instantiates a new ImageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageList() *ImageList {
	this := ImageList{}
	return &this
}

// NewImageListWithDefaults instantiates a new ImageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageListWithDefaults() *ImageList {
	this := ImageList{}
	return &this
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *ImageList) GetDisplay() bool {
	if o == nil || IsNil(o.Display) {
		var ret bool
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetDisplayOk() (*bool, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *ImageList) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given bool and assigns it to the Display field.
func (o *ImageList) SetDisplay(v bool) {
	o.Display = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ImageList) GetImages() []ImgDistributionItem {
	if o == nil || IsNil(o.Images) {
		var ret []ImgDistributionItem
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetImagesOk() ([]ImgDistributionItem, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ImageList) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImgDistributionItem and assigns it to the Images field.
func (o *ImageList) SetImages(v []ImgDistributionItem) {
	o.Images = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImageList) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageList) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImageList) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImageList) SetName(v string) {
	o.Name = &v
}

func (o ImageList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableImageList struct {
	value *ImageList
	isSet bool
}

func (v NullableImageList) Get() *ImageList {
	return v.value
}

func (v *NullableImageList) Set(val *ImageList) {
	v.value = val
	v.isSet = true
}

func (v NullableImageList) IsSet() bool {
	return v.isSet
}

func (v *NullableImageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageList(val *ImageList) *NullableImageList {
	return &NullableImageList{value: val, isSet: true}
}

func (v NullableImageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


