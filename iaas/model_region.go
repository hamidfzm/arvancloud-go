/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the Region type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Region{}

// Region struct for Region
type Region struct {
	Beta *bool `json:"beta,omitempty"`
	City *string `json:"city,omitempty"`
	CityCode *string `json:"city_code,omitempty"`
	Code *string `json:"code,omitempty"`
	Country *string `json:"country,omitempty"`
	Create *bool `json:"create,omitempty"`
	Dc *string `json:"dc,omitempty"`
	DcCode *string `json:"dc_code,omitempty"`
	Default *bool `json:"default,omitempty"`
	Flag *string `json:"flag,omitempty"`
	New *bool `json:"new,omitempty"`
	Region *string `json:"region,omitempty"`
	Soon *bool `json:"soon,omitempty"`
	Visible *bool `json:"visible,omitempty"`
	VolumeBacked *bool `json:"volume_backed,omitempty"`
}

// NewRegion instantiates a new Region object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion() *Region {
	this := Region{}
	return &this
}

// NewRegionWithDefaults instantiates a new Region object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	this := Region{}
	return &this
}

// GetBeta returns the Beta field value if set, zero value otherwise.
func (o *Region) GetBeta() bool {
	if o == nil || IsNil(o.Beta) {
		var ret bool
		return ret
	}
	return *o.Beta
}

// GetBetaOk returns a tuple with the Beta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetBetaOk() (*bool, bool) {
	if o == nil || IsNil(o.Beta) {
		return nil, false
	}
	return o.Beta, true
}

// HasBeta returns a boolean if a field has been set.
func (o *Region) HasBeta() bool {
	if o != nil && !IsNil(o.Beta) {
		return true
	}

	return false
}

// SetBeta gets a reference to the given bool and assigns it to the Beta field.
func (o *Region) SetBeta(v bool) {
	o.Beta = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Region) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Region) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Region) SetCity(v string) {
	o.City = &v
}

// GetCityCode returns the CityCode field value if set, zero value otherwise.
func (o *Region) GetCityCode() string {
	if o == nil || IsNil(o.CityCode) {
		var ret string
		return ret
	}
	return *o.CityCode
}

// GetCityCodeOk returns a tuple with the CityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetCityCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CityCode) {
		return nil, false
	}
	return o.CityCode, true
}

// HasCityCode returns a boolean if a field has been set.
func (o *Region) HasCityCode() bool {
	if o != nil && !IsNil(o.CityCode) {
		return true
	}

	return false
}

// SetCityCode gets a reference to the given string and assigns it to the CityCode field.
func (o *Region) SetCityCode(v string) {
	o.CityCode = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Region) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Region) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Region) SetCode(v string) {
	o.Code = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Region) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Region) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Region) SetCountry(v string) {
	o.Country = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *Region) GetCreate() bool {
	if o == nil || IsNil(o.Create) {
		var ret bool
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *Region) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given bool and assigns it to the Create field.
func (o *Region) SetCreate(v bool) {
	o.Create = &v
}

// GetDc returns the Dc field value if set, zero value otherwise.
func (o *Region) GetDc() string {
	if o == nil || IsNil(o.Dc) {
		var ret string
		return ret
	}
	return *o.Dc
}

// GetDcOk returns a tuple with the Dc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetDcOk() (*string, bool) {
	if o == nil || IsNil(o.Dc) {
		return nil, false
	}
	return o.Dc, true
}

// HasDc returns a boolean if a field has been set.
func (o *Region) HasDc() bool {
	if o != nil && !IsNil(o.Dc) {
		return true
	}

	return false
}

// SetDc gets a reference to the given string and assigns it to the Dc field.
func (o *Region) SetDc(v string) {
	o.Dc = &v
}

// GetDcCode returns the DcCode field value if set, zero value otherwise.
func (o *Region) GetDcCode() string {
	if o == nil || IsNil(o.DcCode) {
		var ret string
		return ret
	}
	return *o.DcCode
}

// GetDcCodeOk returns a tuple with the DcCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetDcCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DcCode) {
		return nil, false
	}
	return o.DcCode, true
}

// HasDcCode returns a boolean if a field has been set.
func (o *Region) HasDcCode() bool {
	if o != nil && !IsNil(o.DcCode) {
		return true
	}

	return false
}

// SetDcCode gets a reference to the given string and assigns it to the DcCode field.
func (o *Region) SetDcCode(v string) {
	o.DcCode = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Region) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Region) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *Region) SetDefault(v bool) {
	o.Default = &v
}

// GetFlag returns the Flag field value if set, zero value otherwise.
func (o *Region) GetFlag() string {
	if o == nil || IsNil(o.Flag) {
		var ret string
		return ret
	}
	return *o.Flag
}

// GetFlagOk returns a tuple with the Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetFlagOk() (*string, bool) {
	if o == nil || IsNil(o.Flag) {
		return nil, false
	}
	return o.Flag, true
}

// HasFlag returns a boolean if a field has been set.
func (o *Region) HasFlag() bool {
	if o != nil && !IsNil(o.Flag) {
		return true
	}

	return false
}

// SetFlag gets a reference to the given string and assigns it to the Flag field.
func (o *Region) SetFlag(v string) {
	o.Flag = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *Region) GetNew() bool {
	if o == nil || IsNil(o.New) {
		var ret bool
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetNewOk() (*bool, bool) {
	if o == nil || IsNil(o.New) {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *Region) HasNew() bool {
	if o != nil && !IsNil(o.New) {
		return true
	}

	return false
}

// SetNew gets a reference to the given bool and assigns it to the New field.
func (o *Region) SetNew(v bool) {
	o.New = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Region) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Region) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Region) SetRegion(v string) {
	o.Region = &v
}

// GetSoon returns the Soon field value if set, zero value otherwise.
func (o *Region) GetSoon() bool {
	if o == nil || IsNil(o.Soon) {
		var ret bool
		return ret
	}
	return *o.Soon
}

// GetSoonOk returns a tuple with the Soon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetSoonOk() (*bool, bool) {
	if o == nil || IsNil(o.Soon) {
		return nil, false
	}
	return o.Soon, true
}

// HasSoon returns a boolean if a field has been set.
func (o *Region) HasSoon() bool {
	if o != nil && !IsNil(o.Soon) {
		return true
	}

	return false
}

// SetSoon gets a reference to the given bool and assigns it to the Soon field.
func (o *Region) SetSoon(v bool) {
	o.Soon = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *Region) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *Region) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *Region) SetVisible(v bool) {
	o.Visible = &v
}

// GetVolumeBacked returns the VolumeBacked field value if set, zero value otherwise.
func (o *Region) GetVolumeBacked() bool {
	if o == nil || IsNil(o.VolumeBacked) {
		var ret bool
		return ret
	}
	return *o.VolumeBacked
}

// GetVolumeBackedOk returns a tuple with the VolumeBacked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetVolumeBackedOk() (*bool, bool) {
	if o == nil || IsNil(o.VolumeBacked) {
		return nil, false
	}
	return o.VolumeBacked, true
}

// HasVolumeBacked returns a boolean if a field has been set.
func (o *Region) HasVolumeBacked() bool {
	if o != nil && !IsNil(o.VolumeBacked) {
		return true
	}

	return false
}

// SetVolumeBacked gets a reference to the given bool and assigns it to the VolumeBacked field.
func (o *Region) SetVolumeBacked(v bool) {
	o.VolumeBacked = &v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Region) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Beta) {
		toSerialize["beta"] = o.Beta
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.CityCode) {
		toSerialize["city_code"] = o.CityCode
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Dc) {
		toSerialize["dc"] = o.Dc
	}
	if !IsNil(o.DcCode) {
		toSerialize["dc_code"] = o.DcCode
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Flag) {
		toSerialize["flag"] = o.Flag
	}
	if !IsNil(o.New) {
		toSerialize["new"] = o.New
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Soon) {
		toSerialize["soon"] = o.Soon
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.VolumeBacked) {
		toSerialize["volume_backed"] = o.VolumeBacked
	}
	return toSerialize, nil
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


