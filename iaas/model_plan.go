/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the Plan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plan{}

// Plan struct for Plan
type Plan struct {
	BandwidthInBytes *int64 `json:"bandwidth_in_bytes,omitempty"`
	BasePackage *string `json:"base_package,omitempty"`
	Canary *bool `json:"canary,omitempty"`
	CpuCount *int64 `json:"cpu_count,omitempty"`
	CpuShare *string `json:"cpu_share,omitempty"`
	CreateType *string `json:"create_type,omitempty"`
	Disk *int64 `json:"disk,omitempty"`
	DiskInBytes *int64 `json:"disk_in_bytes,omitempty"`
	Generation *string `json:"generation,omitempty"`
	Id *string `json:"id,omitempty"`
	IopsMaxHdd *int64 `json:"iops_max_hdd,omitempty"`
	IopsMaxSsd *int64 `json:"iops_max_ssd,omitempty"`
	Memory *float64 `json:"memory,omitempty"`
	MemoryInBytes *int64 `json:"memory_in_bytes,omitempty"`
	Name *string `json:"name,omitempty"`
	Off *string `json:"off,omitempty"`
	OffPercent *string `json:"off_percent,omitempty"`
	Order *string `json:"order,omitempty"`
	Outbound *int64 `json:"outbound,omitempty"`
	PortSpeed *float64 `json:"port_speed,omitempty"`
	Pps []int64 `json:"pps,omitempty"`
	PricePerHour *int64 `json:"price_per_hour,omitempty"`
	PricePerMonth *int64 `json:"price_per_month,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
	Throughput *int64 `json:"throughput,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan() *Plan {
	this := Plan{}
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	return &this
}

// GetBandwidthInBytes returns the BandwidthInBytes field value if set, zero value otherwise.
func (o *Plan) GetBandwidthInBytes() int64 {
	if o == nil || IsNil(o.BandwidthInBytes) {
		var ret int64
		return ret
	}
	return *o.BandwidthInBytes
}

// GetBandwidthInBytesOk returns a tuple with the BandwidthInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetBandwidthInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.BandwidthInBytes) {
		return nil, false
	}
	return o.BandwidthInBytes, true
}

// HasBandwidthInBytes returns a boolean if a field has been set.
func (o *Plan) HasBandwidthInBytes() bool {
	if o != nil && !IsNil(o.BandwidthInBytes) {
		return true
	}

	return false
}

// SetBandwidthInBytes gets a reference to the given int64 and assigns it to the BandwidthInBytes field.
func (o *Plan) SetBandwidthInBytes(v int64) {
	o.BandwidthInBytes = &v
}

// GetBasePackage returns the BasePackage field value if set, zero value otherwise.
func (o *Plan) GetBasePackage() string {
	if o == nil || IsNil(o.BasePackage) {
		var ret string
		return ret
	}
	return *o.BasePackage
}

// GetBasePackageOk returns a tuple with the BasePackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetBasePackageOk() (*string, bool) {
	if o == nil || IsNil(o.BasePackage) {
		return nil, false
	}
	return o.BasePackage, true
}

// HasBasePackage returns a boolean if a field has been set.
func (o *Plan) HasBasePackage() bool {
	if o != nil && !IsNil(o.BasePackage) {
		return true
	}

	return false
}

// SetBasePackage gets a reference to the given string and assigns it to the BasePackage field.
func (o *Plan) SetBasePackage(v string) {
	o.BasePackage = &v
}

// GetCanary returns the Canary field value if set, zero value otherwise.
func (o *Plan) GetCanary() bool {
	if o == nil || IsNil(o.Canary) {
		var ret bool
		return ret
	}
	return *o.Canary
}

// GetCanaryOk returns a tuple with the Canary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetCanaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Canary) {
		return nil, false
	}
	return o.Canary, true
}

// HasCanary returns a boolean if a field has been set.
func (o *Plan) HasCanary() bool {
	if o != nil && !IsNil(o.Canary) {
		return true
	}

	return false
}

// SetCanary gets a reference to the given bool and assigns it to the Canary field.
func (o *Plan) SetCanary(v bool) {
	o.Canary = &v
}

// GetCpuCount returns the CpuCount field value if set, zero value otherwise.
func (o *Plan) GetCpuCount() int64 {
	if o == nil || IsNil(o.CpuCount) {
		var ret int64
		return ret
	}
	return *o.CpuCount
}

// GetCpuCountOk returns a tuple with the CpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetCpuCountOk() (*int64, bool) {
	if o == nil || IsNil(o.CpuCount) {
		return nil, false
	}
	return o.CpuCount, true
}

// HasCpuCount returns a boolean if a field has been set.
func (o *Plan) HasCpuCount() bool {
	if o != nil && !IsNil(o.CpuCount) {
		return true
	}

	return false
}

// SetCpuCount gets a reference to the given int64 and assigns it to the CpuCount field.
func (o *Plan) SetCpuCount(v int64) {
	o.CpuCount = &v
}

// GetCpuShare returns the CpuShare field value if set, zero value otherwise.
func (o *Plan) GetCpuShare() string {
	if o == nil || IsNil(o.CpuShare) {
		var ret string
		return ret
	}
	return *o.CpuShare
}

// GetCpuShareOk returns a tuple with the CpuShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetCpuShareOk() (*string, bool) {
	if o == nil || IsNil(o.CpuShare) {
		return nil, false
	}
	return o.CpuShare, true
}

// HasCpuShare returns a boolean if a field has been set.
func (o *Plan) HasCpuShare() bool {
	if o != nil && !IsNil(o.CpuShare) {
		return true
	}

	return false
}

// SetCpuShare gets a reference to the given string and assigns it to the CpuShare field.
func (o *Plan) SetCpuShare(v string) {
	o.CpuShare = &v
}

// GetCreateType returns the CreateType field value if set, zero value otherwise.
func (o *Plan) GetCreateType() string {
	if o == nil || IsNil(o.CreateType) {
		var ret string
		return ret
	}
	return *o.CreateType
}

// GetCreateTypeOk returns a tuple with the CreateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetCreateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateType) {
		return nil, false
	}
	return o.CreateType, true
}

// HasCreateType returns a boolean if a field has been set.
func (o *Plan) HasCreateType() bool {
	if o != nil && !IsNil(o.CreateType) {
		return true
	}

	return false
}

// SetCreateType gets a reference to the given string and assigns it to the CreateType field.
func (o *Plan) SetCreateType(v string) {
	o.CreateType = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *Plan) GetDisk() int64 {
	if o == nil || IsNil(o.Disk) {
		var ret int64
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetDiskOk() (*int64, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *Plan) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given int64 and assigns it to the Disk field.
func (o *Plan) SetDisk(v int64) {
	o.Disk = &v
}

// GetDiskInBytes returns the DiskInBytes field value if set, zero value otherwise.
func (o *Plan) GetDiskInBytes() int64 {
	if o == nil || IsNil(o.DiskInBytes) {
		var ret int64
		return ret
	}
	return *o.DiskInBytes
}

// GetDiskInBytesOk returns a tuple with the DiskInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetDiskInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.DiskInBytes) {
		return nil, false
	}
	return o.DiskInBytes, true
}

// HasDiskInBytes returns a boolean if a field has been set.
func (o *Plan) HasDiskInBytes() bool {
	if o != nil && !IsNil(o.DiskInBytes) {
		return true
	}

	return false
}

// SetDiskInBytes gets a reference to the given int64 and assigns it to the DiskInBytes field.
func (o *Plan) SetDiskInBytes(v int64) {
	o.DiskInBytes = &v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *Plan) GetGeneration() string {
	if o == nil || IsNil(o.Generation) {
		var ret string
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetGenerationOk() (*string, bool) {
	if o == nil || IsNil(o.Generation) {
		return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *Plan) HasGeneration() bool {
	if o != nil && !IsNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given string and assigns it to the Generation field.
func (o *Plan) SetGeneration(v string) {
	o.Generation = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Plan) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Plan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Plan) SetId(v string) {
	o.Id = &v
}

// GetIopsMaxHdd returns the IopsMaxHdd field value if set, zero value otherwise.
func (o *Plan) GetIopsMaxHdd() int64 {
	if o == nil || IsNil(o.IopsMaxHdd) {
		var ret int64
		return ret
	}
	return *o.IopsMaxHdd
}

// GetIopsMaxHddOk returns a tuple with the IopsMaxHdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetIopsMaxHddOk() (*int64, bool) {
	if o == nil || IsNil(o.IopsMaxHdd) {
		return nil, false
	}
	return o.IopsMaxHdd, true
}

// HasIopsMaxHdd returns a boolean if a field has been set.
func (o *Plan) HasIopsMaxHdd() bool {
	if o != nil && !IsNil(o.IopsMaxHdd) {
		return true
	}

	return false
}

// SetIopsMaxHdd gets a reference to the given int64 and assigns it to the IopsMaxHdd field.
func (o *Plan) SetIopsMaxHdd(v int64) {
	o.IopsMaxHdd = &v
}

// GetIopsMaxSsd returns the IopsMaxSsd field value if set, zero value otherwise.
func (o *Plan) GetIopsMaxSsd() int64 {
	if o == nil || IsNil(o.IopsMaxSsd) {
		var ret int64
		return ret
	}
	return *o.IopsMaxSsd
}

// GetIopsMaxSsdOk returns a tuple with the IopsMaxSsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetIopsMaxSsdOk() (*int64, bool) {
	if o == nil || IsNil(o.IopsMaxSsd) {
		return nil, false
	}
	return o.IopsMaxSsd, true
}

// HasIopsMaxSsd returns a boolean if a field has been set.
func (o *Plan) HasIopsMaxSsd() bool {
	if o != nil && !IsNil(o.IopsMaxSsd) {
		return true
	}

	return false
}

// SetIopsMaxSsd gets a reference to the given int64 and assigns it to the IopsMaxSsd field.
func (o *Plan) SetIopsMaxSsd(v int64) {
	o.IopsMaxSsd = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Plan) GetMemory() float64 {
	if o == nil || IsNil(o.Memory) {
		var ret float64
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetMemoryOk() (*float64, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Plan) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given float64 and assigns it to the Memory field.
func (o *Plan) SetMemory(v float64) {
	o.Memory = &v
}

// GetMemoryInBytes returns the MemoryInBytes field value if set, zero value otherwise.
func (o *Plan) GetMemoryInBytes() int64 {
	if o == nil || IsNil(o.MemoryInBytes) {
		var ret int64
		return ret
	}
	return *o.MemoryInBytes
}

// GetMemoryInBytesOk returns a tuple with the MemoryInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetMemoryInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MemoryInBytes) {
		return nil, false
	}
	return o.MemoryInBytes, true
}

// HasMemoryInBytes returns a boolean if a field has been set.
func (o *Plan) HasMemoryInBytes() bool {
	if o != nil && !IsNil(o.MemoryInBytes) {
		return true
	}

	return false
}

// SetMemoryInBytes gets a reference to the given int64 and assigns it to the MemoryInBytes field.
func (o *Plan) SetMemoryInBytes(v int64) {
	o.MemoryInBytes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Plan) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Plan) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Plan) SetName(v string) {
	o.Name = &v
}

// GetOff returns the Off field value if set, zero value otherwise.
func (o *Plan) GetOff() string {
	if o == nil || IsNil(o.Off) {
		var ret string
		return ret
	}
	return *o.Off
}

// GetOffOk returns a tuple with the Off field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetOffOk() (*string, bool) {
	if o == nil || IsNil(o.Off) {
		return nil, false
	}
	return o.Off, true
}

// HasOff returns a boolean if a field has been set.
func (o *Plan) HasOff() bool {
	if o != nil && !IsNil(o.Off) {
		return true
	}

	return false
}

// SetOff gets a reference to the given string and assigns it to the Off field.
func (o *Plan) SetOff(v string) {
	o.Off = &v
}

// GetOffPercent returns the OffPercent field value if set, zero value otherwise.
func (o *Plan) GetOffPercent() string {
	if o == nil || IsNil(o.OffPercent) {
		var ret string
		return ret
	}
	return *o.OffPercent
}

// GetOffPercentOk returns a tuple with the OffPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetOffPercentOk() (*string, bool) {
	if o == nil || IsNil(o.OffPercent) {
		return nil, false
	}
	return o.OffPercent, true
}

// HasOffPercent returns a boolean if a field has been set.
func (o *Plan) HasOffPercent() bool {
	if o != nil && !IsNil(o.OffPercent) {
		return true
	}

	return false
}

// SetOffPercent gets a reference to the given string and assigns it to the OffPercent field.
func (o *Plan) SetOffPercent(v string) {
	o.OffPercent = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Plan) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Plan) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *Plan) SetOrder(v string) {
	o.Order = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *Plan) GetOutbound() int64 {
	if o == nil || IsNil(o.Outbound) {
		var ret int64
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetOutboundOk() (*int64, bool) {
	if o == nil || IsNil(o.Outbound) {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *Plan) HasOutbound() bool {
	if o != nil && !IsNil(o.Outbound) {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given int64 and assigns it to the Outbound field.
func (o *Plan) SetOutbound(v int64) {
	o.Outbound = &v
}

// GetPortSpeed returns the PortSpeed field value if set, zero value otherwise.
func (o *Plan) GetPortSpeed() float64 {
	if o == nil || IsNil(o.PortSpeed) {
		var ret float64
		return ret
	}
	return *o.PortSpeed
}

// GetPortSpeedOk returns a tuple with the PortSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetPortSpeedOk() (*float64, bool) {
	if o == nil || IsNil(o.PortSpeed) {
		return nil, false
	}
	return o.PortSpeed, true
}

// HasPortSpeed returns a boolean if a field has been set.
func (o *Plan) HasPortSpeed() bool {
	if o != nil && !IsNil(o.PortSpeed) {
		return true
	}

	return false
}

// SetPortSpeed gets a reference to the given float64 and assigns it to the PortSpeed field.
func (o *Plan) SetPortSpeed(v float64) {
	o.PortSpeed = &v
}

// GetPps returns the Pps field value if set, zero value otherwise.
func (o *Plan) GetPps() []int64 {
	if o == nil || IsNil(o.Pps) {
		var ret []int64
		return ret
	}
	return o.Pps
}

// GetPpsOk returns a tuple with the Pps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetPpsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Pps) {
		return nil, false
	}
	return o.Pps, true
}

// HasPps returns a boolean if a field has been set.
func (o *Plan) HasPps() bool {
	if o != nil && !IsNil(o.Pps) {
		return true
	}

	return false
}

// SetPps gets a reference to the given []int64 and assigns it to the Pps field.
func (o *Plan) SetPps(v []int64) {
	o.Pps = v
}

// GetPricePerHour returns the PricePerHour field value if set, zero value otherwise.
func (o *Plan) GetPricePerHour() int64 {
	if o == nil || IsNil(o.PricePerHour) {
		var ret int64
		return ret
	}
	return *o.PricePerHour
}

// GetPricePerHourOk returns a tuple with the PricePerHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetPricePerHourOk() (*int64, bool) {
	if o == nil || IsNil(o.PricePerHour) {
		return nil, false
	}
	return o.PricePerHour, true
}

// HasPricePerHour returns a boolean if a field has been set.
func (o *Plan) HasPricePerHour() bool {
	if o != nil && !IsNil(o.PricePerHour) {
		return true
	}

	return false
}

// SetPricePerHour gets a reference to the given int64 and assigns it to the PricePerHour field.
func (o *Plan) SetPricePerHour(v int64) {
	o.PricePerHour = &v
}

// GetPricePerMonth returns the PricePerMonth field value if set, zero value otherwise.
func (o *Plan) GetPricePerMonth() int64 {
	if o == nil || IsNil(o.PricePerMonth) {
		var ret int64
		return ret
	}
	return *o.PricePerMonth
}

// GetPricePerMonthOk returns a tuple with the PricePerMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetPricePerMonthOk() (*int64, bool) {
	if o == nil || IsNil(o.PricePerMonth) {
		return nil, false
	}
	return o.PricePerMonth, true
}

// HasPricePerMonth returns a boolean if a field has been set.
func (o *Plan) HasPricePerMonth() bool {
	if o != nil && !IsNil(o.PricePerMonth) {
		return true
	}

	return false
}

// SetPricePerMonth gets a reference to the given int64 and assigns it to the PricePerMonth field.
func (o *Plan) SetPricePerMonth(v int64) {
	o.PricePerMonth = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *Plan) GetSubtype() string {
	if o == nil || IsNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *Plan) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *Plan) SetSubtype(v string) {
	o.Subtype = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *Plan) GetThroughput() int64 {
	if o == nil || IsNil(o.Throughput) {
		var ret int64
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetThroughputOk() (*int64, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *Plan) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int64 and assigns it to the Throughput field.
func (o *Plan) SetThroughput(v int64) {
	o.Throughput = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Plan) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Plan) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Plan) SetType(v string) {
	o.Type = &v
}

func (o Plan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BandwidthInBytes) {
		toSerialize["bandwidth_in_bytes"] = o.BandwidthInBytes
	}
	if !IsNil(o.BasePackage) {
		toSerialize["base_package"] = o.BasePackage
	}
	if !IsNil(o.Canary) {
		toSerialize["canary"] = o.Canary
	}
	if !IsNil(o.CpuCount) {
		toSerialize["cpu_count"] = o.CpuCount
	}
	if !IsNil(o.CpuShare) {
		toSerialize["cpu_share"] = o.CpuShare
	}
	if !IsNil(o.CreateType) {
		toSerialize["create_type"] = o.CreateType
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.DiskInBytes) {
		toSerialize["disk_in_bytes"] = o.DiskInBytes
	}
	if !IsNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IopsMaxHdd) {
		toSerialize["iops_max_hdd"] = o.IopsMaxHdd
	}
	if !IsNil(o.IopsMaxSsd) {
		toSerialize["iops_max_ssd"] = o.IopsMaxSsd
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.MemoryInBytes) {
		toSerialize["memory_in_bytes"] = o.MemoryInBytes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Off) {
		toSerialize["off"] = o.Off
	}
	if !IsNil(o.OffPercent) {
		toSerialize["off_percent"] = o.OffPercent
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Outbound) {
		toSerialize["outbound"] = o.Outbound
	}
	if !IsNil(o.PortSpeed) {
		toSerialize["port_speed"] = o.PortSpeed
	}
	if !IsNil(o.Pps) {
		toSerialize["pps"] = o.Pps
	}
	if !IsNil(o.PricePerHour) {
		toSerialize["price_per_hour"] = o.PricePerHour
	}
	if !IsNil(o.PricePerMonth) {
		toSerialize["price_per_month"] = o.PricePerMonth
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


