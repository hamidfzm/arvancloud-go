/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the Subnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subnet{}

// Subnet struct for Subnet
type Subnet struct {
	// Sub-ranges of CIDR available for dynamic allocation to ports. See AllocationPool.
	AllocationPools []AllocationPool `json:"allocation_pools,omitempty"`
	// CIDR representing IP range for this subnet, based on IP version.
	Cidr *string `json:"cidr,omitempty"`
	// Description for the subnet.
	Description *string `json:"description,omitempty"`
	// DNS name servers used by hosts in this subnet.
	DnsNameservers []string `json:"dns_nameservers,omitempty"`
	// Specifies whether DHCP is enabled for this subnet or not.
	EnableDhcp *bool `json:"enable_dhcp,omitempty"`
	// Default gateway used by devices in this subnet.
	GatewayIp *string `json:"gateway_ip,omitempty"`
	// Routes that should be used by devices with IPs from this subnet (not including local subnet route).
	HostRoutes []HostRoute `json:"host_routes,omitempty"`
	Id *string `json:"id,omitempty"`
	// IP version, either `4' or `6'.
	IpVersion *string `json:"ip_version,omitempty"`
	// The IPv6 address modes specifies mechanisms for assigning IPv6 IP addresses.
	Ipv6AddressMode *string `json:"ipv6_address_mode,omitempty"`
	// The IPv6 router advertisement specifies whether the networking service should transmit ICMPv6 packets.
	Ipv6RaMode *string `json:"ipv6_ra_mode,omitempty"`
	// Human-readable name for the subnet. Might not be unique.
	Name *string `json:"name,omitempty"`
	// UUID of the parent network.
	NetworkId *string `json:"network_id,omitempty"`
	// ProjectID is the project owner of the subnet.
	ProjectId *string `json:"project_id,omitempty"`
	RevisionNumber *int64 `json:"revision_number,omitempty"`
	Servers []NetworkServer `json:"servers,omitempty"`
	ServiceTypes []string `json:"service_types,omitempty"`
	// SubnetPoolID is the id of the subnet pool associated with the subnet.
	SubnetpoolId *string `json:"subnetpool_id,omitempty"`
	Tags []string `json:"tags,omitempty"`
	// TenantID is the project owner of the subnet.
	TenantId *string `json:"tenant_id,omitempty"`
}

// NewSubnet instantiates a new Subnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnet() *Subnet {
	this := Subnet{}
	return &this
}

// NewSubnetWithDefaults instantiates a new Subnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetWithDefaults() *Subnet {
	this := Subnet{}
	return &this
}

// GetAllocationPools returns the AllocationPools field value if set, zero value otherwise.
func (o *Subnet) GetAllocationPools() []AllocationPool {
	if o == nil || IsNil(o.AllocationPools) {
		var ret []AllocationPool
		return ret
	}
	return o.AllocationPools
}

// GetAllocationPoolsOk returns a tuple with the AllocationPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetAllocationPoolsOk() ([]AllocationPool, bool) {
	if o == nil || IsNil(o.AllocationPools) {
		return nil, false
	}
	return o.AllocationPools, true
}

// HasAllocationPools returns a boolean if a field has been set.
func (o *Subnet) HasAllocationPools() bool {
	if o != nil && !IsNil(o.AllocationPools) {
		return true
	}

	return false
}

// SetAllocationPools gets a reference to the given []AllocationPool and assigns it to the AllocationPools field.
func (o *Subnet) SetAllocationPools(v []AllocationPool) {
	o.AllocationPools = v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *Subnet) GetCidr() string {
	if o == nil || IsNil(o.Cidr) {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetCidrOk() (*string, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *Subnet) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *Subnet) SetCidr(v string) {
	o.Cidr = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Subnet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Subnet) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Subnet) SetDescription(v string) {
	o.Description = &v
}

// GetDnsNameservers returns the DnsNameservers field value if set, zero value otherwise.
func (o *Subnet) GetDnsNameservers() []string {
	if o == nil || IsNil(o.DnsNameservers) {
		var ret []string
		return ret
	}
	return o.DnsNameservers
}

// GetDnsNameserversOk returns a tuple with the DnsNameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDnsNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsNameservers) {
		return nil, false
	}
	return o.DnsNameservers, true
}

// HasDnsNameservers returns a boolean if a field has been set.
func (o *Subnet) HasDnsNameservers() bool {
	if o != nil && !IsNil(o.DnsNameservers) {
		return true
	}

	return false
}

// SetDnsNameservers gets a reference to the given []string and assigns it to the DnsNameservers field.
func (o *Subnet) SetDnsNameservers(v []string) {
	o.DnsNameservers = v
}

// GetEnableDhcp returns the EnableDhcp field value if set, zero value otherwise.
func (o *Subnet) GetEnableDhcp() bool {
	if o == nil || IsNil(o.EnableDhcp) {
		var ret bool
		return ret
	}
	return *o.EnableDhcp
}

// GetEnableDhcpOk returns a tuple with the EnableDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetEnableDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDhcp) {
		return nil, false
	}
	return o.EnableDhcp, true
}

// HasEnableDhcp returns a boolean if a field has been set.
func (o *Subnet) HasEnableDhcp() bool {
	if o != nil && !IsNil(o.EnableDhcp) {
		return true
	}

	return false
}

// SetEnableDhcp gets a reference to the given bool and assigns it to the EnableDhcp field.
func (o *Subnet) SetEnableDhcp(v bool) {
	o.EnableDhcp = &v
}

// GetGatewayIp returns the GatewayIp field value if set, zero value otherwise.
func (o *Subnet) GetGatewayIp() string {
	if o == nil || IsNil(o.GatewayIp) {
		var ret string
		return ret
	}
	return *o.GatewayIp
}

// GetGatewayIpOk returns a tuple with the GatewayIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetGatewayIpOk() (*string, bool) {
	if o == nil || IsNil(o.GatewayIp) {
		return nil, false
	}
	return o.GatewayIp, true
}

// HasGatewayIp returns a boolean if a field has been set.
func (o *Subnet) HasGatewayIp() bool {
	if o != nil && !IsNil(o.GatewayIp) {
		return true
	}

	return false
}

// SetGatewayIp gets a reference to the given string and assigns it to the GatewayIp field.
func (o *Subnet) SetGatewayIp(v string) {
	o.GatewayIp = &v
}

// GetHostRoutes returns the HostRoutes field value if set, zero value otherwise.
func (o *Subnet) GetHostRoutes() []HostRoute {
	if o == nil || IsNil(o.HostRoutes) {
		var ret []HostRoute
		return ret
	}
	return o.HostRoutes
}

// GetHostRoutesOk returns a tuple with the HostRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetHostRoutesOk() ([]HostRoute, bool) {
	if o == nil || IsNil(o.HostRoutes) {
		return nil, false
	}
	return o.HostRoutes, true
}

// HasHostRoutes returns a boolean if a field has been set.
func (o *Subnet) HasHostRoutes() bool {
	if o != nil && !IsNil(o.HostRoutes) {
		return true
	}

	return false
}

// SetHostRoutes gets a reference to the given []HostRoute and assigns it to the HostRoutes field.
func (o *Subnet) SetHostRoutes(v []HostRoute) {
	o.HostRoutes = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Subnet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Subnet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Subnet) SetId(v string) {
	o.Id = &v
}

// GetIpVersion returns the IpVersion field value if set, zero value otherwise.
func (o *Subnet) GetIpVersion() string {
	if o == nil || IsNil(o.IpVersion) {
		var ret string
		return ret
	}
	return *o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetIpVersionOk() (*string, bool) {
	if o == nil || IsNil(o.IpVersion) {
		return nil, false
	}
	return o.IpVersion, true
}

// HasIpVersion returns a boolean if a field has been set.
func (o *Subnet) HasIpVersion() bool {
	if o != nil && !IsNil(o.IpVersion) {
		return true
	}

	return false
}

// SetIpVersion gets a reference to the given string and assigns it to the IpVersion field.
func (o *Subnet) SetIpVersion(v string) {
	o.IpVersion = &v
}

// GetIpv6AddressMode returns the Ipv6AddressMode field value if set, zero value otherwise.
func (o *Subnet) GetIpv6AddressMode() string {
	if o == nil || IsNil(o.Ipv6AddressMode) {
		var ret string
		return ret
	}
	return *o.Ipv6AddressMode
}

// GetIpv6AddressModeOk returns a tuple with the Ipv6AddressMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetIpv6AddressModeOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6AddressMode) {
		return nil, false
	}
	return o.Ipv6AddressMode, true
}

// HasIpv6AddressMode returns a boolean if a field has been set.
func (o *Subnet) HasIpv6AddressMode() bool {
	if o != nil && !IsNil(o.Ipv6AddressMode) {
		return true
	}

	return false
}

// SetIpv6AddressMode gets a reference to the given string and assigns it to the Ipv6AddressMode field.
func (o *Subnet) SetIpv6AddressMode(v string) {
	o.Ipv6AddressMode = &v
}

// GetIpv6RaMode returns the Ipv6RaMode field value if set, zero value otherwise.
func (o *Subnet) GetIpv6RaMode() string {
	if o == nil || IsNil(o.Ipv6RaMode) {
		var ret string
		return ret
	}
	return *o.Ipv6RaMode
}

// GetIpv6RaModeOk returns a tuple with the Ipv6RaMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetIpv6RaModeOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6RaMode) {
		return nil, false
	}
	return o.Ipv6RaMode, true
}

// HasIpv6RaMode returns a boolean if a field has been set.
func (o *Subnet) HasIpv6RaMode() bool {
	if o != nil && !IsNil(o.Ipv6RaMode) {
		return true
	}

	return false
}

// SetIpv6RaMode gets a reference to the given string and assigns it to the Ipv6RaMode field.
func (o *Subnet) SetIpv6RaMode(v string) {
	o.Ipv6RaMode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Subnet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Subnet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Subnet) SetName(v string) {
	o.Name = &v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *Subnet) GetNetworkId() string {
	if o == nil || IsNil(o.NetworkId) {
		var ret string
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *Subnet) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given string and assigns it to the NetworkId field.
func (o *Subnet) SetNetworkId(v string) {
	o.NetworkId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *Subnet) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Subnet) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *Subnet) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetRevisionNumber returns the RevisionNumber field value if set, zero value otherwise.
func (o *Subnet) GetRevisionNumber() int64 {
	if o == nil || IsNil(o.RevisionNumber) {
		var ret int64
		return ret
	}
	return *o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetRevisionNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.RevisionNumber) {
		return nil, false
	}
	return o.RevisionNumber, true
}

// HasRevisionNumber returns a boolean if a field has been set.
func (o *Subnet) HasRevisionNumber() bool {
	if o != nil && !IsNil(o.RevisionNumber) {
		return true
	}

	return false
}

// SetRevisionNumber gets a reference to the given int64 and assigns it to the RevisionNumber field.
func (o *Subnet) SetRevisionNumber(v int64) {
	o.RevisionNumber = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *Subnet) GetServers() []NetworkServer {
	if o == nil || IsNil(o.Servers) {
		var ret []NetworkServer
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetServersOk() ([]NetworkServer, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *Subnet) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []NetworkServer and assigns it to the Servers field.
func (o *Subnet) SetServers(v []NetworkServer) {
	o.Servers = v
}

// GetServiceTypes returns the ServiceTypes field value if set, zero value otherwise.
func (o *Subnet) GetServiceTypes() []string {
	if o == nil || IsNil(o.ServiceTypes) {
		var ret []string
		return ret
	}
	return o.ServiceTypes
}

// GetServiceTypesOk returns a tuple with the ServiceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetServiceTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceTypes) {
		return nil, false
	}
	return o.ServiceTypes, true
}

// HasServiceTypes returns a boolean if a field has been set.
func (o *Subnet) HasServiceTypes() bool {
	if o != nil && !IsNil(o.ServiceTypes) {
		return true
	}

	return false
}

// SetServiceTypes gets a reference to the given []string and assigns it to the ServiceTypes field.
func (o *Subnet) SetServiceTypes(v []string) {
	o.ServiceTypes = v
}

// GetSubnetpoolId returns the SubnetpoolId field value if set, zero value otherwise.
func (o *Subnet) GetSubnetpoolId() string {
	if o == nil || IsNil(o.SubnetpoolId) {
		var ret string
		return ret
	}
	return *o.SubnetpoolId
}

// GetSubnetpoolIdOk returns a tuple with the SubnetpoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetSubnetpoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetpoolId) {
		return nil, false
	}
	return o.SubnetpoolId, true
}

// HasSubnetpoolId returns a boolean if a field has been set.
func (o *Subnet) HasSubnetpoolId() bool {
	if o != nil && !IsNil(o.SubnetpoolId) {
		return true
	}

	return false
}

// SetSubnetpoolId gets a reference to the given string and assigns it to the SubnetpoolId field.
func (o *Subnet) SetSubnetpoolId(v string) {
	o.SubnetpoolId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Subnet) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Subnet) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Subnet) SetTags(v []string) {
	o.Tags = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Subnet) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Subnet) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Subnet) SetTenantId(v string) {
	o.TenantId = &v
}

func (o Subnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocationPools) {
		toSerialize["allocation_pools"] = o.AllocationPools
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DnsNameservers) {
		toSerialize["dns_nameservers"] = o.DnsNameservers
	}
	if !IsNil(o.EnableDhcp) {
		toSerialize["enable_dhcp"] = o.EnableDhcp
	}
	if !IsNil(o.GatewayIp) {
		toSerialize["gateway_ip"] = o.GatewayIp
	}
	if !IsNil(o.HostRoutes) {
		toSerialize["host_routes"] = o.HostRoutes
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpVersion) {
		toSerialize["ip_version"] = o.IpVersion
	}
	if !IsNil(o.Ipv6AddressMode) {
		toSerialize["ipv6_address_mode"] = o.Ipv6AddressMode
	}
	if !IsNil(o.Ipv6RaMode) {
		toSerialize["ipv6_ra_mode"] = o.Ipv6RaMode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkId) {
		toSerialize["network_id"] = o.NetworkId
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.RevisionNumber) {
		toSerialize["revision_number"] = o.RevisionNumber
	}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.ServiceTypes) {
		toSerialize["service_types"] = o.ServiceTypes
	}
	if !IsNil(o.SubnetpoolId) {
		toSerialize["subnetpool_id"] = o.SubnetpoolId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	return toSerialize, nil
}

type NullableSubnet struct {
	value *Subnet
	isSet bool
}

func (v NullableSubnet) Get() *Subnet {
	return v.value
}

func (v *NullableSubnet) Set(val *Subnet) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnet(val *Subnet) *NullableSubnet {
	return &NullableSubnet{value: val, isSet: true}
}

func (v NullableSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


