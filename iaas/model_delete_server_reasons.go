/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the DeleteServerReasons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteServerReasons{}

// DeleteServerReasons struct for DeleteServerReasons
type DeleteServerReasons struct {
	Reasons []DeleteServerReasonAnswer `json:"reasons,omitempty"`
}

// NewDeleteServerReasons instantiates a new DeleteServerReasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteServerReasons() *DeleteServerReasons {
	this := DeleteServerReasons{}
	return &this
}

// NewDeleteServerReasonsWithDefaults instantiates a new DeleteServerReasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteServerReasonsWithDefaults() *DeleteServerReasons {
	this := DeleteServerReasons{}
	return &this
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *DeleteServerReasons) GetReasons() []DeleteServerReasonAnswer {
	if o == nil || IsNil(o.Reasons) {
		var ret []DeleteServerReasonAnswer
		return ret
	}
	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteServerReasons) GetReasonsOk() ([]DeleteServerReasonAnswer, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *DeleteServerReasons) HasReasons() bool {
	if o != nil && !IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given []DeleteServerReasonAnswer and assigns it to the Reasons field.
func (o *DeleteServerReasons) SetReasons(v []DeleteServerReasonAnswer) {
	o.Reasons = v
}

func (o DeleteServerReasons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteServerReasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reasons) {
		toSerialize["reasons"] = o.Reasons
	}
	return toSerialize, nil
}

type NullableDeleteServerReasons struct {
	value *DeleteServerReasons
	isSet bool
}

func (v NullableDeleteServerReasons) Get() *DeleteServerReasons {
	return v.value
}

func (v *NullableDeleteServerReasons) Set(val *DeleteServerReasons) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteServerReasons) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteServerReasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteServerReasons(val *DeleteServerReasons) *NullableDeleteServerReasons {
	return &NullableDeleteServerReasons{value: val, isSet: true}
}

func (v NullableDeleteServerReasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteServerReasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


