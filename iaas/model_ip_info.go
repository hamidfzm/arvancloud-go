/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the IPInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPInfo{}

// IPInfo struct for IPInfo
type IPInfo struct {
	Address *string `json:"address,omitempty"`
	GatewayAddress *string `json:"gateway_address,omitempty"`
	PortId *string `json:"port_id,omitempty"`
	SubnetId *string `json:"subnet_id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewIPInfo instantiates a new IPInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPInfo() *IPInfo {
	this := IPInfo{}
	return &this
}

// NewIPInfoWithDefaults instantiates a new IPInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPInfoWithDefaults() *IPInfo {
	this := IPInfo{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *IPInfo) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPInfo) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IPInfo) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *IPInfo) SetAddress(v string) {
	o.Address = &v
}

// GetGatewayAddress returns the GatewayAddress field value if set, zero value otherwise.
func (o *IPInfo) GetGatewayAddress() string {
	if o == nil || IsNil(o.GatewayAddress) {
		var ret string
		return ret
	}
	return *o.GatewayAddress
}

// GetGatewayAddressOk returns a tuple with the GatewayAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPInfo) GetGatewayAddressOk() (*string, bool) {
	if o == nil || IsNil(o.GatewayAddress) {
		return nil, false
	}
	return o.GatewayAddress, true
}

// HasGatewayAddress returns a boolean if a field has been set.
func (o *IPInfo) HasGatewayAddress() bool {
	if o != nil && !IsNil(o.GatewayAddress) {
		return true
	}

	return false
}

// SetGatewayAddress gets a reference to the given string and assigns it to the GatewayAddress field.
func (o *IPInfo) SetGatewayAddress(v string) {
	o.GatewayAddress = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *IPInfo) GetPortId() string {
	if o == nil || IsNil(o.PortId) {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPInfo) GetPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *IPInfo) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *IPInfo) SetPortId(v string) {
	o.PortId = &v
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *IPInfo) GetSubnetId() string {
	if o == nil || IsNil(o.SubnetId) {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPInfo) GetSubnetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetId) {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *IPInfo) HasSubnetId() bool {
	if o != nil && !IsNil(o.SubnetId) {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *IPInfo) SetSubnetId(v string) {
	o.SubnetId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IPInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IPInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IPInfo) SetType(v string) {
	o.Type = &v
}

func (o IPInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.GatewayAddress) {
		toSerialize["gateway_address"] = o.GatewayAddress
	}
	if !IsNil(o.PortId) {
		toSerialize["port_id"] = o.PortId
	}
	if !IsNil(o.SubnetId) {
		toSerialize["subnet_id"] = o.SubnetId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableIPInfo struct {
	value *IPInfo
	isSet bool
}

func (v NullableIPInfo) Get() *IPInfo {
	return v.value
}

func (v *NullableIPInfo) Set(val *IPInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIPInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIPInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPInfo(val *IPInfo) *NullableIPInfo {
	return &NullableIPInfo{value: val, isSet: true}
}

func (v NullableIPInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


