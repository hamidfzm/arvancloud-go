/*

Testing ServersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package iaas

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/hamidfzm/arvancloud-go/iaas"
)

func Test_iaas_ServersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServersAPIService AddServerPublicIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.AddServerPublicIP(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService AttachServerRootVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.AttachServerRootVolume(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService AttachServerToSecurityGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.AttachServerToSecurityGroup(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService CreateServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.ServersAPI.CreateServer(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService DeleteServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.DeleteServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService DetachServerFromSecurityGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.DetachServerFromSecurityGroup(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService DetachServerRootVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.DetachServerRootVolume(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService GetAllServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.ServersAPI.GetAllServers(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService GetDeleteReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.ServersAPI.GetDeleteReasons(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService GetRegionServerCreationOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.ServersAPI.GetRegionServerCreationOptions(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService GetServerAvailableActions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.GetServerAvailableActions(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService GetServerDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.GetServerDetails(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService GetServerVNC", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.GetServerVNC(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService HardRebootServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.HardRebootServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService PowerOffServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.PowerOffServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService PowerOnServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.PowerOnServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService RebootServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.RebootServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService RebuildServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.RebuildServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService RenameServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.RenameServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService RescueServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.RescueServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ResetRootPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.ResetRootPassword(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ResizeServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.ResizeServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ResizeServerRootVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.ResizeServerRootVolume(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService TakeServerSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.TakeServerSnapshot(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService ToggleInstanceHA", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string
		var action string

		resp, httpRes, err := apiClient.ServersAPI.ToggleInstanceHA(context.Background(), region, id, action).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServersAPIService UnrescueServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.ServersAPI.UnrescueServer(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
