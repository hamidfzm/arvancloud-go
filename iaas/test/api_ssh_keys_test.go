/*

Testing SSHKeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package iaas

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/hamidfzm/arvancloud-go/iaas"
)

func Test_iaas_SSHKeysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SSHKeysAPIService CreateSSHKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.SSHKeysAPI.CreateSSHKey(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHKeysAPIService DeleteSSHKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var name string

		resp, httpRes, err := apiClient.SSHKeysAPI.DeleteSSHKey(context.Background(), region, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHKeysAPIService GetAllSSHKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.SSHKeysAPI.GetAllSSHKeys(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSHKeysAPIService GetSSHKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var name string

		resp, httpRes, err := apiClient.SSHKeysAPI.GetSSHKey(context.Background(), region, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
