/*

Testing TagsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package iaas

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/hamidfzm/arvancloud-go/iaas"
)

func Test_iaas_TagsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TagsAPIService AttachTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.TagsAPI.AttachTag(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsAPIService CreateTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.TagsAPI.CreateTag(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsAPIService DeleteTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.TagsAPI.DeleteTag(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsAPIService DetachTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.TagsAPI.DetachTag(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsAPIService GetAllUserTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.TagsAPI.GetAllUserTags(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsAPIService TagMultipleInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.TagsAPI.TagMultipleInstances(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsAPIService UpdateTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.TagsAPI.UpdateTag(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
