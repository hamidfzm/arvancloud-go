/*

Testing VolumesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package iaas

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/hamidfzm/arvancloud-go/iaas"
)

func Test_iaas_VolumesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VolumesAPIService AttachVolumeToServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.VolumesAPI.AttachVolumeToServer(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService CreateOSVolumeFromSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.CreateOSVolumeFromSnapshot(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService CreateVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.CreateVolume(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService CreateVolumeFromSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.CreateVolumeFromSnapshot(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService DeleteVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.DeleteVolume(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService DeleteVolumeSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.DeleteVolumeSnapshot(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService DetachVolumeFromServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.VolumesAPI.DetachVolumeFromServer(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetAllOSVolumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.VolumesAPI.GetAllOSVolumes(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetAllVolumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.VolumesAPI.GetAllVolumes(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetVolumeLimits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.VolumesAPI.GetVolumeLimits(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetVolumeOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		resp, httpRes, err := apiClient.VolumesAPI.GetVolumeOptions(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetVolumeSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string

		httpRes, err := apiClient.VolumesAPI.GetVolumeSnapshots(context.Background(), region).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService RevertVolumeSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.RevertVolumeSnapshot(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService UpdateVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.UpdateVolume(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService UpdateVolumeSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var region string
		var id string

		resp, httpRes, err := apiClient.VolumesAPI.UpdateVolumeSnapshot(context.Background(), region, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
