/*
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the MaxIOPSAndThroughput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaxIOPSAndThroughput{}

// MaxIOPSAndThroughput struct for MaxIOPSAndThroughput
type MaxIOPSAndThroughput struct {
	Hdd *string `json:"hdd,omitempty"`
	Ssd *string `json:"ssd,omitempty"`
}

// NewMaxIOPSAndThroughput instantiates a new MaxIOPSAndThroughput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaxIOPSAndThroughput() *MaxIOPSAndThroughput {
	this := MaxIOPSAndThroughput{}
	return &this
}

// NewMaxIOPSAndThroughputWithDefaults instantiates a new MaxIOPSAndThroughput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaxIOPSAndThroughputWithDefaults() *MaxIOPSAndThroughput {
	this := MaxIOPSAndThroughput{}
	return &this
}

// GetHdd returns the Hdd field value if set, zero value otherwise.
func (o *MaxIOPSAndThroughput) GetHdd() string {
	if o == nil || IsNil(o.Hdd) {
		var ret string
		return ret
	}
	return *o.Hdd
}

// GetHddOk returns a tuple with the Hdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxIOPSAndThroughput) GetHddOk() (*string, bool) {
	if o == nil || IsNil(o.Hdd) {
		return nil, false
	}
	return o.Hdd, true
}

// HasHdd returns a boolean if a field has been set.
func (o *MaxIOPSAndThroughput) HasHdd() bool {
	if o != nil && !IsNil(o.Hdd) {
		return true
	}

	return false
}

// SetHdd gets a reference to the given string and assigns it to the Hdd field.
func (o *MaxIOPSAndThroughput) SetHdd(v string) {
	o.Hdd = &v
}

// GetSsd returns the Ssd field value if set, zero value otherwise.
func (o *MaxIOPSAndThroughput) GetSsd() string {
	if o == nil || IsNil(o.Ssd) {
		var ret string
		return ret
	}
	return *o.Ssd
}

// GetSsdOk returns a tuple with the Ssd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaxIOPSAndThroughput) GetSsdOk() (*string, bool) {
	if o == nil || IsNil(o.Ssd) {
		return nil, false
	}
	return o.Ssd, true
}

// HasSsd returns a boolean if a field has been set.
func (o *MaxIOPSAndThroughput) HasSsd() bool {
	if o != nil && !IsNil(o.Ssd) {
		return true
	}

	return false
}

// SetSsd gets a reference to the given string and assigns it to the Ssd field.
func (o *MaxIOPSAndThroughput) SetSsd(v string) {
	o.Ssd = &v
}

func (o MaxIOPSAndThroughput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaxIOPSAndThroughput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hdd) {
		toSerialize["hdd"] = o.Hdd
	}
	if !IsNil(o.Ssd) {
		toSerialize["ssd"] = o.Ssd
	}
	return toSerialize, nil
}

type NullableMaxIOPSAndThroughput struct {
	value *MaxIOPSAndThroughput
	isSet bool
}

func (v NullableMaxIOPSAndThroughput) Get() *MaxIOPSAndThroughput {
	return v.value
}

func (v *NullableMaxIOPSAndThroughput) Set(val *MaxIOPSAndThroughput) {
	v.value = val
	v.isSet = true
}

func (v NullableMaxIOPSAndThroughput) IsSet() bool {
	return v.isSet
}

func (v *NullableMaxIOPSAndThroughput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaxIOPSAndThroughput(val *MaxIOPSAndThroughput) *NullableMaxIOPSAndThroughput {
	return &NullableMaxIOPSAndThroughput{value: val, isSet: true}
}

func (v NullableMaxIOPSAndThroughput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaxIOPSAndThroughput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


