/*
ArvanCloud Video Advertising Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vads

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CampaignsAdAPIService CampaignsAdAPI service
type CampaignsAdAPIService service

type ApiCampaignsCampaignAdsAdDeleteRequest struct {
	ctx context.Context
	ApiService *CampaignsAdAPIService
	campaign string
	ad string
}

func (r ApiCampaignsCampaignAdsAdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CampaignsCampaignAdsAdDeleteExecute(r)
}

/*
CampaignsCampaignAdsAdDelete Detach ad from campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaign The Id of campaign
 @param ad The Id of ad
 @return ApiCampaignsCampaignAdsAdDeleteRequest
*/
func (a *CampaignsAdAPIService) CampaignsCampaignAdsAdDelete(ctx context.Context, campaign string, ad string) ApiCampaignsCampaignAdsAdDeleteRequest {
	return ApiCampaignsCampaignAdsAdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		campaign: campaign,
		ad: ad,
	}
}

// Execute executes the request
func (a *CampaignsAdAPIService) CampaignsCampaignAdsAdDeleteExecute(r ApiCampaignsCampaignAdsAdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAdAPIService.CampaignsCampaignAdsAdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign}/ads/{ad}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign"+"}", url.PathEscape(parameterValueToString(r.campaign, "campaign")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCampaignsCampaignAdsAdGetRequest struct {
	ctx context.Context
	ApiService *CampaignsAdAPIService
	campaign string
	ad string
}

func (r ApiCampaignsCampaignAdsAdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CampaignsCampaignAdsAdGetExecute(r)
}

/*
CampaignsCampaignAdsAdGet Show attach detail of specific campaign's ad.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaign The Id of campaign
 @param ad The Id of ad
 @return ApiCampaignsCampaignAdsAdGetRequest
*/
func (a *CampaignsAdAPIService) CampaignsCampaignAdsAdGet(ctx context.Context, campaign string, ad string) ApiCampaignsCampaignAdsAdGetRequest {
	return ApiCampaignsCampaignAdsAdGetRequest{
		ApiService: a,
		ctx: ctx,
		campaign: campaign,
		ad: ad,
	}
}

// Execute executes the request
func (a *CampaignsAdAPIService) CampaignsCampaignAdsAdGetExecute(r ApiCampaignsCampaignAdsAdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAdAPIService.CampaignsCampaignAdsAdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign}/ads/{ad}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign"+"}", url.PathEscape(parameterValueToString(r.campaign, "campaign")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCampaignsCampaignAdsAdPutRequest struct {
	ctx context.Context
	ApiService *CampaignsAdAPIService
	campaign string
	ad string
	body *CampaignsCampaignAdsAdPutRequest
}

// Campaign&#39;s ad details
func (r ApiCampaignsCampaignAdsAdPutRequest) Body(body CampaignsCampaignAdsAdPutRequest) ApiCampaignsCampaignAdsAdPutRequest {
	r.body = &body
	return r
}

func (r ApiCampaignsCampaignAdsAdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.CampaignsCampaignAdsAdPutExecute(r)
}

/*
CampaignsCampaignAdsAdPut Update the specified campaign's ad.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaign The Id of campaign
 @param ad The Id of ad
 @return ApiCampaignsCampaignAdsAdPutRequest
*/
func (a *CampaignsAdAPIService) CampaignsCampaignAdsAdPut(ctx context.Context, campaign string, ad string) ApiCampaignsCampaignAdsAdPutRequest {
	return ApiCampaignsCampaignAdsAdPutRequest{
		ApiService: a,
		ctx: ctx,
		campaign: campaign,
		ad: ad,
	}
}

// Execute executes the request
func (a *CampaignsAdAPIService) CampaignsCampaignAdsAdPutExecute(r ApiCampaignsCampaignAdsAdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAdAPIService.CampaignsCampaignAdsAdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign}/ads/{ad}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign"+"}", url.PathEscape(parameterValueToString(r.campaign, "campaign")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCampaignsCampaignAdsGetRequest struct {
	ctx context.Context
	ApiService *CampaignsAdAPIService
	campaign string
}

func (r ApiCampaignsCampaignAdsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CampaignsCampaignAdsGetExecute(r)
}

/*
CampaignsCampaignAdsGet Return all campaign's ads.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaign The Id of campaign
 @return ApiCampaignsCampaignAdsGetRequest
*/
func (a *CampaignsAdAPIService) CampaignsCampaignAdsGet(ctx context.Context, campaign string) ApiCampaignsCampaignAdsGetRequest {
	return ApiCampaignsCampaignAdsGetRequest{
		ApiService: a,
		ctx: ctx,
		campaign: campaign,
	}
}

// Execute executes the request
func (a *CampaignsAdAPIService) CampaignsCampaignAdsGetExecute(r ApiCampaignsCampaignAdsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAdAPIService.CampaignsCampaignAdsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign}/ads"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign"+"}", url.PathEscape(parameterValueToString(r.campaign, "campaign")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCampaignsCampaignAdsPostRequest struct {
	ctx context.Context
	ApiService *CampaignsAdAPIService
	campaign string
	body *CampaignsCampaignAdsPostRequest
}

// Campaign&#39;s ad details
func (r ApiCampaignsCampaignAdsPostRequest) Body(body CampaignsCampaignAdsPostRequest) ApiCampaignsCampaignAdsPostRequest {
	r.body = &body
	return r
}

func (r ApiCampaignsCampaignAdsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CampaignsCampaignAdsPostExecute(r)
}

/*
CampaignsCampaignAdsPost Attach ad to campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaign The Id of campaign
 @return ApiCampaignsCampaignAdsPostRequest
*/
func (a *CampaignsAdAPIService) CampaignsCampaignAdsPost(ctx context.Context, campaign string) ApiCampaignsCampaignAdsPostRequest {
	return ApiCampaignsCampaignAdsPostRequest{
		ApiService: a,
		ctx: ctx,
		campaign: campaign,
	}
}

// Execute executes the request
func (a *CampaignsAdAPIService) CampaignsCampaignAdsPostExecute(r ApiCampaignsCampaignAdsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAdAPIService.CampaignsCampaignAdsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign}/ads"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign"+"}", url.PathEscape(parameterValueToString(r.campaign, "campaign")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
