/*
ArvanCloud Video Advertising Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vads

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// AdAPIService AdAPI service
type AdAPIService service

type ApiAdsAdDeleteRequest struct {
	ctx context.Context
	ApiService *AdAPIService
	ad string
}

func (r ApiAdsAdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdsAdDeleteExecute(r)
}

/*
AdsAdDelete Remove the specified ad.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ad The Id of ad
 @return ApiAdsAdDeleteRequest
*/
func (a *AdAPIService) AdsAdDelete(ctx context.Context, ad string) ApiAdsAdDeleteRequest {
	return ApiAdsAdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		ad: ad,
	}
}

// Execute executes the request
func (a *AdAPIService) AdsAdDeleteExecute(r ApiAdsAdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAPIService.AdsAdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ads/{ad}"
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdsAdGetRequest struct {
	ctx context.Context
	ApiService *AdAPIService
	ad string
}

func (r ApiAdsAdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdsAdGetExecute(r)
}

/*
AdsAdGet Return the specified ad.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ad The Id of ad
 @return ApiAdsAdGetRequest
*/
func (a *AdAPIService) AdsAdGet(ctx context.Context, ad string) ApiAdsAdGetRequest {
	return ApiAdsAdGetRequest{
		ApiService: a,
		ctx: ctx,
		ad: ad,
	}
}

// Execute executes the request
func (a *AdAPIService) AdsAdGetExecute(r ApiAdsAdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAPIService.AdsAdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ads/{ad}"
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdsAdPutRequest struct {
	ctx context.Context
	ApiService *AdAPIService
	ad string
	body *AdsAdPutRequest
}

// Ad&#39;s details
func (r ApiAdsAdPutRequest) Body(body AdsAdPutRequest) ApiAdsAdPutRequest {
	r.body = &body
	return r
}

func (r ApiAdsAdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdsAdPutExecute(r)
}

/*
AdsAdPut Update the specified ad.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ad The Id of ad
 @return ApiAdsAdPutRequest
*/
func (a *AdAPIService) AdsAdPut(ctx context.Context, ad string) ApiAdsAdPutRequest {
	return ApiAdsAdPutRequest{
		ApiService: a,
		ctx: ctx,
		ad: ad,
	}
}

// Execute executes the request
func (a *AdAPIService) AdsAdPutExecute(r ApiAdsAdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAPIService.AdsAdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ads/{ad}"
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChannelsChannelAdsGetRequest struct {
	ctx context.Context
	ApiService *AdAPIService
	channel string
	filter *string
	page *int32
	perPage *int32
}

// Filter result
func (r ApiChannelsChannelAdsGetRequest) Filter(filter string) ApiChannelsChannelAdsGetRequest {
	r.filter = &filter
	return r
}

// Page number
func (r ApiChannelsChannelAdsGetRequest) Page(page int32) ApiChannelsChannelAdsGetRequest {
	r.page = &page
	return r
}

// Page limit for query
func (r ApiChannelsChannelAdsGetRequest) PerPage(perPage int32) ApiChannelsChannelAdsGetRequest {
	r.perPage = &perPage
	return r
}

func (r ApiChannelsChannelAdsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChannelsChannelAdsGetExecute(r)
}

/*
ChannelsChannelAdsGet Return all channel's ads.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channel The Id of channel
 @return ApiChannelsChannelAdsGetRequest
*/
func (a *AdAPIService) ChannelsChannelAdsGet(ctx context.Context, channel string) ApiChannelsChannelAdsGetRequest {
	return ApiChannelsChannelAdsGetRequest{
		ApiService: a,
		ctx: ctx,
		channel: channel,
	}
}

// Execute executes the request
func (a *AdAPIService) ChannelsChannelAdsGetExecute(r ApiChannelsChannelAdsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAPIService.ChannelsChannelAdsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/channels/{channel}/ads"
	localVarPath = strings.Replace(localVarPath, "{"+"channel"+"}", url.PathEscape(parameterValueToString(r.channel, "channel")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChannelsChannelAdsPostRequest struct {
	ctx context.Context
	ApiService *AdAPIService
	channel string
	title *string
	adType *string
	skipType *string
	clickThrough *string
	mediaFile *os.File
	description *string
	skipOffset *int32
}

// Title of ad
func (r ApiChannelsChannelAdsPostRequest) Title(title string) ApiChannelsChannelAdsPostRequest {
	r.title = &title
	return r
}

// Ad type
func (r ApiChannelsChannelAdsPostRequest) AdType(adType string) ApiChannelsChannelAdsPostRequest {
	r.adType = &adType
	return r
}

// Skip type
func (r ApiChannelsChannelAdsPostRequest) SkipType(skipType string) ApiChannelsChannelAdsPostRequest {
	r.skipType = &skipType
	return r
}

// Click URL when user click on ad
func (r ApiChannelsChannelAdsPostRequest) ClickThrough(clickThrough string) ApiChannelsChannelAdsPostRequest {
	r.clickThrough = &clickThrough
	return r
}

// Media file for ad (Accept video/mp4 for pre_roll ads)
func (r ApiChannelsChannelAdsPostRequest) MediaFile(mediaFile *os.File) ApiChannelsChannelAdsPostRequest {
	r.mediaFile = mediaFile
	return r
}

// Description of ad
func (r ApiChannelsChannelAdsPostRequest) Description(description string) ApiChannelsChannelAdsPostRequest {
	r.description = &description
	return r
}

// Skip offset in seconds (required if skip type is allow)
func (r ApiChannelsChannelAdsPostRequest) SkipOffset(skipOffset int32) ApiChannelsChannelAdsPostRequest {
	r.skipOffset = &skipOffset
	return r
}

func (r ApiChannelsChannelAdsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChannelsChannelAdsPostExecute(r)
}

/*
ChannelsChannelAdsPost Store a newly ad for specific channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param channel The Id of channel
 @return ApiChannelsChannelAdsPostRequest
*/
func (a *AdAPIService) ChannelsChannelAdsPost(ctx context.Context, channel string) ApiChannelsChannelAdsPostRequest {
	return ApiChannelsChannelAdsPostRequest{
		ApiService: a,
		ctx: ctx,
		channel: channel,
	}
}

// Execute executes the request
func (a *AdAPIService) ChannelsChannelAdsPostExecute(r ApiChannelsChannelAdsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAPIService.ChannelsChannelAdsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/channels/{channel}/ads"
	localVarPath = strings.Replace(localVarPath, "{"+"channel"+"}", url.PathEscape(parameterValueToString(r.channel, "channel")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return nil, reportError("title is required and must be specified")
	}
	if r.adType == nil {
		return nil, reportError("adType is required and must be specified")
	}
	if r.skipType == nil {
		return nil, reportError("skipType is required and must be specified")
	}
	if r.clickThrough == nil {
		return nil, reportError("clickThrough is required and must be specified")
	}
	if r.mediaFile == nil {
		return nil, reportError("mediaFile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "")
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "description", r.description, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "ad_type", r.adType, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "skip_type", r.skipType, "")
	if r.skipOffset != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "skip_offset", r.skipOffset, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "click_through", r.clickThrough, "")
	var mediaFileLocalVarFormFileName string
	var mediaFileLocalVarFileName     string
	var mediaFileLocalVarFileBytes    []byte

	mediaFileLocalVarFormFileName = "media_file"


	mediaFileLocalVarFile := r.mediaFile

	if mediaFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(mediaFileLocalVarFile)

		mediaFileLocalVarFileBytes = fbs
		mediaFileLocalVarFileName = mediaFileLocalVarFile.Name()
		mediaFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: mediaFileLocalVarFileBytes, fileName: mediaFileLocalVarFileName, formFileName: mediaFileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
