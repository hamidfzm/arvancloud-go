/*
ArvanCloud Video Advertising Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vads

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ReportAPIService ReportAPI service
type ReportAPIService service

type ApiAdsAdReportsTrackEventPeriodGetRequest struct {
	ctx context.Context
	ApiService *ReportAPIService
	ad string
	event string
	period string
	from *string
	to *string
}

// Starting datetime of report. Format: &#39;YYYY-MM-DD H:i:s&#39; like: &#39;2018-01-01 00:00:00&#39;
func (r ApiAdsAdReportsTrackEventPeriodGetRequest) From(from string) ApiAdsAdReportsTrackEventPeriodGetRequest {
	r.from = &from
	return r
}

// Ending datetime of report. Format: &#39;YYYY-MM-DD H:i:s&#39; like: &#39;2018-01-01 00:00:00&#39;
func (r ApiAdsAdReportsTrackEventPeriodGetRequest) To(to string) ApiAdsAdReportsTrackEventPeriodGetRequest {
	r.to = &to
	return r
}

func (r ApiAdsAdReportsTrackEventPeriodGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdsAdReportsTrackEventPeriodGetExecute(r)
}

/*
AdsAdReportsTrackEventPeriodGet Ad track report per event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ad The Id of ad
 @param event Event type
 @param period Report period
 @return ApiAdsAdReportsTrackEventPeriodGetRequest
*/
func (a *ReportAPIService) AdsAdReportsTrackEventPeriodGet(ctx context.Context, ad string, event string, period string) ApiAdsAdReportsTrackEventPeriodGetRequest {
	return ApiAdsAdReportsTrackEventPeriodGetRequest{
		ApiService: a,
		ctx: ctx,
		ad: ad,
		event: event,
		period: period,
	}
}

// Execute executes the request
func (a *ReportAPIService) AdsAdReportsTrackEventPeriodGetExecute(r ApiAdsAdReportsTrackEventPeriodGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportAPIService.AdsAdReportsTrackEventPeriodGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ads/{ad}/reports/track/{event}/{period}"
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event"+"}", url.PathEscape(parameterValueToString(r.event, "event")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", url.PathEscape(parameterValueToString(r.period, "period")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest struct {
	ctx context.Context
	ApiService *ReportAPIService
	campaign string
	ad string
	event string
	period string
	from *string
	to *string
}

// Starting datetime of report. Format: &#39;YYYY-MM-DD H:i:s&#39; like: &#39;2018-01-01 00:00:00&#39;
func (r ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest) From(from string) ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest {
	r.from = &from
	return r
}

// Ending datetime of report. Format: &#39;YYYY-MM-DD H:i:s&#39; like: &#39;2018-01-01 00:00:00&#39;
func (r ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest) To(to string) ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest {
	r.to = &to
	return r
}

func (r ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CampaignsCampaignAdsAdReportsTrackEventPeriodGetExecute(r)
}

/*
CampaignsCampaignAdsAdReportsTrackEventPeriodGet Ad in campaign track report per event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaign The Id of campaign
 @param ad The Id of ad
 @param event Event type
 @param period Report period
 @return ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest
*/
func (a *ReportAPIService) CampaignsCampaignAdsAdReportsTrackEventPeriodGet(ctx context.Context, campaign string, ad string, event string, period string) ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest {
	return ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest{
		ApiService: a,
		ctx: ctx,
		campaign: campaign,
		ad: ad,
		event: event,
		period: period,
	}
}

// Execute executes the request
func (a *ReportAPIService) CampaignsCampaignAdsAdReportsTrackEventPeriodGetExecute(r ApiCampaignsCampaignAdsAdReportsTrackEventPeriodGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportAPIService.CampaignsCampaignAdsAdReportsTrackEventPeriodGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign}/ads/{ad}/reports/track/{event}/{period}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign"+"}", url.PathEscape(parameterValueToString(r.campaign, "campaign")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad"+"}", url.PathEscape(parameterValueToString(r.ad, "ad")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event"+"}", url.PathEscape(parameterValueToString(r.event, "event")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", url.PathEscape(parameterValueToString(r.period, "period")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCampaignsCampaignReportsTrackEventPeriodGetRequest struct {
	ctx context.Context
	ApiService *ReportAPIService
	campaign string
	event string
	period string
	from *string
	to *string
}

// Starting datetime of report. Format: &#39;YYYY-MM-DD H:i:s&#39; like: &#39;2018-01-01 00:00:00&#39;
func (r ApiCampaignsCampaignReportsTrackEventPeriodGetRequest) From(from string) ApiCampaignsCampaignReportsTrackEventPeriodGetRequest {
	r.from = &from
	return r
}

// Ending datetime of report. Format: &#39;YYYY-MM-DD H:i:s&#39; like: &#39;2018-01-01 00:00:00&#39;
func (r ApiCampaignsCampaignReportsTrackEventPeriodGetRequest) To(to string) ApiCampaignsCampaignReportsTrackEventPeriodGetRequest {
	r.to = &to
	return r
}

func (r ApiCampaignsCampaignReportsTrackEventPeriodGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CampaignsCampaignReportsTrackEventPeriodGetExecute(r)
}

/*
CampaignsCampaignReportsTrackEventPeriodGet Campaign track report per event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaign The Id of campaign
 @param event Event type
 @param period Report period
 @return ApiCampaignsCampaignReportsTrackEventPeriodGetRequest
*/
func (a *ReportAPIService) CampaignsCampaignReportsTrackEventPeriodGet(ctx context.Context, campaign string, event string, period string) ApiCampaignsCampaignReportsTrackEventPeriodGetRequest {
	return ApiCampaignsCampaignReportsTrackEventPeriodGetRequest{
		ApiService: a,
		ctx: ctx,
		campaign: campaign,
		event: event,
		period: period,
	}
}

// Execute executes the request
func (a *ReportAPIService) CampaignsCampaignReportsTrackEventPeriodGetExecute(r ApiCampaignsCampaignReportsTrackEventPeriodGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportAPIService.CampaignsCampaignReportsTrackEventPeriodGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign}/reports/track/{event}/{period}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign"+"}", url.PathEscape(parameterValueToString(r.campaign, "campaign")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event"+"}", url.PathEscape(parameterValueToString(r.event, "event")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", url.PathEscape(parameterValueToString(r.period, "period")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
